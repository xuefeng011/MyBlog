{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/cafe/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"source/uploads/favicon.ico","path":"uploads/favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/nodejs1.jpg","path":"uploads/nodejs1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/pic.png","path":"uploads/pic.png","modified":0,"renderable":0},{"_id":"source/uploads/sort.png","path":"uploads/sort.png","modified":0,"renderable":0},{"_id":"themes/cafe/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/images/fly-to-top.png","path":"images/fly-to-top.png","modified":0,"renderable":1},{"_id":"themes/cafe/source/js/elevator.js","path":"js/elevator.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/js/is.js","path":"js/is.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/duoshuo/embed.js","path":"duoshuo/embed.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/jquery/jquery.min.js","path":"jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","path":"themes/screenshots/Cafe.png","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/cafe/.bowerrc","hash":"5d8502d31f0ed07e935bc6faf5e7f8ce8308ab75","modified":1498180077352},{"_id":"themes/cafe/.gitignore","hash":"667f9c7beb0dd898dc1d4d3c2348973dffecc8ae","modified":1498180077353},{"_id":"themes/cafe/README.md","hash":"4252d72495f3aa41297b68c7f6721c1e59b35ab8","modified":1498180077365},{"_id":"themes/cafe/README_en.md","hash":"72a99ec71e7308d8c4861658bb0750f9cb248f4c","modified":1498180077366},{"_id":"themes/cafe/_config.yml","hash":"077cb940408bf5c4912fa136c42eea9cbe1a1c31","modified":1498180926757},{"_id":"themes/cafe/bower.json","hash":"b62df738176f21afb7f9bac2ddca8b269fd4b863","modified":1498180077385},{"_id":"themes/cafe/cafe-qrcode.png","hash":"4fef2c889376a208a49aa92c582b147e7e005d23","modified":1498180077385},{"_id":"themes/cafe/package.json","hash":"bf40790696da9a813489f49dcf90a87f9114869c","modified":1498180077453},{"_id":"themes/cafe/webpack.config.js","hash":"7fa25bf7c2bf831c8dfcece8bbeee6cb5c2b2c80","modified":1498180077522},{"_id":"themes/cafe/scripts/hexo-plugins.txt","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498180077455},{"_id":"themes/cafe/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1498180077302},{"_id":"themes/cafe/.git/config","hash":"fd4571017cc98ab0d16935dfe61f3664b285c2b2","modified":1498180077313},{"_id":"themes/cafe/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1498180056916},{"_id":"themes/cafe/.git/index","hash":"28b344d86fb0e49e5428d0a15a27f64eafa8f200","modified":1498180077523},{"_id":"themes/cafe/.git/packed-refs","hash":"bb9d7b059bda88ef5fb60fbb1c355c7ab5936522","modified":1498180077292},{"_id":"themes/cafe/assets/duoshuo_comment.png","hash":"33402149f82b66ff4ed405f44beb06eb0172b6de","modified":1498180077368},{"_id":"themes/cafe/assets/share.png","hash":"823926d9cb8985ceb93a119ef138f9638a8ead1a","modified":1498180077384},{"_id":"themes/cafe/languages/default.yml","hash":"5cd08d4d07accb4bd72d27298ff0fbe9584126d0","modified":1498181129939},{"_id":"themes/cafe/languages/en.yml","hash":"1a19ac9b8f91dd6e58f34c1d067f11db5007eba3","modified":1498180077389},{"_id":"themes/cafe/languages/nl.yml","hash":"218d1ef7863e884de5e48c6a9fa7c8e3a07a88c6","modified":1498180077389},{"_id":"themes/cafe/languages/no.yml","hash":"d326d07449152e874d419c21fe31bbbfa624809c","modified":1498180077390},{"_id":"themes/cafe/languages/ru.yml","hash":"2b9f264074acbbdd46512d8d7488e7ec0eee2da9","modified":1498180077390},{"_id":"themes/cafe/languages/zh-CN.yml","hash":"f4f32982c7874b00b4b185b3f7979a416dd6211f","modified":1498180077391},{"_id":"themes/cafe/languages/zh-TW.yml","hash":"151d940418c0bcdcfa923f94d33df2ee18dd26c9","modified":1498180077392},{"_id":"themes/cafe/layout/archive.ejs","hash":"11912b8e50dafbe9b0a65df0beaeab64fde90abe","modified":1498180077423},{"_id":"themes/cafe/layout/category.ejs","hash":"f46e99e5b68c2ee67bdab068b1da4029bc09847d","modified":1498180077424},{"_id":"themes/cafe/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1498180077425},{"_id":"themes/cafe/layout/layout.ejs","hash":"54719bf692ee75c4e0fc4a39dec83484e4851307","modified":1498180077425},{"_id":"themes/cafe/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498180077428},{"_id":"themes/cafe/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1498180077452},{"_id":"themes/cafe/layout/tag.ejs","hash":"4349f382b07603f9d2c03dd4df70ddea9b9a035c","modified":1498180077453},{"_id":"themes/cafe/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1498180077454},{"_id":"themes/cafe/source/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1498180077515},{"_id":"source/about/index.md","hash":"8da4f55ad269832a7267706947a0c231f2b48710","modified":1476237889620},{"_id":"source/_posts/Js.md","hash":"4222528dafec460a327cce1fb52de43939e8b3f8","modified":1489738468169},{"_id":"source/_posts/flagcount.md","hash":"7799e338d29991697609aafbd39afdab23ea4e49","modified":1487560778620},{"_id":"source/_posts/css3新特性.md","hash":"0b8a37343e11f4379a7fd6813415509d5fb53841","modified":1487572386330},{"_id":"source/_posts/box-model.md","hash":"2da074e38ecf3c69dedb47d864d42962f333b6a9","modified":1487930542763},{"_id":"source/_posts/flex.md","hash":"3dbd15db513f032d24135f54db1309eb1fe49587","modified":1487731641959},{"_id":"source/_posts/git_map.md","hash":"44b1f70433a568458b31ebf936caba9f94628f1e","modified":1487572374192},{"_id":"source/_posts/heroku.md","hash":"c7c66d1bbcc0eb2b4337b18764b9ecbd767d5477","modified":1487560257118},{"_id":"source/_posts/js判断APP是否安装.md","hash":"c444ca94cd6e4a7e316173533ad795aa204dcd62","modified":1488248952616},{"_id":"source/_posts/markdown.md","hash":"b7519497e91c30e08be15bde999f6d35a815b9e8","modified":1487571851806},{"_id":"source/_posts/react_map.md","hash":"6ca948fe502af24699d379f4e8591291a98fdec7","modified":1487571860581},{"_id":"source/_posts/reactjs.md","hash":"cde318a36adb0e93f44de7c3c42222ba54db6dc8","modified":1487571908275},{"_id":"source/_posts/redis.md","hash":"97e7cb5f776e35bcd56687572ffc182a1b3f2a54","modified":1487560268180},{"_id":"source/_posts/前端知识整理.md","hash":"1c47cdba1e6e6720005fcde36f065d0ea8ca239a","modified":1489545854880},{"_id":"source/_posts/算法.md","hash":"c938293c3e101743caf19720463292d2a99336aa","modified":1489484499857},{"_id":"source/uploads/appShare.js","hash":"b4251dfb583e690324982cfa5b773f2266549469","modified":1475912260104},{"_id":"source/uploads/favicon.ico","hash":"230b37cef533ca4c6fe324c87bd36b4a56986d32","modified":1475205592269},{"_id":"source/uploads/nodejs1.jpg","hash":"83922ec4605cd6b93de9abfb1e8454c8b5856bea","modified":1475976167760},{"_id":"source/uploads/pic.png","hash":"230b37cef533ca4c6fe324c87bd36b4a56986d32","modified":1475205592269},{"_id":"source/uploads/sort.png","hash":"d56b4ee34471bc6000647878aa93c6c5eb0fe6df","modified":1489484202389},{"_id":"source/uploads/分享.js","hash":"0101c40fe3d1e67dd2f1d06806ae79d1f7e01433","modified":1475914329628},{"_id":"themes/cafe/layout/_scripts/index.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498180077406},{"_id":"themes/cafe/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1498180056936},{"_id":"themes/cafe/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1498180056947},{"_id":"themes/cafe/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1498180056945},{"_id":"themes/cafe/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1498180056947},{"_id":"themes/cafe/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1498180056952},{"_id":"themes/cafe/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1498180056956},{"_id":"themes/cafe/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1498180056973},{"_id":"themes/cafe/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1498180056982},{"_id":"themes/cafe/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1498180056992},{"_id":"themes/cafe/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1498180056994},{"_id":"themes/cafe/.git/logs/HEAD","hash":"1bf8cd63a3211ad696aea7de4b6ff2195e840641","modified":1498180077308},{"_id":"themes/cafe/layout/_partial/after-footer.ejs","hash":"e48868420643950050f8622a1a68d738f0fddde5","modified":1498180077393},{"_id":"themes/cafe/layout/_partial/archive-post.ejs","hash":"4c7716e53396abdf828b518f90df3c00e63349da","modified":1498180077394},{"_id":"themes/cafe/layout/_partial/article.ejs","hash":"4491218cfc233f2ac16f99bd59412ccb998da007","modified":1498180077395},{"_id":"themes/cafe/layout/_partial/archive.ejs","hash":"b7358ffcbd26bc2c6c7bf384c4fb7b68085b6cbc","modified":1498180077394},{"_id":"themes/cafe/layout/_partial/comments.ejs","hash":"43217242b743530f6dd1c08e41af5c255f14abd9","modified":1498180077397},{"_id":"themes/cafe/layout/_partial/footer.ejs","hash":"fbc03f56835e967bfe6021a2102f058b1ec27af5","modified":1498180077398},{"_id":"themes/cafe/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1498180077398},{"_id":"themes/cafe/layout/_partial/head.ejs","hash":"6774dad5680a91f8a4d21e5d73189b92a9b6864b","modified":1498180077399},{"_id":"themes/cafe/layout/_partial/header.ejs","hash":"ee530030409ee4cd67136ad23c96aa1b3466293e","modified":1498180077399},{"_id":"themes/cafe/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1498180077400},{"_id":"themes/cafe/layout/_partial/sidebar.ejs","hash":"ce3ecf7c74fd5f50aebada49e403152de114e6bb","modified":1498180077405},{"_id":"themes/cafe/layout/_partial/widget.ejs","hash":"fe22996588b33eb9d44ab104c6ed5687fb11cac6","modified":1498180077405},{"_id":"themes/cafe/layout/_third-part/index.ejs","hash":"219d269b6840d5dde5a14e4f26ef49d102d32532","modified":1498180077412},{"_id":"themes/cafe/layout/_widget/archive.ejs","hash":"39a047c9bcfbce9d6a815b3938211213bd5268f7","modified":1498180077415},{"_id":"themes/cafe/layout/_widget/category.ejs","hash":"6064d276caf727d3e082343f9a30b015d30fdd48","modified":1498180077415},{"_id":"themes/cafe/layout/_widget/friendly_link.ejs","hash":"0c01b13ad81b729fd1f39e01b819d6f315a411b8","modified":1498180077417},{"_id":"themes/cafe/layout/_widget/hot_comment_posts.ejs","hash":"819fd75aad2d16d58bc06054b8fdf966d222576a","modified":1498180077418},{"_id":"themes/cafe/layout/_widget/lastest_comments.ejs","hash":"518f17d2a3ca5daca4a8a6ed186bae3ae348fde5","modified":1498180077419},{"_id":"themes/cafe/layout/_widget/post_content.ejs","hash":"9f17038635d221719c7ef10ae473f7f5b288fc9a","modified":1498180077420},{"_id":"themes/cafe/layout/_widget/recent_posts.ejs","hash":"1eca91f3cd8fb4563f708678130138be9404b70e","modified":1498180077420},{"_id":"themes/cafe/layout/_widget/social.ejs","hash":"601c0295ac544942bc78185ce5378a3a19f267fe","modified":1498180077421},{"_id":"themes/cafe/layout/_widget/tag.ejs","hash":"e82a6951bf13a05f0d2218516d51fac1953d6739","modified":1498180077421},{"_id":"themes/cafe/layout/_widget/tagcloud.ejs","hash":"a5846d3bd367a8147d84d57e64ebc93441378cd8","modified":1498180077422},{"_id":"themes/cafe/layout/_widget/wechat.ejs","hash":"22d19c533a30e41c56a45e4edb74ec30c8c70978","modified":1498180077423},{"_id":"themes/cafe/layout/partials/back2top.ejs","hash":"3b69f1d825f1837100151197da2b13b34676345d","modified":1498180077429},{"_id":"themes/cafe/layout/partials/hot-comment-posts.ejs","hash":"af27de063408d3336ea7bd700d3ea2c4bef71ae0","modified":1498180077430},{"_id":"themes/cafe/layout/partials/lastest-comments.ejs","hash":"64cf0da989e6aeb4635482f48355d74447ba32c8","modified":1498180077430},{"_id":"themes/cafe/layout/partials/pagination.ejs","hash":"146ae79bd5a89524d5f8026c21ed34a557fe753d","modified":1498180077451},{"_id":"themes/cafe/layout/partials/recent-posts.ejs","hash":"c4d6ad99fabe8a9821511e2c39861b268779d40e","modified":1498180077452},{"_id":"themes/cafe/source/_data/themes.yml","hash":"dbbd2878f85379b3c388f09539327085e0cdde34","modified":1498180077456},{"_id":"themes/cafe/source/css/_extend.styl","hash":"faef85ad9c2806b634a638b0b05b825277c11e45","modified":1498180077457},{"_id":"themes/cafe/source/css/_variables.styl","hash":"73cd2ad7c06c49b6f01ed0cd207e7aac55d22c8c","modified":1498180077468},{"_id":"themes/cafe/source/css/style.styl","hash":"3be6cfcbd1e66aaaddce961ffaf76c309ad3a859","modified":1498180077501},{"_id":"themes/cafe/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498180077504},{"_id":"themes/cafe/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498180077504},{"_id":"themes/cafe/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498180077505},{"_id":"themes/cafe/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498180077506},{"_id":"themes/cafe/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498180077507},{"_id":"themes/cafe/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498180077507},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1498180077513},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1498180077514},{"_id":"themes/cafe/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1498180077515},{"_id":"themes/cafe/source/images/fly-to-top.png","hash":"f189038da3c68a8012e924185a1faee98bde3003","modified":1498180077516},{"_id":"themes/cafe/source/js/elevator.js","hash":"2aab182c3f08aa939bbf09faf49e79e0681a6389","modified":1498180077519},{"_id":"themes/cafe/source/js/is.js","hash":"457446cf7fe0b08bfa197ee76435d273b456deaa","modified":1498180077520},{"_id":"themes/cafe/source/js/script.js","hash":"320cc11fb445658e7a1e1bb2e9da499ee579d755","modified":1498180077520},{"_id":"themes/cafe/source/duoshuo/embed.js","hash":"6a8d90f99d17a614312f87d9a6a7182c9cb484f4","modified":1498180077502},{"_id":"themes/cafe/source/jquery/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1498180077518},{"_id":"themes/cafe/.git/refs/heads/master","hash":"0d45cc45a4453c8d30039445c05b0df2b8dcb07f","modified":1498180077305},{"_id":"themes/cafe/layout/_partial/post/duoshuo.ejs","hash":"0ea7f7effe32f7c9b0716c380850223feb262bcd","modified":1498180077402},{"_id":"themes/cafe/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1498180077401},{"_id":"themes/cafe/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1498180077401},{"_id":"themes/cafe/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1498180077402},{"_id":"themes/cafe/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1498180077403},{"_id":"themes/cafe/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1498180077403},{"_id":"themes/cafe/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1498180077404},{"_id":"themes/cafe/layout/_third-part/comments/changyan.ejs","hash":"b32598bc07328d8118f6b8b8b898a5d3dba4adc0","modified":1498180077407},{"_id":"themes/cafe/layout/_third-part/comments/disqus.ejs","hash":"f9543a67619272c9ff23b461ffcc63b504385461","modified":1498180077408},{"_id":"themes/cafe/layout/_third-part/comments/duoshuo.ejs","hash":"a37a59cf0226afc1d187810c81c61f4bf5a6a6b7","modified":1498180077409},{"_id":"themes/cafe/layout/_third-part/comments/gentie.ejs","hash":"7bb3a0aa215dba09f87bf227b170d54ba69cadb3","modified":1498180077409},{"_id":"themes/cafe/layout/_third-part/comments/gitment.ejs","hash":"25c71114ff0ede012d2dcb72cfb4e821f1744634","modified":1498180077410},{"_id":"themes/cafe/layout/_third-part/comments/index.ejs","hash":"e32b4c07c55dae75fefbe51d6afc2a0a760f2958","modified":1498180077410},{"_id":"themes/cafe/layout/_third-part/comments/youyan.ejs","hash":"466db2fad7c05b57d8987fc0e042e76072b4e6b2","modified":1498180077412},{"_id":"themes/cafe/layout/_third-part/mathjax/index.ejs","hash":"7b03a461fd2caf4662665a93c5d0e22b6a2ff1a6","modified":1498180077413},{"_id":"themes/cafe/source/css/_partial/article.styl","hash":"9fced097e73c373631ac6dcba45d0626840b5a32","modified":1498180077458},{"_id":"themes/cafe/source/css/_partial/archive.styl","hash":"bcc996ab9d1a3a2e0f754043a6c93ddd314d9987","modified":1498180077458},{"_id":"themes/cafe/source/css/_partial/comment.styl","hash":"3477b4ecb2b188528b4f9c12fe78369110e0616b","modified":1498180077459},{"_id":"themes/cafe/source/css/_partial/custom.styl","hash":"f162ddfa65c268d79425e8c143688481f559ad2c","modified":1498180077460},{"_id":"themes/cafe/source/css/_partial/duoshuo.styl","hash":"5c9cb2c43be136a3cc83fb961b2e030e34cdd0f7","modified":1498180077461},{"_id":"themes/cafe/source/css/_partial/footer.styl","hash":"17fb21e25e7cdd57b3a33d402563d7c543ba9218","modified":1498180077462},{"_id":"themes/cafe/source/css/_partial/header.styl","hash":"56b324a23438b1b72c3b1de72ff123c5ca2ca266","modified":1498180077462},{"_id":"themes/cafe/source/css/_partial/highlight.styl","hash":"83af177b67e71f88a2a58cad944fb1460a41f752","modified":1498180077463},{"_id":"themes/cafe/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1498180077464},{"_id":"themes/cafe/source/css/_partial/other.styl","hash":"e8892f04955c0738bd80bf92d72ee634d2a4e01a","modified":1498180077464},{"_id":"themes/cafe/source/css/_partial/sidebar-aside.styl","hash":"cd6e5f50b9db9a9f582995c16d634b1c427a2d00","modified":1498180077465},{"_id":"themes/cafe/source/css/_partial/sidebar.styl","hash":"ecd3303b117ae929558899d491e12094d4117829","modified":1498180077466},{"_id":"themes/cafe/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1498180077465},{"_id":"themes/cafe/source/css/_partial/social.styl","hash":"fc8d62aada96c75930dc03f6d4af83595eb44e71","modified":1498180077466},{"_id":"themes/cafe/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1498180077467},{"_id":"themes/cafe/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1498180077468},{"_id":"themes/cafe/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498180077508},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498180077510},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1498180077510},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1498180077511},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498180077512},{"_id":"themes/cafe/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1498180077512},{"_id":"themes/cafe/source/themes/screenshots/Cafe.png","hash":"6f639068117b8d44005730864cc0b05a11b28d73","modified":1498180077522},{"_id":"themes/cafe/.git/objects/pack/pack-3bcb83e013e6c88d77200c3b4b713997dd5cde8e.idx","hash":"6f24c26cb07fa4ebe18365b438a0ca30df784550","modified":1498180077040},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498180077496},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498180077497},{"_id":"themes/cafe/.git/logs/refs/heads/master","hash":"1bf8cd63a3211ad696aea7de4b6ff2195e840641","modified":1498180077307},{"_id":"themes/cafe/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1498180077294},{"_id":"themes/cafe/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498180077471},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498180077486},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498180077496},{"_id":"themes/cafe/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1498180077500},{"_id":"themes/cafe/.git/logs/refs/remotes/origin/HEAD","hash":"1bf8cd63a3211ad696aea7de4b6ff2195e840641","modified":1498180077300},{"_id":"themes/cafe/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1498180077494},{"_id":"themes/cafe/assets/pc-display.gif","hash":"fb84eb2ba958b1e02ad5e178a6f367a561cd9252","modified":1498180077383},{"_id":"themes/cafe/assets/mobie-display.gif","hash":"d20f7aa46d9bf618ba1ebaf9b6bda71b030f0ce9","modified":1498180077379},{"_id":"themes/cafe/.git/objects/pack/pack-3bcb83e013e6c88d77200c3b4b713997dd5cde8e.pack","hash":"6ee0e6e6ad1e4da49de704faeffcf50c42ec316f","modified":1498180077105},{"_id":"public/uploads/分享.js","hash":"2779910814d3dcf639eedcf0049490d3787b4910","modified":1498181209186},{"_id":"public/uploads/appShare.js","hash":"149a6cd1525e30a05ddd4e5065bd155709d616d1","modified":1498181209767},{"_id":"public/about/index.html","hash":"3687601f45900878e1fdb1f30ae945403ab2629f","modified":1498181209823},{"_id":"public/20170309/算法/index.html","hash":"93a629eb245a4dbdee89135a3c687c71f66f9c2d","modified":1498181209823},{"_id":"public/20170228/js判断APP是否安装/index.html","hash":"a390ee70aeb7a3e9e78c7c68956faf6546e6ed4a","modified":1498181209824},{"_id":"public/20170227/Js/index.html","hash":"e82d5d46a119178d38751d132f0ab84578869972","modified":1498181209824},{"_id":"public/20170222/box-model/index.html","hash":"ff2152e109ca2a12267831ee947260e777dfd6a6","modified":1498181209824},{"_id":"public/20170220/css3新特性/index.html","hash":"01ff7d0671d46091fa80fab4045100f46e750e0c","modified":1498181209824},{"_id":"public/20161012/heroku/index.html","hash":"50086286e43326c2945d3cdced4f2c014f988160","modified":1498181209824},{"_id":"public/20160929/react_map/index.html","hash":"e8c0504c3d11057f50f5a873fcd0586d1a45b448","modified":1498181209824},{"_id":"public/20160420/flagcount/index.html","hash":"bc2a2e3b81cdcc1ed71d23b0bd0a099b32195173","modified":1498181209824},{"_id":"public/archives/index.html","hash":"d05c2c29e5f5a0439595122a4a8b021289631aaf","modified":1498181209824},{"_id":"public/archives/2014/index.html","hash":"53f770e2998030773dedaa33b8c455295f1e66ca","modified":1498181209824},{"_id":"public/archives/2014/06/index.html","hash":"b01df89bd24ac8295f3e1abb35ee3c5c32dfb6a8","modified":1498181209824},{"_id":"public/archives/2015/index.html","hash":"bff0f31cedbf0ffb1ed2a1fa17187f705790718b","modified":1498181209824},{"_id":"public/archives/2015/07/index.html","hash":"5a8fd4c7413880137410873f4d9cc50b752faead","modified":1498181209824},{"_id":"public/archives/2016/index.html","hash":"ea4ddef255bda33e3529ad58d81937e03163b313","modified":1498181209824},{"_id":"public/archives/2016/04/index.html","hash":"b9ac76cc8734c46bf0a81471967c46e2b3f3c086","modified":1498181209824},{"_id":"public/archives/2016/09/index.html","hash":"f30a864a36df322780254e81c90cbf86d37c6f2b","modified":1498181209824},{"_id":"public/archives/2016/10/index.html","hash":"db879272e6891cabde4ff0b9f73f4de99733de89","modified":1498181209824},{"_id":"public/archives/2017/index.html","hash":"8afd31c6ebef77b8f9f9bcc9d9281c11cba69de4","modified":1498181209825},{"_id":"public/archives/2017/02/index.html","hash":"92b32fcd686243b215f6fd4de7ef83e1b9792759","modified":1498181209825},{"_id":"public/archives/2017/03/index.html","hash":"ad96d0e657283327111706f853d17b054baea40a","modified":1498181209825},{"_id":"public/categories/Js/index.html","hash":"769b2d7d77a6e1cf5a61207b06fa5185a86e894f","modified":1498181209825},{"_id":"public/categories/Tools/index.html","hash":"46be86b08479554bad77f689dcdc1fc07e8e6625","modified":1498181209825},{"_id":"public/categories/CSS/index.html","hash":"bb6b465d8d86b09900a29e295bd849acd7c022b5","modified":1498181209825},{"_id":"public/categories/HTML/index.html","hash":"dde03f9c19352002615dac6d33c1565bd4a2c8a0","modified":1498181209825},{"_id":"public/categories/JS/index.html","hash":"e2bb327a28d3864da2c2b96b2151aa89a9cb0179","modified":1498181209825},{"_id":"public/categories/Javascript/index.html","hash":"a394d21460a987804c3303503b1ef262832c47a2","modified":1498181209825},{"_id":"public/categories/Html/index.html","hash":"bde160aeae0f3feaaf1395cf6a6b03eface867a9","modified":1498181209825},{"_id":"public/tags/Js/index.html","hash":"7df747a0b99891aab4d3998dc731ed314b880fd7","modified":1498181209825},{"_id":"public/tags/筆記/index.html","hash":"1d6cd075e117eb0c64d610ab062a268b51098ab8","modified":1498181209825},{"_id":"public/tags/js/index.html","hash":"8b8dc21f7711fad88c5ffd212c9f86f2f5dc5246","modified":1498181209825},{"_id":"public/tags/Tools/index.html","hash":"a723855725cb8865ed69c6fc4f5580d84444c94b","modified":1498181209825},{"_id":"public/tags/Flagcounter/index.html","hash":"d84fd8ca0bb08aecea8a8d1e2198401a864ecd3e","modified":1498181209826},{"_id":"public/tags/CSS/index.html","hash":"e11b39d82a03b5c28dbf1a62ecd8931d9f8adc5a","modified":1498181209826},{"_id":"public/tags/CSS3/index.html","hash":"34504d82b22d107f1abcd747bbb993886a262c3c","modified":1498181209826},{"_id":"public/tags/html/index.html","hash":"8c6b24eef245fc1def33c95850319232d384d3db","modified":1498181209826},{"_id":"public/tags/笔记/index.html","hash":"2dbdbc8e0460caccaf40c88bab55820e906a5707","modified":1498181209826},{"_id":"public/tags/box-model/index.html","hash":"5e9761b26c1f1503849103a745e6acc2b8c69271","modified":1498181209826},{"_id":"public/tags/css/index.html","hash":"ebf772436839b0e0fe78458c212d11d5e467289d","modified":1498181209826},{"_id":"public/tags/flex/index.html","hash":"ecfd326ac0252f27585dd16cabb2afe639b8b72f","modified":1498181209826},{"_id":"public/tags/git/index.html","hash":"6ff5d10dde5bb54ba846786c44757c936fd47922","modified":1498181209826},{"_id":"public/tags/heroku/index.html","hash":"e5606915862bac9cc65e0d2191971f8a2f09a212","modified":1498181209826},{"_id":"public/tags/JS/index.html","hash":"0f27bea12782b670915d71dd0545aa1986816795","modified":1498181209826},{"_id":"public/tags/js判断APP是否安装/index.html","hash":"6328b11027204ecdb6f54351430822992f2fb004","modified":1498181209826},{"_id":"public/tags/markdown/index.html","hash":"0ad581e6f531a0f41b9c6be8a1b4d1119c3e034c","modified":1498181209826},{"_id":"public/tags/Javascript/index.html","hash":"22f827365d30deb8afc10615775188075925ee2e","modified":1498181209826},{"_id":"public/tags/react/index.html","hash":"03d394de14c08779b0f942a291e48bee875e57fb","modified":1498181209826},{"_id":"public/tags/nodejs/index.html","hash":"c044acb7d6d73b1ae9718ca0c0b39c41d308620a","modified":1498181209826},{"_id":"public/tags/redis/index.html","hash":"7a41f2ba388397826de2efb91679f08700371416","modified":1498181209827},{"_id":"public/tags/Html/index.html","hash":"7cdc5849c46ba2aa4bf49be96cdce64ba2f50077","modified":1498181209827},{"_id":"public/tags/整理/index.html","hash":"d6904d476facf8cdaaafacc05c25ff4fef65a2e1","modified":1498181209827},{"_id":"public/20170222/flex/index.html","hash":"69328728e84326f860e330510e5bb8d8343684e1","modified":1498181209827},{"_id":"public/20170220/前端知识整理/index.html","hash":"8d6de3f6673fc27fb3d3a2ecad4ea45c15b2dc10","modified":1498181209827},{"_id":"public/20170220/reactjs/index.html","hash":"69342b724c0a66a7c8ba463f5e10f189324faef8","modified":1498181209827},{"_id":"public/20160928/markdown/index.html","hash":"e25aa4fdc4e8f1e36acce21c13354b4cdefbf7cb","modified":1498181209827},{"_id":"public/20150715/git_map/index.html","hash":"c9e7b9e24a6e7d23e7d4db2719eebfa4b7d1fbfa","modified":1498181209827},{"_id":"public/20140612/redis/index.html","hash":"d91d048dc629b37073b6ea347d7c40285fe700d5","modified":1498181209827},{"_id":"public/index.html","hash":"805be816f696d0c6a5d4f3833bc5df764447ef45","modified":1498181209827},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1498181209857},{"_id":"public/uploads/favicon.ico","hash":"230b37cef533ca4c6fe324c87bd36b4a56986d32","modified":1498181209857},{"_id":"public/uploads/nodejs1.jpg","hash":"83922ec4605cd6b93de9abfb1e8454c8b5856bea","modified":1498181209857},{"_id":"public/uploads/pic.png","hash":"230b37cef533ca4c6fe324c87bd36b4a56986d32","modified":1498181209858},{"_id":"public/uploads/sort.png","hash":"d56b4ee34471bc6000647878aa93c6c5eb0fe6df","modified":1498181209858},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498181209858},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498181209858},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498181209858},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498181209858},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498181209858},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498181209858},{"_id":"public/images/fly-to-top.png","hash":"f189038da3c68a8012e924185a1faee98bde3003","modified":1498181209858},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498181209858},{"_id":"public/themes/screenshots/Cafe.png","hash":"6f639068117b8d44005730864cc0b05a11b28d73","modified":1498181209858},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498181210470},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498181210474},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1498181210483},{"_id":"public/js/is.js","hash":"457446cf7fe0b08bfa197ee76435d273b456deaa","modified":1498181210483},{"_id":"public/js/elevator.js","hash":"2aab182c3f08aa939bbf09faf49e79e0681a6389","modified":1498181210483},{"_id":"public/js/script.js","hash":"320cc11fb445658e7a1e1bb2e9da499ee579d755","modified":1498181210484},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1498181210484},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1498181210484},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498181210484},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1498181210486},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498181210486},{"_id":"public/css/style.css","hash":"7c27423e64446af3d1cbca29cf35bb76878abc30","modified":1498181210487},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1498181210487},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1498181210487},{"_id":"public/duoshuo/embed.js","hash":"6a8d90f99d17a614312f87d9a6a7182c9cb484f4","modified":1498181210487},{"_id":"public/jquery/jquery.min.js","hash":"a6eedf84389e1bc9f757bc2d19538f8c8d1cae9d","modified":1498181210487},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498181210487},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498181210487},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498181210487},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1498181210506},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1498181210576}],"Category":[{"name":"Js","_id":"cj496eqsr00042sl1krd65xao"},{"name":"Tools","_id":"cj496eqt8000a2sl11i5ma94q"},{"name":"CSS","_id":"cj496eqtp000f2sl1l1wi8ei7"},{"name":"HTML","_id":"cj496eqtv000k2sl18soa1kik"},{"name":"JS","_id":"cj496equ700102sl16bcod5c9"},{"name":"Javascript","_id":"cj496equ900152sl1tyqzp47y"},{"name":"Html","_id":"cj496equc001e2sl1x1uoti11"}],"Data":[],"Page":[{"title":"ABOUT","date":"2014-06-04T15:48:28.000Z","_content":"  <br />\n\n### 关于本站\n\n - 使用[Hexo](http://hexo.io/)搭建\n - 托管在[Github Pages](https://github.com)\n - 主题[maupassant](https://github.com/icylogic/maupassant-hexo)\n - 图床为[七牛云存储](www.qiniu.com)\n - 关于本站搭建可参考[这里](https://www.haomwei.com/technology/maupassant-hexo.html)\n\n","source":"about/index.md","raw":"title: ABOUT\ndate: 2014-06-04 23:48:28\n---\n  <br />\n\n### 关于本站\n\n - 使用[Hexo](http://hexo.io/)搭建\n - 托管在[Github Pages](https://github.com)\n - 主题[maupassant](https://github.com/icylogic/maupassant-hexo)\n - 图床为[七牛云存储](www.qiniu.com)\n - 关于本站搭建可参考[这里](https://www.haomwei.com/technology/maupassant-hexo.html)\n\n","updated":"2016-10-12T02:04:49.620Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj496eqsm00012sl1jks6dctg","content":"<p>  <br></p>\n<h3 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h3><ul>\n<li>使用<a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>搭建</li>\n<li>托管在<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">Github Pages</a></li>\n<li>主题<a href=\"https://github.com/icylogic/maupassant-hexo\" target=\"_blank\" rel=\"external\">maupassant</a></li>\n<li>图床为<a href=\"www.qiniu.com\">七牛云存储</a></li>\n<li>关于本站搭建可参考<a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\" target=\"_blank\" rel=\"external\">这里</a></li>\n</ul>\n","excerpt":"","more":"<p>  <br /></p>\n<h3 id=\"关于本站\"><a href=\"#关于本站\" class=\"headerlink\" title=\"关于本站\"></a>关于本站</h3><ul>\n<li>使用<a href=\"http://hexo.io/\">Hexo</a>搭建</li>\n<li>托管在<a href=\"https://github.com\">Github Pages</a></li>\n<li>主题<a href=\"https://github.com/icylogic/maupassant-hexo\">maupassant</a></li>\n<li>图床为<a href=\"www.qiniu.com\">七牛云存储</a></li>\n<li>关于本站搭建可参考<a href=\"https://www.haomwei.com/technology/maupassant-hexo.html\">这里</a></li>\n</ul>\n"},{"_content":"      \n    <script>\n        wxtitle = \"用时间换更好回报，长期理财买点定开债！\";\n        wxdesc = \"近三年平均收益超28%，定开债基近期成各路资金“秒杀”对象，来天天基金网购买费率全面一折！\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/dkz_app/wx.html\";\n        wximg = \"https://fundsc.eastmoney.com/static/wx/201609060002.gif\";\n    </script>\n\n\n    <script>\n        wxtitle =     \"本周固收产品热销排行榜\";\n        wxdesc =  \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/gushou_app/?isin=wx\";\n        wximg =   \"http://j5.dfcfw.com/app/20160805161427201.gif\";\n    </script>\n\n var wx_shareInfo = {\n        imgUrl: \"http://j5.dfcfw.com/app/20160805161427201.gif\",\n        link: location.href,\n        title: \"本周固收产品热销排行榜\",\n        desc: \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\"\n    };\n\n\n\n<script type=\"text/javascript\" src=\"https://fundsc.eastmoney.com/static/appshare.js\"></script>\n\n\n  <script>\n      var back = function() {\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeBack = function() {\n\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeShare = function() {\n          location.href = \"http://ttjj-huodong-weixin-share/\";\n\n      };\n\n      window.setCustomerNo = function(customerno) {\n          var href = location.href;\n\n          if (!!customerno && customerno.length > 10) {\n              if (href.indexOf(\"?\") > -1) {\n                  location.href = href + \"&uid=\" + customerno;\n              } else {\n                  location.href = href + \"?uid=\" + customerno;\n              }\n          }\n      };\n\n      $(document).ready(function() {\n          function fixHeadBar() {\n              location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n          }\n\n          function showsharebar() {\n              var wxinfo = ({\n                  \"resultCode\": 0,\n                  \"resultMessage\": \"\",\n                  \"datas\": {\n                      \"Id\": 0,\n                      \"Name\": \"\",\n                      \"Title\": \"\",\n                      \"Url\": \"\",\n                      \"HasWx\": true,\n                      \"NeedLogin\": false,\n                      \"WxTitle\": wxtitle,\n                      \"WxContent\": wxdesc,\n                      \"WxUrl\": wxlink,\n                      \"WxImage\": wximg,\n                      \"WxBackUrl\": \"\"\n                  }\n              });\n              location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n          }\n          if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n              setTimeout(fixHeadBar, 50);\n              setTimeout(showsharebar, 300);\n          }\n\n      });\n    </script>","source":"uploads/分享.js","raw":"      \n    <script>\n        wxtitle = \"用时间换更好回报，长期理财买点定开债！\";\n        wxdesc = \"近三年平均收益超28%，定开债基近期成各路资金“秒杀”对象，来天天基金网购买费率全面一折！\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/dkz_app/wx.html\";\n        wximg = \"https://fundsc.eastmoney.com/static/wx/201609060002.gif\";\n    </script>\n\n\n    <script>\n        wxtitle =     \"本周固收产品热销排行榜\";\n        wxdesc =  \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/gushou_app/?isin=wx\";\n        wximg =   \"http://j5.dfcfw.com/app/20160805161427201.gif\";\n    </script>\n\n var wx_shareInfo = {\n        imgUrl: \"http://j5.dfcfw.com/app/20160805161427201.gif\",\n        link: location.href,\n        title: \"本周固收产品热销排行榜\",\n        desc: \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\"\n    };\n\n\n\n<script type=\"text/javascript\" src=\"https://fundsc.eastmoney.com/static/appshare.js\"></script>\n\n\n  <script>\n      var back = function() {\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeBack = function() {\n\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeShare = function() {\n          location.href = \"http://ttjj-huodong-weixin-share/\";\n\n      };\n\n      window.setCustomerNo = function(customerno) {\n          var href = location.href;\n\n          if (!!customerno && customerno.length > 10) {\n              if (href.indexOf(\"?\") > -1) {\n                  location.href = href + \"&uid=\" + customerno;\n              } else {\n                  location.href = href + \"?uid=\" + customerno;\n              }\n          }\n      };\n\n      $(document).ready(function() {\n          function fixHeadBar() {\n              location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n          }\n\n          function showsharebar() {\n              var wxinfo = ({\n                  \"resultCode\": 0,\n                  \"resultMessage\": \"\",\n                  \"datas\": {\n                      \"Id\": 0,\n                      \"Name\": \"\",\n                      \"Title\": \"\",\n                      \"Url\": \"\",\n                      \"HasWx\": true,\n                      \"NeedLogin\": false,\n                      \"WxTitle\": wxtitle,\n                      \"WxContent\": wxdesc,\n                      \"WxUrl\": wxlink,\n                      \"WxImage\": wximg,\n                      \"WxBackUrl\": \"\"\n                  }\n              });\n              location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n          }\n          if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n              setTimeout(fixHeadBar, 50);\n              setTimeout(showsharebar, 300);\n          }\n\n      });\n    </script>","date":"2016-10-08T08:12:09.628Z","updated":"2016-10-08T08:12:09.628Z","path":"uploads/分享.js","layout":"false","title":"","comments":1,"_id":"cj496eqsq00032sl1eifmkfag","content":"      \n    <script>\n        wxtitle = \"用时间换更好回报，长期理财买点定开债！\";\n        wxdesc = \"近三年平均收益超28%，定开债基近期成各路资金“秒杀”对象，来天天基金网购买费率全面一折！\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/dkz_app/wx.html\";\n        wximg = \"https://fundsc.eastmoney.com/static/wx/201609060002.gif\";\n    </script>\n\n\n    <script>\n        wxtitle =     \"本周固收产品热销排行榜\";\n        wxdesc =  \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/gushou_app/?isin=wx\";\n        wximg =   \"http://j5.dfcfw.com/app/20160805161427201.gif\";\n    </script>\n\n var wx_shareInfo = {\n        imgUrl: \"http://j5.dfcfw.com/app/20160805161427201.gif\",\n        link: location.href,\n        title: \"本周固收产品热销排行榜\",\n        desc: \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\"\n    };\n\n\n\n<script type=\"text/javascript\" src=\"https://fundsc.eastmoney.com/static/appshare.js\"></script>\n\n\n  <script>\n      var back = function() {\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeBack = function() {\n\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeShare = function() {\n          location.href = \"http://ttjj-huodong-weixin-share/\";\n\n      };\n\n      window.setCustomerNo = function(customerno) {\n          var href = location.href;\n\n          if (!!customerno && customerno.length > 10) {\n              if (href.indexOf(\"?\") > -1) {\n                  location.href = href + \"&uid=\" + customerno;\n              } else {\n                  location.href = href + \"?uid=\" + customerno;\n              }\n          }\n      };\n\n      $(document).ready(function() {\n          function fixHeadBar() {\n              location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n          }\n\n          function showsharebar() {\n              var wxinfo = ({\n                  \"resultCode\": 0,\n                  \"resultMessage\": \"\",\n                  \"datas\": {\n                      \"Id\": 0,\n                      \"Name\": \"\",\n                      \"Title\": \"\",\n                      \"Url\": \"\",\n                      \"HasWx\": true,\n                      \"NeedLogin\": false,\n                      \"WxTitle\": wxtitle,\n                      \"WxContent\": wxdesc,\n                      \"WxUrl\": wxlink,\n                      \"WxImage\": wximg,\n                      \"WxBackUrl\": \"\"\n                  }\n              });\n              location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n          }\n          if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n              setTimeout(fixHeadBar, 50);\n              setTimeout(showsharebar, 300);\n          }\n\n      });\n    </script>","excerpt":"","more":"      \n    <script>\n        wxtitle = \"用时间换更好回报，长期理财买点定开债！\";\n        wxdesc = \"近三年平均收益超28%，定开债基近期成各路资金“秒杀”对象，来天天基金网购买费率全面一折！\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/dkz_app/wx.html\";\n        wximg = \"https://fundsc.eastmoney.com/static/wx/201609060002.gif\";\n    </script>\n\n\n    <script>\n        wxtitle =     \"本周固收产品热销排行榜\";\n        wxdesc =  \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\";\n        wxlink = \"https://\" + location.host + \"/webapp/2016/gushou_app/?isin=wx\";\n        wximg =   \"http://j5.dfcfw.com/app/20160805161427201.gif\";\n    </script>\n\n var wx_shareInfo = {\n        imgUrl: \"http://j5.dfcfw.com/app/20160805161427201.gif\",\n        link: location.href,\n        title: \"本周固收产品热销排行榜\",\n        desc: \"安心稳赢，尽在固收！多种期限随心选择，每天限额抢购。\"\n    };\n\n\n\n<script type=\"text/javascript\" src=\"https://fundsc.eastmoney.com/static/appshare.js\"></script>\n\n\n  <script>\n      var back = function() {\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeBack = function() {\n\n          location.href = \"http://fundact.eastmoney.com/app2/html/\";\n      };\n\n      window.nativeShare = function() {\n          location.href = \"http://ttjj-huodong-weixin-share/\";\n\n      };\n\n      window.setCustomerNo = function(customerno) {\n          var href = location.href;\n\n          if (!!customerno && customerno.length > 10) {\n              if (href.indexOf(\"?\") > -1) {\n                  location.href = href + \"&uid=\" + customerno;\n              } else {\n                  location.href = href + \"?uid=\" + customerno;\n              }\n          }\n      };\n\n      $(document).ready(function() {\n          function fixHeadBar() {\n              location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n          }\n\n          function showsharebar() {\n              var wxinfo = ({\n                  \"resultCode\": 0,\n                  \"resultMessage\": \"\",\n                  \"datas\": {\n                      \"Id\": 0,\n                      \"Name\": \"\",\n                      \"Title\": \"\",\n                      \"Url\": \"\",\n                      \"HasWx\": true,\n                      \"NeedLogin\": false,\n                      \"WxTitle\": wxtitle,\n                      \"WxContent\": wxdesc,\n                      \"WxUrl\": wxlink,\n                      \"WxImage\": wximg,\n                      \"WxBackUrl\": \"\"\n                  }\n              });\n              location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n          }\n          if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n              setTimeout(fixHeadBar, 50);\n              setTimeout(showsharebar, 300);\n          }\n\n      });\n    </script>"},{"_content":"var back = function() {\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeBack = function() {\n\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeShare = function() {\n  location.href = \"http://ttjj-huodong-weixin-share/\";\n\n};\n\nwindow.setCustomerNo = function(customerno) {\n  var href = location.href;\n\n  if (!!customerno && customerno.length > 10) {\n    if (href.indexOf(\"?\") > -1) {\n      location.href = href + \"&uid=\" + customerno;\n    } else {\n      location.href = href + \"?uid=\" + customerno;\n    }\n  }\n};\n\n$(document).ready(function() {\n  function fixHeadBar() {\n    location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n  }\n\n  function showsharebar() {\n    var wxinfo = ({\n      \"resultCode\": 0,\n      \"resultMessage\": \"\",\n      \"datas\": {\n        \"Id\": 0,\n        \"Name\": \"\",\n        \"Title\": \"\",\n        \"Url\": \"\",\n        \"HasWx\": true,\n        \"NeedLogin\": false,\n        \"WxTitle\": wxtitle,\n        \"WxContent\": wxdesc,\n        \"WxUrl\": wxlink,\n        \"WxImage\": wximg,\n        \"WxBackUrl\": \"\"\n      }\n    });\n    location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n  }\n  if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n    setTimeout(fixHeadBar, 50);\n    setTimeout(showsharebar, 300);\n  }\n\n});","source":"uploads/appShare.js","raw":"var back = function() {\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeBack = function() {\n\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeShare = function() {\n  location.href = \"http://ttjj-huodong-weixin-share/\";\n\n};\n\nwindow.setCustomerNo = function(customerno) {\n  var href = location.href;\n\n  if (!!customerno && customerno.length > 10) {\n    if (href.indexOf(\"?\") > -1) {\n      location.href = href + \"&uid=\" + customerno;\n    } else {\n      location.href = href + \"?uid=\" + customerno;\n    }\n  }\n};\n\n$(document).ready(function() {\n  function fixHeadBar() {\n    location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n  }\n\n  function showsharebar() {\n    var wxinfo = ({\n      \"resultCode\": 0,\n      \"resultMessage\": \"\",\n      \"datas\": {\n        \"Id\": 0,\n        \"Name\": \"\",\n        \"Title\": \"\",\n        \"Url\": \"\",\n        \"HasWx\": true,\n        \"NeedLogin\": false,\n        \"WxTitle\": wxtitle,\n        \"WxContent\": wxdesc,\n        \"WxUrl\": wxlink,\n        \"WxImage\": wximg,\n        \"WxBackUrl\": \"\"\n      }\n    });\n    location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n  }\n  if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n    setTimeout(fixHeadBar, 50);\n    setTimeout(showsharebar, 300);\n  }\n\n});","date":"2016-10-08T07:37:40.104Z","updated":"2016-10-08T07:37:40.104Z","path":"uploads/appShare.js","layout":"false","title":"","comments":1,"_id":"cj496eqsy00072sl1kjkxlffo","content":"var back = function() {\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeBack = function() {\n\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeShare = function() {\n  location.href = \"http://ttjj-huodong-weixin-share/\";\n\n};\n\nwindow.setCustomerNo = function(customerno) {\n  var href = location.href;\n\n  if (!!customerno && customerno.length > 10) {\n    if (href.indexOf(\"?\") > -1) {\n      location.href = href + \"&uid=\" + customerno;\n    } else {\n      location.href = href + \"?uid=\" + customerno;\n    }\n  }\n};\n\n$(document).ready(function() {\n  function fixHeadBar() {\n    location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n  }\n\n  function showsharebar() {\n    var wxinfo = ({\n      \"resultCode\": 0,\n      \"resultMessage\": \"\",\n      \"datas\": {\n        \"Id\": 0,\n        \"Name\": \"\",\n        \"Title\": \"\",\n        \"Url\": \"\",\n        \"HasWx\": true,\n        \"NeedLogin\": false,\n        \"WxTitle\": wxtitle,\n        \"WxContent\": wxdesc,\n        \"WxUrl\": wxlink,\n        \"WxImage\": wximg,\n        \"WxBackUrl\": \"\"\n      }\n    });\n    location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n  }\n  if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n    setTimeout(fixHeadBar, 50);\n    setTimeout(showsharebar, 300);\n  }\n\n});","excerpt":"","more":"var back = function() {\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeBack = function() {\n\n  location.href = \"http://fundact.eastmoney.com/app2/html/\";\n};\n\nwindow.nativeShare = function() {\n  location.href = \"http://ttjj-huodong-weixin-share/\";\n\n};\n\nwindow.setCustomerNo = function(customerno) {\n  var href = location.href;\n\n  if (!!customerno && customerno.length > 10) {\n    if (href.indexOf(\"?\") > -1) {\n      location.href = href + \"&uid=\" + customerno;\n    } else {\n      location.href = href + \"?uid=\" + customerno;\n    }\n  }\n};\n\n$(document).ready(function() {\n  function fixHeadBar() {\n    location.href = 'emfundapp:headerInfo({\"name\":\"分享\",\"event\":\"window.nativeShare()\",\"backevent\":\"\",\"title\":\"' + document.title + '\",\"vifylogin\":\"\"})';\n  }\n\n  function showsharebar() {\n    var wxinfo = ({\n      \"resultCode\": 0,\n      \"resultMessage\": \"\",\n      \"datas\": {\n        \"Id\": 0,\n        \"Name\": \"\",\n        \"Title\": \"\",\n        \"Url\": \"\",\n        \"HasWx\": true,\n        \"NeedLogin\": false,\n        \"WxTitle\": wxtitle,\n        \"WxContent\": wxdesc,\n        \"WxUrl\": wxlink,\n        \"WxImage\": wximg,\n        \"WxBackUrl\": \"\"\n      }\n    });\n    location.href = 'emfundapp:wx_shareInfo(' + encodeURI(JSON.stringify(wxinfo.datas)) + ')';\n  }\n  if (location.href.toLowerCase().indexOf(\"isin=ttjj\") > -1 && navigator.userAgent.toLocaleLowerCase().indexOf(\"ttjj\") > -1) {\n    setTimeout(fixHeadBar, 50);\n    setTimeout(showsharebar, 300);\n  }\n\n});"}],"Post":[{"title":"Js","date":"2017-02-27T01:19:28.000Z","_content":"\njavascript的一些基础知识\n\n<!-- more -->\n\n## fetch\n```\nfunction cnt() {\n\n\treturn new Promise(function(resolve, reject) {\n\t\tvar url = \"https://fundhdtest.eastmoney.com/ztapi/data/index\";\n\t\tvar content = \"Hello World\";\n\t\tvar myHeaders = new Headers();\n\t\tmyHeaders.set(\"Content-Length\", content.length.toString());\n\n\t\tvar myInit = {\n\t\t\tmethod: 'GET',\n\t\t\theaders: myHeaders,\n\t\t\tmode: 'cors',\n\t\t\tcache: 'default'\n\t\t};\n\n\t\tfetch(url, myInit)\n\t\t\t.then(function(res) {\n\t\t\t\tconsole.log(res.headers);\n\t\t\t\treturn res.ok ? res.json() : reject(res.statusText)\n\t\t\t}).then(function(data) {\n\t\t\t\tresolve(data)\n\t\t\t}).catch(err => reject(err))\n\t})\n\n}\n\ncnt().then(data => {\n\tconsole.log(1, data)\n}).catch(err => {\n\tconsole.log(2, err)\n})\n\n```\n\n","source":"_posts/Js.md","raw":"---\ntitle: Js\ndate: 2017-02-27 09:19:28\ncategories: Js\ntags: [Js, 筆記,js]\n---\n\njavascript的一些基础知识\n\n<!-- more -->\n\n## fetch\n```\nfunction cnt() {\n\n\treturn new Promise(function(resolve, reject) {\n\t\tvar url = \"https://fundhdtest.eastmoney.com/ztapi/data/index\";\n\t\tvar content = \"Hello World\";\n\t\tvar myHeaders = new Headers();\n\t\tmyHeaders.set(\"Content-Length\", content.length.toString());\n\n\t\tvar myInit = {\n\t\t\tmethod: 'GET',\n\t\t\theaders: myHeaders,\n\t\t\tmode: 'cors',\n\t\t\tcache: 'default'\n\t\t};\n\n\t\tfetch(url, myInit)\n\t\t\t.then(function(res) {\n\t\t\t\tconsole.log(res.headers);\n\t\t\t\treturn res.ok ? res.json() : reject(res.statusText)\n\t\t\t}).then(function(data) {\n\t\t\t\tresolve(data)\n\t\t\t}).catch(err => reject(err))\n\t})\n\n}\n\ncnt().then(data => {\n\tconsole.log(1, data)\n}).catch(err => {\n\tconsole.log(2, err)\n})\n\n```\n\n","slug":"Js","published":1,"updated":"2017-03-17T08:14:28.169Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqsi00002sl1ojw14v1j","content":"<p>javascript的一些基础知识</p>\n<a id=\"more\"></a>\n<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cnt() &#123;</div><div class=\"line\"></div><div class=\"line\">\treturn new Promise(function(resolve, reject) &#123;</div><div class=\"line\">\t\tvar url = &quot;https://fundhdtest.eastmoney.com/ztapi/data/index&quot;;</div><div class=\"line\">\t\tvar content = &quot;Hello World&quot;;</div><div class=\"line\">\t\tvar myHeaders = new Headers();</div><div class=\"line\">\t\tmyHeaders.set(&quot;Content-Length&quot;, content.length.toString());</div><div class=\"line\"></div><div class=\"line\">\t\tvar myInit = &#123;</div><div class=\"line\">\t\t\tmethod: &apos;GET&apos;,</div><div class=\"line\">\t\t\theaders: myHeaders,</div><div class=\"line\">\t\t\tmode: &apos;cors&apos;,</div><div class=\"line\">\t\t\tcache: &apos;default&apos;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\tfetch(url, myInit)</div><div class=\"line\">\t\t\t.then(function(res) &#123;</div><div class=\"line\">\t\t\t\tconsole.log(res.headers);</div><div class=\"line\">\t\t\t\treturn res.ok ? res.json() : reject(res.statusText)</div><div class=\"line\">\t\t\t&#125;).then(function(data) &#123;</div><div class=\"line\">\t\t\t\tresolve(data)</div><div class=\"line\">\t\t\t&#125;).catch(err =&gt; reject(err))</div><div class=\"line\">\t&#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cnt().then(data =&gt; &#123;</div><div class=\"line\">\tconsole.log(1, data)</div><div class=\"line\">&#125;).catch(err =&gt; &#123;</div><div class=\"line\">\tconsole.log(2, err)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n","excerpt":"<p>javascript的一些基础知识</p>","more":"<h2 id=\"fetch\"><a href=\"#fetch\" class=\"headerlink\" title=\"fetch\"></a>fetch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">function cnt() &#123;</div><div class=\"line\"></div><div class=\"line\">\treturn new Promise(function(resolve, reject) &#123;</div><div class=\"line\">\t\tvar url = &quot;https://fundhdtest.eastmoney.com/ztapi/data/index&quot;;</div><div class=\"line\">\t\tvar content = &quot;Hello World&quot;;</div><div class=\"line\">\t\tvar myHeaders = new Headers();</div><div class=\"line\">\t\tmyHeaders.set(&quot;Content-Length&quot;, content.length.toString());</div><div class=\"line\"></div><div class=\"line\">\t\tvar myInit = &#123;</div><div class=\"line\">\t\t\tmethod: &apos;GET&apos;,</div><div class=\"line\">\t\t\theaders: myHeaders,</div><div class=\"line\">\t\t\tmode: &apos;cors&apos;,</div><div class=\"line\">\t\t\tcache: &apos;default&apos;</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t\tfetch(url, myInit)</div><div class=\"line\">\t\t\t.then(function(res) &#123;</div><div class=\"line\">\t\t\t\tconsole.log(res.headers);</div><div class=\"line\">\t\t\t\treturn res.ok ? res.json() : reject(res.statusText)</div><div class=\"line\">\t\t\t&#125;).then(function(data) &#123;</div><div class=\"line\">\t\t\t\tresolve(data)</div><div class=\"line\">\t\t\t&#125;).catch(err =&gt; reject(err))</div><div class=\"line\">\t&#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">cnt().then(data =&gt; &#123;</div><div class=\"line\">\tconsole.log(1, data)</div><div class=\"line\">&#125;).catch(err =&gt; &#123;</div><div class=\"line\">\tconsole.log(2, err)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"Flagcounter","date":"2016-04-20T11:24:27.000Z","_content":"\n无意间发现一个很好玩的东西——[**flagcounter**](http://s05.flagcounter.com/index.html), 这个小工具可以帮你统计你的博客访问量及访客的国家分布，展示效果请向右看，另外使用起来也是炒鸡简单的哦。\n\n<!-- more -->\n\n![](http://s05.flagcounter.com/css/images/logo.gif)\n\n\n如果你想类似于我的博客这样将flagcount作为一个widget放置在博客右侧的区域，这就需要你添加一个小挂件。打开maupassant主题根目录的_config.yml配置文件，找到widgets的设置，会发现原主题已经提供了六种可用的小挂件，就在这里再添加一个flagcounter的widget即可。然后需要为新加的widget添加一个jade文件，从主题根目录进入到layout然后打开_widget文件夹，新建一个flagcounter.jade的文件，复制以下内容保存。\n\n```html\n.widget\n.widget-title\ni(class='fa fa-bar-chart')= ' ' + __('visitors')\n\\<a href=\"http://s05.flagcounter.com/more/quj\">\\<img src=\"http://s05.flagcounter.com/count2/quj/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_10/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\" alt=\"Count you in\" border=\"0\" style=\"margin-top:10px;\"></a>\n```\n\n别着急关闭文件，里面<\\a>标签的内容需要换成你自己的，打开[flagcounter官网](http://s05.flagcounter.com/index.html)，设置自己喜欢的样式，点击GET YOUR FLAG COUNTER并填写你的email之后就可以得到类似的一段代码，复制替换到flagcounter.jade文件保存关闭。done！\n\n","source":"_posts/flagcount.md","raw":"title: Flagcounter\ncategories: Tools\ntags: [Tools, 筆記,Flagcounter]\ndate: 2016-04-20 19:24:27\n---\n\n无意间发现一个很好玩的东西——[**flagcounter**](http://s05.flagcounter.com/index.html), 这个小工具可以帮你统计你的博客访问量及访客的国家分布，展示效果请向右看，另外使用起来也是炒鸡简单的哦。\n\n<!-- more -->\n\n![](http://s05.flagcounter.com/css/images/logo.gif)\n\n\n如果你想类似于我的博客这样将flagcount作为一个widget放置在博客右侧的区域，这就需要你添加一个小挂件。打开maupassant主题根目录的_config.yml配置文件，找到widgets的设置，会发现原主题已经提供了六种可用的小挂件，就在这里再添加一个flagcounter的widget即可。然后需要为新加的widget添加一个jade文件，从主题根目录进入到layout然后打开_widget文件夹，新建一个flagcounter.jade的文件，复制以下内容保存。\n\n```html\n.widget\n.widget-title\ni(class='fa fa-bar-chart')= ' ' + __('visitors')\n\\<a href=\"http://s05.flagcounter.com/more/quj\">\\<img src=\"http://s05.flagcounter.com/count2/quj/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_10/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\" alt=\"Count you in\" border=\"0\" style=\"margin-top:10px;\"></a>\n```\n\n别着急关闭文件，里面<\\a>标签的内容需要换成你自己的，打开[flagcounter官网](http://s05.flagcounter.com/index.html)，设置自己喜欢的样式，点击GET YOUR FLAG COUNTER并填写你的email之后就可以得到类似的一段代码，复制替换到flagcounter.jade文件保存关闭。done！\n\n","slug":"flagcount","published":1,"updated":"2017-02-20T03:19:38.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqsn00022sl1x7qe3e1a","content":"<p>无意间发现一个很好玩的东西——<a href=\"http://s05.flagcounter.com/index.html\" target=\"_blank\" rel=\"external\"><strong>flagcounter</strong></a>, 这个小工具可以帮你统计你的博客访问量及访客的国家分布，展示效果请向右看，另外使用起来也是炒鸡简单的哦。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://s05.flagcounter.com/css/images/logo.gif\" alt=\"\"></p>\n<p>如果你想类似于我的博客这样将flagcount作为一个widget放置在博客右侧的区域，这就需要你添加一个小挂件。打开maupassant主题根目录的_config.yml配置文件，找到widgets的设置，会发现原主题已经提供了六种可用的小挂件，就在这里再添加一个flagcounter的widget即可。然后需要为新加的widget添加一个jade文件，从主题根目录进入到layout然后打开_widget文件夹，新建一个flagcounter.jade的文件，复制以下内容保存。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.widget</div><div class=\"line\">.widget-title</div><div class=\"line\">i(class='fa fa-bar-chart')= ' ' + __('visitors')</div><div class=\"line\">\\<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://s05.flagcounter.com/more/quj\"</span>&gt;</span>\\<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://s05.flagcounter.com/count2/quj/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_10/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Count you in\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top:10px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>别着急关闭文件，里面&lt;\\a&gt;标签的内容需要换成你自己的，打开<a href=\"http://s05.flagcounter.com/index.html\" target=\"_blank\" rel=\"external\">flagcounter官网</a>，设置自己喜欢的样式，点击GET YOUR FLAG COUNTER并填写你的email之后就可以得到类似的一段代码，复制替换到flagcounter.jade文件保存关闭。done！</p>\n","excerpt":"<p>无意间发现一个很好玩的东西——<a href=\"http://s05.flagcounter.com/index.html\"><strong>flagcounter</strong></a>, 这个小工具可以帮你统计你的博客访问量及访客的国家分布，展示效果请向右看，另外使用起来也是炒鸡简单的哦。</p>","more":"<p><img src=\"http://s05.flagcounter.com/css/images/logo.gif\" alt=\"\"></p>\n<p>如果你想类似于我的博客这样将flagcount作为一个widget放置在博客右侧的区域，这就需要你添加一个小挂件。打开maupassant主题根目录的_config.yml配置文件，找到widgets的设置，会发现原主题已经提供了六种可用的小挂件，就在这里再添加一个flagcounter的widget即可。然后需要为新加的widget添加一个jade文件，从主题根目录进入到layout然后打开_widget文件夹，新建一个flagcounter.jade的文件，复制以下内容保存。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">.widget</div><div class=\"line\">.widget-title</div><div class=\"line\">i(class='fa fa-bar-chart')= ' ' + __('visitors')</div><div class=\"line\">\\<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://s05.flagcounter.com/more/quj\"</span>&gt;</span>\\<span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://s05.flagcounter.com/count2/quj/bg_FFFFFF/txt_000000/border_CCCCCC/columns_2/maxflags_10/viewers_0/labels_1/pageviews_1/flags_0/percent_0/\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"Count you in\"</span> <span class=\"attr\">border</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-top:10px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>别着急关闭文件，里面&lt;\\a&gt;标签的内容需要换成你自己的，打开<a href=\"http://s05.flagcounter.com/index.html\">flagcounter官网</a>，设置自己喜欢的样式，点击GET YOUR FLAG COUNTER并填写你的email之后就可以得到类似的一段代码，复制替换到flagcounter.jade文件保存关闭。done！</p>"},{"title":"css3新特性","date":"2017-02-20T03:18:54.000Z","_content":"\nCSS3 新特性\n\n------------\n\n<!-- more -->\n\n###  box-shadow\n  `x轴偏移量  y轴偏移量 【阴影模糊半径】 【阴影扩展班级】 【阴影颜色】 【投影方式】\n                           inset outset（默认）`\n###  border-image\n  `repeat（重复） round（平铺） stretch（拉伸）  `\n\n###  linear-gradient/radial-gradient\n\n`linear-gradient(to bottom,#ff,#999)`\n\n`渐变类型 (渐变方向，颜色起始点和结束点)`\n\n|    角度    |    用英文    |    作用    |\n| :------------: | :-------------:|: --------------------: |\n|    0deg    |    to top    |    从下向上    |\n|    90deg    |    to right |    从左向右    |\n|    180deg    |    to bottom|    从上向下    |\n|    270deg    |    to left  |    从右向左    |\n|         |    to top left  |    从右下角向左上角    |\n|      |    to top right |    从左下角到右上角    |\n\n\n### text-overflow/word-wrap\n\n`text-overflow:clip | ellipsis `\n\n`clip 剪切`\n`ellipsis 显示省略标记`\n\n但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden），只有这样才能实现溢出文本显示省略号的效果，代码如下：\n`\ntext-overflow:ellipsis; \noverflow:hidden; /*溢出内容隐藏*/\nwhite-space:nowrap;  /*强制在一行内显示*/\n`\n\n`word-wrap:normal | break-word`\n`normal 控制连续文本换行`\n`break-word 内容在边界内换行`\n\n### @font-face\n\n`\n@font-face{\n    font-family : 字体名字;\n    src : 字体文件在服务器上的相对或者绝对路径;\n}\n`\n\n###  text-shadow\n`text-shadow: X-Offset Y-Offset blur color`\n`X-Offset 阴影水平偏移距离 正值向右`\n`Y-Offset 阴影垂直偏移距离 正值向下`\n`Blur 是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；`\n`Color 颜色`\n`text-shadow: 0 1px 1px #fff`\n\n### background-origin 原始起始位置\n`background-origin : border-box | padding-box | content-box `\n`边框 | 内边距（默认） | 内容区域`\n![ss](http://img.mukewang.com/531003de0001166903660166.jpg)\n\n### background-clip 背景图剪切\n`background-clip : border-box | padding-box | content-box | no-clip`\n`边框（默认） | 内填充 | 内容区域 `\n\n### background-size 背景图大小\n`background-size : auto | <长度值> | <百分比> | cover | contain `\n>* auto 默认值\n* <长度值> 宽度  等比缩放\n* <百分比> 0~100% \n* cover **覆盖** 填满整个容器\n* contain **容纳** 紧贴容器边缘\n\n### multiple backgrounds 多重背景\n`\n    background-image: url(http://img.mukewang.com/54cf2365000140e600740095.jpg),\n                      url(http://img.mukewang.com/54cf238a0001728d00740095.jpg),\n                      url(http://img.mukewang.com/54cf23b60001fd9700740096.jpg);\n    background-position: left top, 100px 0, 200px 0;\n    background-repeat: no-repeat, no-repeat, no-repeat;\n`\n\n### 导航菜单\n`\n\t/*使用伪元素制作导航列表项分隔线*/\n\t.nav li:after{\n\t\t    content:'|';\n\t\t    margin-left:10px;\n\t\t    color:#fff;\n\t\t}\n`\n`\n\t.nav li{\n\t\t   background:linear-gradient(to left,#000,#000,#000) no-repeat right/1px 15px }\n\t\t}\n`\n`\n.nav li:after{\n          content:\"\";\n          position:absolute;\n          right:0px;\n          top:16px;\n          height:19px;\n          width:1px;    \n    \t  background:linear-gradient(to top,red, orange,yellow,green,blue,indigo,violet)   \n        }\n`\n\n\n### 属性选择器\n>|属性选择器|描述|\n|:---------------------:|:-----------------------------------------:|\n|E[att^=\"val\"]| 以val开头 |\n|E[att$=\"val\"]| 以val结尾 |\n|E[att*=\"val\"]| 以val包含|\n\n### 结构性伪类选择器--root\n`根选择器  匹配元素所在文档的根元素 也就是<html>`","source":"_posts/css3新特性.md","raw":"---\ntitle: css3新特性\ndate: 2017-02-20 11:18:54\ncategories: CSS\ntags: [CSS, 筆記,CSS3]\n---\n\nCSS3 新特性\n\n------------\n\n<!-- more -->\n\n###  box-shadow\n  `x轴偏移量  y轴偏移量 【阴影模糊半径】 【阴影扩展班级】 【阴影颜色】 【投影方式】\n                           inset outset（默认）`\n###  border-image\n  `repeat（重复） round（平铺） stretch（拉伸）  `\n\n###  linear-gradient/radial-gradient\n\n`linear-gradient(to bottom,#ff,#999)`\n\n`渐变类型 (渐变方向，颜色起始点和结束点)`\n\n|    角度    |    用英文    |    作用    |\n| :------------: | :-------------:|: --------------------: |\n|    0deg    |    to top    |    从下向上    |\n|    90deg    |    to right |    从左向右    |\n|    180deg    |    to bottom|    从上向下    |\n|    270deg    |    to left  |    从右向左    |\n|         |    to top left  |    从右下角向左上角    |\n|      |    to top right |    从左下角到右上角    |\n\n\n### text-overflow/word-wrap\n\n`text-overflow:clip | ellipsis `\n\n`clip 剪切`\n`ellipsis 显示省略标记`\n\n但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden），只有这样才能实现溢出文本显示省略号的效果，代码如下：\n`\ntext-overflow:ellipsis; \noverflow:hidden; /*溢出内容隐藏*/\nwhite-space:nowrap;  /*强制在一行内显示*/\n`\n\n`word-wrap:normal | break-word`\n`normal 控制连续文本换行`\n`break-word 内容在边界内换行`\n\n### @font-face\n\n`\n@font-face{\n    font-family : 字体名字;\n    src : 字体文件在服务器上的相对或者绝对路径;\n}\n`\n\n###  text-shadow\n`text-shadow: X-Offset Y-Offset blur color`\n`X-Offset 阴影水平偏移距离 正值向右`\n`Y-Offset 阴影垂直偏移距离 正值向下`\n`Blur 是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；`\n`Color 颜色`\n`text-shadow: 0 1px 1px #fff`\n\n### background-origin 原始起始位置\n`background-origin : border-box | padding-box | content-box `\n`边框 | 内边距（默认） | 内容区域`\n![ss](http://img.mukewang.com/531003de0001166903660166.jpg)\n\n### background-clip 背景图剪切\n`background-clip : border-box | padding-box | content-box | no-clip`\n`边框（默认） | 内填充 | 内容区域 `\n\n### background-size 背景图大小\n`background-size : auto | <长度值> | <百分比> | cover | contain `\n>* auto 默认值\n* <长度值> 宽度  等比缩放\n* <百分比> 0~100% \n* cover **覆盖** 填满整个容器\n* contain **容纳** 紧贴容器边缘\n\n### multiple backgrounds 多重背景\n`\n    background-image: url(http://img.mukewang.com/54cf2365000140e600740095.jpg),\n                      url(http://img.mukewang.com/54cf238a0001728d00740095.jpg),\n                      url(http://img.mukewang.com/54cf23b60001fd9700740096.jpg);\n    background-position: left top, 100px 0, 200px 0;\n    background-repeat: no-repeat, no-repeat, no-repeat;\n`\n\n### 导航菜单\n`\n\t/*使用伪元素制作导航列表项分隔线*/\n\t.nav li:after{\n\t\t    content:'|';\n\t\t    margin-left:10px;\n\t\t    color:#fff;\n\t\t}\n`\n`\n\t.nav li{\n\t\t   background:linear-gradient(to left,#000,#000,#000) no-repeat right/1px 15px }\n\t\t}\n`\n`\n.nav li:after{\n          content:\"\";\n          position:absolute;\n          right:0px;\n          top:16px;\n          height:19px;\n          width:1px;    \n    \t  background:linear-gradient(to top,red, orange,yellow,green,blue,indigo,violet)   \n        }\n`\n\n\n### 属性选择器\n>|属性选择器|描述|\n|:---------------------:|:-----------------------------------------:|\n|E[att^=\"val\"]| 以val开头 |\n|E[att$=\"val\"]| 以val结尾 |\n|E[att*=\"val\"]| 以val包含|\n\n### 结构性伪类选择器--root\n`根选择器  匹配元素所在文档的根元素 也就是<html>`","slug":"css3新特性","published":1,"updated":"2017-02-20T06:33:06.330Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqsx00062sl16vc9ydi7","content":"<p>CSS3 新特性</p>\n<hr>\n<a id=\"more\"></a>\n<h3 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h3><p>  <code>x轴偏移量  y轴偏移量 【阴影模糊半径】 【阴影扩展班级】 【阴影颜色】 【投影方式】\n                           inset outset（默认）</code></p>\n<h3 id=\"border-image\"><a href=\"#border-image\" class=\"headerlink\" title=\"border-image\"></a>border-image</h3><p>  <code>repeat（重复） round（平铺） stretch（拉伸）</code></p>\n<h3 id=\"linear-gradient-radial-gradient\"><a href=\"#linear-gradient-radial-gradient\" class=\"headerlink\" title=\"linear-gradient/radial-gradient\"></a>linear-gradient/radial-gradient</h3><p><code>linear-gradient(to bottom,#ff,#999)</code></p>\n<p><code>渐变类型 (渐变方向，颜色起始点和结束点)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">角度</th>\n<th style=\"text-align:center\">用英文</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0deg</td>\n<td style=\"text-align:center\">to top</td>\n<td>从下向上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">90deg</td>\n<td style=\"text-align:center\">to right</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">180deg</td>\n<td style=\"text-align:center\">to bottom</td>\n<td>从上向下</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">270deg</td>\n<td style=\"text-align:center\">to left</td>\n<td>从右向左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">to top left</td>\n<td>从右下角向左上角</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">to top right</td>\n<td>从左下角到右上角</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"text-overflow-word-wrap\"><a href=\"#text-overflow-word-wrap\" class=\"headerlink\" title=\"text-overflow/word-wrap\"></a>text-overflow/word-wrap</h3><p><code>text-overflow:clip | ellipsis</code></p>\n<p><code>clip 剪切</code><br><code>ellipsis 显示省略标记</code></p>\n<p>但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden），只有这样才能实现溢出文本显示省略号的效果，代码如下：<br><code>text-overflow:ellipsis; \noverflow:hidden; /*溢出内容隐藏*/\nwhite-space:nowrap;  /*强制在一行内显示*/</code></p>\n<p><code>word-wrap:normal | break-word</code><br><code>normal 控制连续文本换行</code><br><code>break-word 内容在边界内换行</code></p>\n<h3 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h3><p><code>@font-face{\n    font-family : 字体名字;\n    src : 字体文件在服务器上的相对或者绝对路径;\n}</code></p>\n<h3 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h3><p><code>text-shadow: X-Offset Y-Offset blur color</code><br><code>X-Offset 阴影水平偏移距离 正值向右</code><br><code>Y-Offset 阴影垂直偏移距离 正值向下</code><br><code>Blur 是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；</code><br><code>Color 颜色</code><br><code>text-shadow: 0 1px 1px #fff</code></p>\n<h3 id=\"background-origin-原始起始位置\"><a href=\"#background-origin-原始起始位置\" class=\"headerlink\" title=\"background-origin 原始起始位置\"></a>background-origin 原始起始位置</h3><p><code>background-origin : border-box | padding-box | content-box</code><br><code>边框 | 内边距（默认） | 内容区域</code><br><img src=\"http://img.mukewang.com/531003de0001166903660166.jpg\" alt=\"ss\"></p>\n<h3 id=\"background-clip-背景图剪切\"><a href=\"#background-clip-背景图剪切\" class=\"headerlink\" title=\"background-clip 背景图剪切\"></a>background-clip 背景图剪切</h3><p><code>background-clip : border-box | padding-box | content-box | no-clip</code><br><code>边框（默认） | 内填充 | 内容区域</code></p>\n<h3 id=\"background-size-背景图大小\"><a href=\"#background-size-背景图大小\" class=\"headerlink\" title=\"background-size 背景图大小\"></a>background-size 背景图大小</h3><p><code>background-size : auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</code></p>\n<blockquote>\n<ul>\n<li>auto 默认值</li>\n<li>&lt;长度值&gt; 宽度  等比缩放</li>\n<li>&lt;百分比&gt; 0~100% </li>\n<li>cover <strong>覆盖</strong> 填满整个容器</li>\n<li>contain <strong>容纳</strong> 紧贴容器边缘</li>\n</ul>\n</blockquote>\n<h3 id=\"multiple-backgrounds-多重背景\"><a href=\"#multiple-backgrounds-多重背景\" class=\"headerlink\" title=\"multiple backgrounds 多重背景\"></a>multiple backgrounds 多重背景</h3><p><code>background-image: url(http://img.mukewang.com/54cf2365000140e600740095.jpg),\n                      url(http://img.mukewang.com/54cf238a0001728d00740095.jpg),\n                      url(http://img.mukewang.com/54cf23b60001fd9700740096.jpg);\n    background-position: left top, 100px 0, 200px 0;\n    background-repeat: no-repeat, no-repeat, no-repeat;</code></p>\n<h3 id=\"导航菜单\"><a href=\"#导航菜单\" class=\"headerlink\" title=\"导航菜单\"></a>导航菜单</h3><p><code>/*使用伪元素制作导航列表项分隔线*/\n    .nav li:after{\n            content:&#39;|&#39;;\n            margin-left:10px;\n            color:#fff;\n        }</code><br><code>.nav li{\n           background:linear-gradient(to left,#000,#000,#000) no-repeat right/1px 15px }\n        }</code><br><code>.nav li:after{\n          content:&quot;&quot;;\n          position:absolute;\n          right:0px;\n          top:16px;\n          height:19px;\n          width:1px;    \n          background:linear-gradient(to top,red, orange,yellow,green,blue,indigo,violet)   \n        }</code></p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性选择器</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">E[att^=”val”]</td>\n<td style=\"text-align:center\">以val开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E[att$=”val”]</td>\n<td style=\"text-align:center\">以val结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E[att*=”val”]</td>\n<td style=\"text-align:center\">以val包含</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"结构性伪类选择器–root\"><a href=\"#结构性伪类选择器–root\" class=\"headerlink\" title=\"结构性伪类选择器–root\"></a>结构性伪类选择器–root</h3><p><code>根选择器  匹配元素所在文档的根元素 也就是&lt;html&gt;</code></p>\n","excerpt":"<p>CSS3 新特性</p>\n<hr>","more":"<h3 id=\"box-shadow\"><a href=\"#box-shadow\" class=\"headerlink\" title=\"box-shadow\"></a>box-shadow</h3><p>  <code>x轴偏移量  y轴偏移量 【阴影模糊半径】 【阴影扩展班级】 【阴影颜色】 【投影方式】\n                           inset outset（默认）</code></p>\n<h3 id=\"border-image\"><a href=\"#border-image\" class=\"headerlink\" title=\"border-image\"></a>border-image</h3><p>  <code>repeat（重复） round（平铺） stretch（拉伸）</code></p>\n<h3 id=\"linear-gradient-radial-gradient\"><a href=\"#linear-gradient-radial-gradient\" class=\"headerlink\" title=\"linear-gradient/radial-gradient\"></a>linear-gradient/radial-gradient</h3><p><code>linear-gradient(to bottom,#ff,#999)</code></p>\n<p><code>渐变类型 (渐变方向，颜色起始点和结束点)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">角度</th>\n<th style=\"text-align:center\">用英文</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0deg</td>\n<td style=\"text-align:center\">to top</td>\n<td>从下向上</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">90deg</td>\n<td style=\"text-align:center\">to right</td>\n<td>从左向右</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">180deg</td>\n<td style=\"text-align:center\">to bottom</td>\n<td>从上向下</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">270deg</td>\n<td style=\"text-align:center\">to left</td>\n<td>从右向左</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">to top left</td>\n<td>从右下角向左上角</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">to top right</td>\n<td>从左下角到右上角</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"text-overflow-word-wrap\"><a href=\"#text-overflow-word-wrap\" class=\"headerlink\" title=\"text-overflow/word-wrap\"></a>text-overflow/word-wrap</h3><p><code>text-overflow:clip | ellipsis</code></p>\n<p><code>clip 剪切</code><br><code>ellipsis 显示省略标记</code></p>\n<p>但是text-overflow只是用来说明文字溢出时用什么方式显示，要实现溢出时产生省略号的效果，还须定义强制文本在一行内显示（white-space:nowrap）及溢出内容为隐藏（overflow:hidden），只有这样才能实现溢出文本显示省略号的效果，代码如下：<br><code>text-overflow:ellipsis; \noverflow:hidden; /*溢出内容隐藏*/\nwhite-space:nowrap;  /*强制在一行内显示*/</code></p>\n<p><code>word-wrap:normal | break-word</code><br><code>normal 控制连续文本换行</code><br><code>break-word 内容在边界内换行</code></p>\n<h3 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h3><p><code>@font-face{\n    font-family : 字体名字;\n    src : 字体文件在服务器上的相对或者绝对路径;\n}</code></p>\n<h3 id=\"text-shadow\"><a href=\"#text-shadow\" class=\"headerlink\" title=\"text-shadow\"></a>text-shadow</h3><p><code>text-shadow: X-Offset Y-Offset blur color</code><br><code>X-Offset 阴影水平偏移距离 正值向右</code><br><code>Y-Offset 阴影垂直偏移距离 正值向下</code><br><code>Blur 是指阴影的模糊程度，其值不能是负值，如果值越大，阴影越模糊，反之阴影越清晰，如果不需要阴影模糊可以将Blur值设置为0；</code><br><code>Color 颜色</code><br><code>text-shadow: 0 1px 1px #fff</code></p>\n<h3 id=\"background-origin-原始起始位置\"><a href=\"#background-origin-原始起始位置\" class=\"headerlink\" title=\"background-origin 原始起始位置\"></a>background-origin 原始起始位置</h3><p><code>background-origin : border-box | padding-box | content-box</code><br><code>边框 | 内边距（默认） | 内容区域</code><br><img src=\"http://img.mukewang.com/531003de0001166903660166.jpg\" alt=\"ss\"></p>\n<h3 id=\"background-clip-背景图剪切\"><a href=\"#background-clip-背景图剪切\" class=\"headerlink\" title=\"background-clip 背景图剪切\"></a>background-clip 背景图剪切</h3><p><code>background-clip : border-box | padding-box | content-box | no-clip</code><br><code>边框（默认） | 内填充 | 内容区域</code></p>\n<h3 id=\"background-size-背景图大小\"><a href=\"#background-size-背景图大小\" class=\"headerlink\" title=\"background-size 背景图大小\"></a>background-size 背景图大小</h3><p><code>background-size : auto | &lt;长度值&gt; | &lt;百分比&gt; | cover | contain</code></p>\n<blockquote>\n<ul>\n<li>auto 默认值</li>\n<li>&lt;长度值&gt; 宽度  等比缩放</li>\n<li>&lt;百分比&gt; 0~100% </li>\n<li>cover <strong>覆盖</strong> 填满整个容器</li>\n<li>contain <strong>容纳</strong> 紧贴容器边缘</li>\n</ul>\n</blockquote>\n<h3 id=\"multiple-backgrounds-多重背景\"><a href=\"#multiple-backgrounds-多重背景\" class=\"headerlink\" title=\"multiple backgrounds 多重背景\"></a>multiple backgrounds 多重背景</h3><p><code>background-image: url(http://img.mukewang.com/54cf2365000140e600740095.jpg),\n                      url(http://img.mukewang.com/54cf238a0001728d00740095.jpg),\n                      url(http://img.mukewang.com/54cf23b60001fd9700740096.jpg);\n    background-position: left top, 100px 0, 200px 0;\n    background-repeat: no-repeat, no-repeat, no-repeat;</code></p>\n<h3 id=\"导航菜单\"><a href=\"#导航菜单\" class=\"headerlink\" title=\"导航菜单\"></a>导航菜单</h3><p><code>/*使用伪元素制作导航列表项分隔线*/\n    .nav li:after{\n            content:&#39;|&#39;;\n            margin-left:10px;\n            color:#fff;\n        }</code><br><code>.nav li{\n           background:linear-gradient(to left,#000,#000,#000) no-repeat right/1px 15px }\n        }</code><br><code>.nav li:after{\n          content:&quot;&quot;;\n          position:absolute;\n          right:0px;\n          top:16px;\n          height:19px;\n          width:1px;    \n          background:linear-gradient(to top,red, orange,yellow,green,blue,indigo,violet)   \n        }</code></p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><blockquote>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">属性选择器</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">E[att^=”val”]</td>\n<td style=\"text-align:center\">以val开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E[att$=”val”]</td>\n<td style=\"text-align:center\">以val结尾</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">E[att*=”val”]</td>\n<td style=\"text-align:center\">以val包含</td>\n</tr>\n</tbody>\n</table>\n</blockquote>\n<h3 id=\"结构性伪类选择器–root\"><a href=\"#结构性伪类选择器–root\" class=\"headerlink\" title=\"结构性伪类选择器–root\"></a>结构性伪类选择器–root</h3><p><code>根选择器  匹配元素所在文档的根元素 也就是&lt;html&gt;</code></p>"},{"title":"box model","date":"2017-02-22T05:35:22.000Z","_content":"\n\nDIV+CSS 盒子模型\n\n<!-- more -->\n\n\n![](http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_1.jpeg)\nW3C标准盒子模型\n包括 `margin | border | padding | content ` 并且 `content` 部分不包含其他部分\n\n\n![](http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_2.jpeg)\nIE 盒子模型\n包括 ` margin | border | padding | content ` 和标准W3C盒子模型不通是: IE盒子模型的`content` 部分包含了`border` 和`padding`\nIE模型更像是 box-sizing : border-box; 其内容宽度还包含了border和padding\n\n\n## box-sizing 属性\n`box-sizing : content-box|border-box|inherit;`\n* (1) `content-box` ,默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的width只包含内容。\n\t即总宽度=`margin+border+padding+width`\n\n* (2) `border-box` , 设置的`width`值其实是除`margin`外的`border`+`padding`+`element`的总宽度。盒子的`width`包含`border`+`padding`+内容\n\t即总宽度=`margin`+`width`很多CSS框架，都会对盒子模型的计算方法进行简化。\n\n* (3) `inherit` , 规定应从父元素继承 `box-sizing` 属性的值\n关于border-box的使用：\n\n* 1 一个box宽度为100%，又想要两边有内间距，这时候用就比较好\n* 2 全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度\n\n\n\n# 一些小问题\n\n###  margin越界\n当父元素没有边框border时，设置第一个子元素的margin-top值的时候，会出现margin-top值加在父元素上的现象，解决方法有四个：\n* （1）给父元素加边框border （副作用）\n* （2）给父元素设置padding值  （副作用）\n* （3）父元素添加 overflow：hidden （副作用）\n* （4）父元素加前置内容生成。（推荐）\n```\n<div class=\"parent\">\n    <div class=\"child\"></div> \n</div>\n.parent {\n     width : 500px;\n     height : 500px;\n     background-color : red;       \n}\n.parent : before {\n     content : \" \";\n     display : table;\n}\n\n.child {\n     width : 200px;\n     height : 200px;\n     background-color : green;\n     margin-top : 50px;\n}\n\n```\n\n\n### 浮动\n* ####浮动元素与绝对定位元素的差别####\n* 绝对定位的元素脱离了文档流，而浮动元素依旧在文档流中\n* 同处于文档流中的文字实体不会与浮动元素重叠，而会与绝对定位元素重叠\n\n\n### line-height [link](http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/)","source":"_posts/box-model.md","raw":"---\ntitle: box model\ndate: 2017-02-22 13:35:22\ncategories: HTML\ntags: [html,\"笔记\",box-model]\n---\n\n\nDIV+CSS 盒子模型\n\n<!-- more -->\n\n\n![](http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_1.jpeg)\nW3C标准盒子模型\n包括 `margin | border | padding | content ` 并且 `content` 部分不包含其他部分\n\n\n![](http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_2.jpeg)\nIE 盒子模型\n包括 ` margin | border | padding | content ` 和标准W3C盒子模型不通是: IE盒子模型的`content` 部分包含了`border` 和`padding`\nIE模型更像是 box-sizing : border-box; 其内容宽度还包含了border和padding\n\n\n## box-sizing 属性\n`box-sizing : content-box|border-box|inherit;`\n* (1) `content-box` ,默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的width只包含内容。\n\t即总宽度=`margin+border+padding+width`\n\n* (2) `border-box` , 设置的`width`值其实是除`margin`外的`border`+`padding`+`element`的总宽度。盒子的`width`包含`border`+`padding`+内容\n\t即总宽度=`margin`+`width`很多CSS框架，都会对盒子模型的计算方法进行简化。\n\n* (3) `inherit` , 规定应从父元素继承 `box-sizing` 属性的值\n关于border-box的使用：\n\n* 1 一个box宽度为100%，又想要两边有内间距，这时候用就比较好\n* 2 全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度\n\n\n\n# 一些小问题\n\n###  margin越界\n当父元素没有边框border时，设置第一个子元素的margin-top值的时候，会出现margin-top值加在父元素上的现象，解决方法有四个：\n* （1）给父元素加边框border （副作用）\n* （2）给父元素设置padding值  （副作用）\n* （3）父元素添加 overflow：hidden （副作用）\n* （4）父元素加前置内容生成。（推荐）\n```\n<div class=\"parent\">\n    <div class=\"child\"></div> \n</div>\n.parent {\n     width : 500px;\n     height : 500px;\n     background-color : red;       \n}\n.parent : before {\n     content : \" \";\n     display : table;\n}\n\n.child {\n     width : 200px;\n     height : 200px;\n     background-color : green;\n     margin-top : 50px;\n}\n\n```\n\n\n### 浮动\n* ####浮动元素与绝对定位元素的差别####\n* 绝对定位的元素脱离了文档流，而浮动元素依旧在文档流中\n* 同处于文档流中的文字实体不会与浮动元素重叠，而会与绝对定位元素重叠\n\n\n### line-height [link](http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/)","slug":"box-model","published":1,"updated":"2017-02-24T10:02:22.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqt100082sl1hrygp15e","content":"<p>DIV+CSS 盒子模型</p>\n<a id=\"more\"></a>\n<p><img src=\"http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_1.jpeg\" alt=\"\"><br>W3C标准盒子模型<br>包括 <code>margin | border | padding | content</code> 并且 <code>content</code> 部分不包含其他部分</p>\n<p><img src=\"http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_2.jpeg\" alt=\"\"><br>IE 盒子模型<br>包括 <code>margin | border | padding | content</code> 和标准W3C盒子模型不通是: IE盒子模型的<code>content</code> 部分包含了<code>border</code> 和<code>padding</code><br>IE模型更像是 box-sizing : border-box; 其内容宽度还包含了border和padding</p>\n<h2 id=\"box-sizing-属性\"><a href=\"#box-sizing-属性\" class=\"headerlink\" title=\"box-sizing 属性\"></a>box-sizing 属性</h2><p><code>box-sizing : content-box|border-box|inherit;</code></p>\n<ul>\n<li><p>(1) <code>content-box</code> ,默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的width只包含内容。<br>  即总宽度=<code>margin+border+padding+width</code></p>\n</li>\n<li><p>(2) <code>border-box</code> , 设置的<code>width</code>值其实是除<code>margin</code>外的<code>border</code>+<code>padding</code>+<code>element</code>的总宽度。盒子的<code>width</code>包含<code>border</code>+<code>padding</code>+内容<br>  即总宽度=<code>margin</code>+<code>width</code>很多CSS框架，都会对盒子模型的计算方法进行简化。</p>\n</li>\n<li><p>(3) <code>inherit</code> , 规定应从父元素继承 <code>box-sizing</code> 属性的值<br>关于border-box的使用：</p>\n</li>\n<li><p>1 一个box宽度为100%，又想要两边有内间距，这时候用就比较好</p>\n</li>\n<li>2 全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度</li>\n</ul>\n<h1 id=\"一些小问题\"><a href=\"#一些小问题\" class=\"headerlink\" title=\"一些小问题\"></a>一些小问题</h1><h3 id=\"margin越界\"><a href=\"#margin越界\" class=\"headerlink\" title=\"margin越界\"></a>margin越界</h3><p>当父元素没有边框border时，设置第一个子元素的margin-top值的时候，会出现margin-top值加在父元素上的现象，解决方法有四个：</p>\n<ul>\n<li>（1）给父元素加边框border （副作用）</li>\n<li>（2）给父元素设置padding值  （副作用）</li>\n<li>（3）父元素添加 overflow：hidden （副作用）</li>\n<li>（4）父元素加前置内容生成。（推荐）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;parent&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">.parent &#123;</div><div class=\"line\">     width : 500px;</div><div class=\"line\">     height : 500px;</div><div class=\"line\">     background-color : red;       </div><div class=\"line\">&#125;</div><div class=\"line\">.parent : before &#123;</div><div class=\"line\">     content : &quot; &quot;;</div><div class=\"line\">     display : table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.child &#123;</div><div class=\"line\">     width : 200px;</div><div class=\"line\">     height : 200px;</div><div class=\"line\">     background-color : green;</div><div class=\"line\">     margin-top : 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><ul>\n<li>####浮动元素与绝对定位元素的差别####</li>\n<li>绝对定位的元素脱离了文档流，而浮动元素依旧在文档流中</li>\n<li>同处于文档流中的文字实体不会与浮动元素重叠，而会与绝对定位元素重叠</li>\n</ul>\n<h3 id=\"line-height-link\"><a href=\"#line-height-link\" class=\"headerlink\" title=\"line-height link\"></a>line-height <a href=\"http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"external\">link</a></h3>","excerpt":"<p>DIV+CSS 盒子模型</p>","more":"<p><img src=\"http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_1.jpeg\" alt=\"\"><br>W3C标准盒子模型<br>包括 <code>margin | border | padding | content</code> 并且 <code>content</code> 部分不包含其他部分</p>\n<p><img src=\"http://image79.360doc.com/DownloadImg/2014/10/1001/45984178_2.jpeg\" alt=\"\"><br>IE 盒子模型<br>包括 <code>margin | border | padding | content</code> 和标准W3C盒子模型不通是: IE盒子模型的<code>content</code> 部分包含了<code>border</code> 和<code>padding</code><br>IE模型更像是 box-sizing : border-box; 其内容宽度还包含了border和padding</p>\n<h2 id=\"box-sizing-属性\"><a href=\"#box-sizing-属性\" class=\"headerlink\" title=\"box-sizing 属性\"></a>box-sizing 属性</h2><p><code>box-sizing : content-box|border-box|inherit;</code></p>\n<ul>\n<li><p>(1) <code>content-box</code> ,默认值，可以使设置的宽度和高度值应用到元素的内容框。盒子的width只包含内容。<br>  即总宽度=<code>margin+border+padding+width</code></p>\n</li>\n<li><p>(2) <code>border-box</code> , 设置的<code>width</code>值其实是除<code>margin</code>外的<code>border</code>+<code>padding</code>+<code>element</code>的总宽度。盒子的<code>width</code>包含<code>border</code>+<code>padding</code>+内容<br>  即总宽度=<code>margin</code>+<code>width</code>很多CSS框架，都会对盒子模型的计算方法进行简化。</p>\n</li>\n<li><p>(3) <code>inherit</code> , 规定应从父元素继承 <code>box-sizing</code> 属性的值<br>关于border-box的使用：</p>\n</li>\n<li><p>1 一个box宽度为100%，又想要两边有内间距，这时候用就比较好</p>\n</li>\n<li>2 全局设置 border-box 很好，首先它符合直觉，其次它可以省去一次又一次的加加减减，它还有一个关键作用——让有边框的盒子正常使用百分比宽度</li>\n</ul>\n<h1 id=\"一些小问题\"><a href=\"#一些小问题\" class=\"headerlink\" title=\"一些小问题\"></a>一些小问题</h1><h3 id=\"margin越界\"><a href=\"#margin越界\" class=\"headerlink\" title=\"margin越界\"></a>margin越界</h3><p>当父元素没有边框border时，设置第一个子元素的margin-top值的时候，会出现margin-top值加在父元素上的现象，解决方法有四个：</p>\n<ul>\n<li>（1）给父元素加边框border （副作用）</li>\n<li>（2）给父元素设置padding值  （副作用）</li>\n<li>（3）父元素添加 overflow：hidden （副作用）</li>\n<li>（4）父元素加前置内容生成。（推荐）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;parent&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;child&quot;&gt;&lt;/div&gt; </div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">.parent &#123;</div><div class=\"line\">     width : 500px;</div><div class=\"line\">     height : 500px;</div><div class=\"line\">     background-color : red;       </div><div class=\"line\">&#125;</div><div class=\"line\">.parent : before &#123;</div><div class=\"line\">     content : &quot; &quot;;</div><div class=\"line\">     display : table;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.child &#123;</div><div class=\"line\">     width : 200px;</div><div class=\"line\">     height : 200px;</div><div class=\"line\">     background-color : green;</div><div class=\"line\">     margin-top : 50px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><ul>\n<li>####浮动元素与绝对定位元素的差别####</li>\n<li>绝对定位的元素脱离了文档流，而浮动元素依旧在文档流中</li>\n<li>同处于文档流中的文字实体不会与浮动元素重叠，而会与绝对定位元素重叠</li>\n</ul>\n<h3 id=\"line-height-link\"><a href=\"#line-height-link\" class=\"headerlink\" title=\"line-height link\"></a>line-height <a href=\"http://www.zhangxinxu.com/wordpress/2009/11/css%E8%A1%8C%E9%AB%98line-height%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E5%8F%8A%E5%BA%94%E7%94%A8/\">link</a></h3>"},{"title":"flex","date":"2017-02-22T01:52:15.000Z","_content":"\n## Flex 布局整理\n\n<!-- more -->\n\n\n* 布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n* 兼容性\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071003.jpg)\n\n* 注意，设为Flex布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png)\n*容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n### flex-direction属性\n```\n.row{\n\tflex-direction:row | row-reverse | column | column-reverse;\n}\n\n```\n* row（默认值）：主轴为水平方向，起点在左端。\n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上沿。\n* column-reverse：主轴为垂直方向，起点在下沿。\n\n### flex-wrap 属性\n```\n.box{\n\tflex-wrap : nowrap | wrap | wrap-reverse;\n}\n\n```\n\n* nowrap（默认）：不换行。\n* wrap: 换行，第一行在上方\n* wrap-reverse : 换行，第一行在下方\n\n### flex-flow 属性\n```\n.box{\n\tflex-flow:row nowrap;\n}\n\n```\n\n### justify-content 属性\n* 属性定义了项目在主轴上的对齐方式。\n```\n.box{\n\tjustify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n* flex-start（默认值）：左对齐\n* flex-end：右对齐\n* center： 居中\n* space-between：两端对齐，项目之间的间隔都相等。\n* space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n### align-item 属性\n* 定义项目在交叉轴上如何对齐\n\n```\n.box{\n\talign-item: flex-start | flex-end | center | baseline | stretch;\n}\n```\n* flex-start：交叉轴的起点对齐。\n* flex-end：交叉轴的终点对齐。\n* center：交叉轴的中点对齐。\n* baseline: 项目的第一行文字的基线对齐。\n* stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n### align-content 属性\n* 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n```\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n\n```\n* flex-start：与交叉轴的起点对齐。\n* flex-end：与交叉轴的终点对齐。\n* center：与交叉轴的中点对齐。\n* space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n* space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n* stretch（默认值）：轴线占满整个交叉轴。\n\n\n\n## 项目的属性\n\n### order 属性\n* 定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n```\n.item {\n  order: <integer>;\n}\n```\n### flex-grow 属性\n* 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n```\n\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n\n```\n\n### flex-shrink 属性\n* 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n```\nitem {\n  flex-shrink: <number>; /* default 1 */\n}\n\n```\n\n### flex-basis 属性\n* 定义了在分配多余空间之前，项目占据的主轴空间（`main size`）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n* 它可以设为跟`width`或`height`属性一样的值（比如`350px`），则项目将占据固定空间。\n```\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n### flex 属性\n* 是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。\n* 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n```\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n\n```\n\n### align-self 属性\n* 允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n```\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n\n```\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png)\n\n\n\n\n\n\n","source":"_posts/flex.md","raw":"---\ntitle: flex\ndate: 2017-02-22 09:52:15\ncategories: CSS\ntags: [css,笔记,flex]\n---\n\n## Flex 布局整理\n\n<!-- more -->\n\n\n* 布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。\n\n* 兼容性\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071003.jpg)\n\n* 注意，设为Flex布局以后，子元素的`float`、`clear`和`vertical-align`属性将失效。\n\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png)\n*容器默认存在两根轴：水平的主轴（`main axis`）和垂直的交叉轴（`cross axis`）。主轴的开始位置（与边框的交叉点）叫做`main start`，结束位置叫做`main end`；交叉轴的开始位置叫做`cross start`，结束位置叫做`cross end`。\n项目默认沿主轴排列。单个项目占据的主轴空间叫做`main size`，占据的交叉轴空间叫做`cross size`。\n\n### flex-direction属性\n```\n.row{\n\tflex-direction:row | row-reverse | column | column-reverse;\n}\n\n```\n* row（默认值）：主轴为水平方向，起点在左端。\n* row-reverse：主轴为水平方向，起点在右端。\n* column：主轴为垂直方向，起点在上沿。\n* column-reverse：主轴为垂直方向，起点在下沿。\n\n### flex-wrap 属性\n```\n.box{\n\tflex-wrap : nowrap | wrap | wrap-reverse;\n}\n\n```\n\n* nowrap（默认）：不换行。\n* wrap: 换行，第一行在上方\n* wrap-reverse : 换行，第一行在下方\n\n### flex-flow 属性\n```\n.box{\n\tflex-flow:row nowrap;\n}\n\n```\n\n### justify-content 属性\n* 属性定义了项目在主轴上的对齐方式。\n```\n.box{\n\tjustify-content: flex-start | flex-end | center | space-between | space-around;\n}\n```\n* flex-start（默认值）：左对齐\n* flex-end：右对齐\n* center： 居中\n* space-between：两端对齐，项目之间的间隔都相等。\n* space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n### align-item 属性\n* 定义项目在交叉轴上如何对齐\n\n```\n.box{\n\talign-item: flex-start | flex-end | center | baseline | stretch;\n}\n```\n* flex-start：交叉轴的起点对齐。\n* flex-end：交叉轴的终点对齐。\n* center：交叉轴的中点对齐。\n* baseline: 项目的第一行文字的基线对齐。\n* stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n### align-content 属性\n* 定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。\n```\n.box {\n  align-content: flex-start | flex-end | center | space-between | space-around | stretch;\n}\n\n```\n* flex-start：与交叉轴的起点对齐。\n* flex-end：与交叉轴的终点对齐。\n* center：与交叉轴的中点对齐。\n* space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n* space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n* stretch（默认值）：轴线占满整个交叉轴。\n\n\n\n## 项目的属性\n\n### order 属性\n* 定义项目的排列顺序。数值越小，排列越靠前，默认为0。\n```\n.item {\n  order: <integer>;\n}\n```\n### flex-grow 属性\n* 属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n```\n\n.item {\n  flex-grow: <number>; /* default 0 */\n}\n\n```\n\n### flex-shrink 属性\n* 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n```\nitem {\n  flex-shrink: <number>; /* default 1 */\n}\n\n```\n\n### flex-basis 属性\n* 定义了在分配多余空间之前，项目占据的主轴空间（`main size`）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为`auto`，即项目的本来大小。\n* 它可以设为跟`width`或`height`属性一样的值（比如`350px`），则项目将占据固定空间。\n```\n.item {\n  flex-basis: <length> | auto; /* default auto */\n}\n```\n\n### flex 属性\n* 是`flex-grow`, `flex-shrink` 和 `flex-basis`的简写，默认值为`0 1 auto`。后两个属性可选。\n* 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。\n```\n.item {\n  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]\n}\n\n```\n\n### align-self 属性\n* 允许单个项目有与其他项目不一样的对齐方式，可覆盖`align-items`属性。默认值为`auto`，表示继承父元素的`align-items`属性，如果没有父元素，则等同于`stretch`。\n```\n.item {\n  align-self: auto | flex-start | flex-end | center | baseline | stretch;\n}\n\n```\n![](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png)\n\n\n\n\n\n\n","slug":"flex","published":1,"updated":"2017-02-22T02:47:21.959Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqt600092sl1nml3ifkf","content":"<h2 id=\"Flex-布局整理\"><a href=\"#Flex-布局整理\" class=\"headerlink\" title=\"Flex 布局整理\"></a>Flex 布局整理</h2><a id=\"more\"></a>\n<ul>\n<li><p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n</li>\n<li><p>兼容性<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071003.jpg\" alt=\"\"></p>\n</li>\n<li><p>注意，设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\" alt=\"\"><br>*容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h3 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.row&#123;</div><div class=\"line\">\tflex-direction:row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h3 id=\"flex-wrap-属性\"><a href=\"#flex-wrap-属性\" class=\"headerlink\" title=\"flex-wrap 属性\"></a>flex-wrap 属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tflex-wrap : nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>nowrap（默认）：不换行。</li>\n<li>wrap: 换行，第一行在上方</li>\n<li>wrap-reverse : 换行，第一行在下方</li>\n</ul>\n<h3 id=\"flex-flow-属性\"><a href=\"#flex-flow-属性\" class=\"headerlink\" title=\"flex-flow 属性\"></a>flex-flow 属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tflex-flow:row nowrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"justify-content-属性\"><a href=\"#justify-content-属性\" class=\"headerlink\" title=\"justify-content 属性\"></a>justify-content 属性</h3><ul>\n<li><p>属性定义了项目在主轴上的对齐方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tjustify-content: flex-start | flex-end | center | space-between | space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>flex-start（默认值）：左对齐</p>\n</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<h3 id=\"align-item-属性\"><a href=\"#align-item-属性\" class=\"headerlink\" title=\"align-item 属性\"></a>align-item 属性</h3><ul>\n<li>定义项目在交叉轴上如何对齐</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\talign-item: flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<h3 id=\"align-content-属性\"><a href=\"#align-content-属性\" class=\"headerlink\" title=\"align-content 属性\"></a>align-content 属性</h3><ul>\n<li><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>flex-start：与交叉轴的起点对齐。</p>\n</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><h3 id=\"order-属性\"><a href=\"#order-属性\" class=\"headerlink\" title=\"order 属性\"></a>order 属性</h3><ul>\n<li>定义项目的排列顺序。数值越小，排列越靠前，默认为0。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  order: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-grow-属性\"><a href=\"#flex-grow-属性\" class=\"headerlink\" title=\"flex-grow 属性\"></a>flex-grow 属性</h3><ul>\n<li>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.item &#123;</div><div class=\"line\">  flex-grow: &lt;number&gt;; /* default 0 */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-shrink-属性\"><a href=\"#flex-shrink-属性\" class=\"headerlink\" title=\"flex-shrink 属性\"></a>flex-shrink 属性</h3><ul>\n<li>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">item &#123;</div><div class=\"line\">  flex-shrink: &lt;number&gt;; /* default 1 */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-basis-属性\"><a href=\"#flex-basis-属性\" class=\"headerlink\" title=\"flex-basis 属性\"></a>flex-basis 属性</h3><ul>\n<li>定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>\n<li>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如<code>350px</code>），则项目将占据固定空间。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-属性\"><a href=\"#flex-属性\" class=\"headerlink\" title=\"flex 属性\"></a>flex 属性</h3><ul>\n<li>是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>\n<li>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"align-self-属性\"><a href=\"#align-self-属性\" class=\"headerlink\" title=\"align-self 属性\"></a>align-self 属性</h3><ul>\n<li>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\" alt=\"\"></p>\n","excerpt":"<h2 id=\"Flex-布局整理\"><a href=\"#Flex-布局整理\" class=\"headerlink\" title=\"Flex 布局整理\"></a>Flex 布局整理</h2>","more":"<ul>\n<li><p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p>\n</li>\n<li><p>兼容性<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071003.jpg\" alt=\"\"></p>\n</li>\n<li><p>注意，设为Flex布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>\n</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png\" alt=\"\"><br>*容器默认存在两根轴：水平的主轴（<code>main axis</code>）和垂直的交叉轴（<code>cross axis</code>）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>\n<h3 id=\"flex-direction属性\"><a href=\"#flex-direction属性\" class=\"headerlink\" title=\"flex-direction属性\"></a>flex-direction属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.row&#123;</div><div class=\"line\">\tflex-direction:row | row-reverse | column | column-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>row（默认值）：主轴为水平方向，起点在左端。</li>\n<li>row-reverse：主轴为水平方向，起点在右端。</li>\n<li>column：主轴为垂直方向，起点在上沿。</li>\n<li>column-reverse：主轴为垂直方向，起点在下沿。</li>\n</ul>\n<h3 id=\"flex-wrap-属性\"><a href=\"#flex-wrap-属性\" class=\"headerlink\" title=\"flex-wrap 属性\"></a>flex-wrap 属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tflex-wrap : nowrap | wrap | wrap-reverse;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>nowrap（默认）：不换行。</li>\n<li>wrap: 换行，第一行在上方</li>\n<li>wrap-reverse : 换行，第一行在下方</li>\n</ul>\n<h3 id=\"flex-flow-属性\"><a href=\"#flex-flow-属性\" class=\"headerlink\" title=\"flex-flow 属性\"></a>flex-flow 属性</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tflex-flow:row nowrap;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"justify-content-属性\"><a href=\"#justify-content-属性\" class=\"headerlink\" title=\"justify-content 属性\"></a>justify-content 属性</h3><ul>\n<li><p>属性定义了项目在主轴上的对齐方式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\tjustify-content: flex-start | flex-end | center | space-between | space-around;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>flex-start（默认值）：左对齐</p>\n</li>\n<li>flex-end：右对齐</li>\n<li>center： 居中</li>\n<li>space-between：两端对齐，项目之间的间隔都相等。</li>\n<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"\"></p>\n<h3 id=\"align-item-属性\"><a href=\"#align-item-属性\" class=\"headerlink\" title=\"align-item 属性\"></a>align-item 属性</h3><ul>\n<li>定义项目在交叉轴上如何对齐</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box&#123;</div><div class=\"line\">\talign-item: flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>flex-start：交叉轴的起点对齐。</li>\n<li>flex-end：交叉轴的终点对齐。</li>\n<li>center：交叉轴的中点对齐。</li>\n<li>baseline: 项目的第一行文字的基线对齐。</li>\n<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"\"></p>\n<h3 id=\"align-content-属性\"><a href=\"#align-content-属性\" class=\"headerlink\" title=\"align-content 属性\"></a>align-content 属性</h3><ul>\n<li><p>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>flex-start：与交叉轴的起点对齐。</p>\n</li>\n<li>flex-end：与交叉轴的终点对齐。</li>\n<li>center：与交叉轴的中点对齐。</li>\n<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li>stretch（默认值）：轴线占满整个交叉轴。</li>\n</ul>\n<h2 id=\"项目的属性\"><a href=\"#项目的属性\" class=\"headerlink\" title=\"项目的属性\"></a>项目的属性</h2><h3 id=\"order-属性\"><a href=\"#order-属性\" class=\"headerlink\" title=\"order 属性\"></a>order 属性</h3><ul>\n<li>定义项目的排列顺序。数值越小，排列越靠前，默认为0。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  order: &lt;integer&gt;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-grow-属性\"><a href=\"#flex-grow-属性\" class=\"headerlink\" title=\"flex-grow 属性\"></a>flex-grow 属性</h3><ul>\n<li>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">.item &#123;</div><div class=\"line\">  flex-grow: &lt;number&gt;; /* default 0 */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-shrink-属性\"><a href=\"#flex-shrink-属性\" class=\"headerlink\" title=\"flex-shrink 属性\"></a>flex-shrink 属性</h3><ul>\n<li>定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">item &#123;</div><div class=\"line\">  flex-shrink: &lt;number&gt;; /* default 1 */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-basis-属性\"><a href=\"#flex-basis-属性\" class=\"headerlink\" title=\"flex-basis 属性\"></a>flex-basis 属性</h3><ul>\n<li>定义了在分配多余空间之前，项目占据的主轴空间（<code>main size</code>）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>\n<li>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如<code>350px</code>），则项目将占据固定空间。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex-basis: &lt;length&gt; | auto; /* default auto */</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"flex-属性\"><a href=\"#flex-属性\" class=\"headerlink\" title=\"flex 属性\"></a>flex 属性</h3><ul>\n<li>是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>\n<li>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"align-self-属性\"><a href=\"#align-self-属性\" class=\"headerlink\" title=\"align-self 属性\"></a>align-self 属性</h3><ul>\n<li>允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.item &#123;</div><div class=\"line\">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png\" alt=\"\"></p>"},{"title":"git_map","date":"2015-07-15T15:21:42.000Z","_content":"\ngit 基本用法\n<!-- more -->\n\n## git 介绍\n`Git`是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。关于她的特点[`Git`官网](http://www.git-scm.com/)是这么介绍的：   \n\n<!-- more -->\n\n> Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.  \n\n![](https://github.com/jiwenxing/learngit/blob/master/aboutgit.png?raw=true)\n\n总之，对于开源项目来说，使用Git可以极大地提高了开发效率、扩大了开源项目的参与度、 增强了版本控制系统的安全性，选择Git已是大势所趋。\n\n以下为本人学习`git`过程中的一些练习和笔记，相关参考：[廖雪峰的Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## git 本地仓库常用操作\n\n### git 创建本地仓库\n    $ mkdir learngit  //创建文件夹  \n    $ cd learngit  \n    $ pwd   //查看当前目录  \n    /Users/michael/learngit\n    \n    $ git init //将当前文件夹变成git仓库，init后目录下会多出.git文件（默认隐藏） 可以用ls -ah查看  \n    Initialized empty Git repository in /Users/michael/learngit/.git/\n    \n    $ git log //显示从最近到最远的提交日志 如果出现end标记可以按q退出历史记录列表  \n    $ git log --pretty=oneline\n    \n    $ git reset --hard HEAD^  //回退上个版本  \n在`Git`中，用`HEAD`表示当前版本，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上`100`个版本写`100`个`^`比较容易数不过来，所以写成`HEAD~100`。\n\n### 回退后又想恢复怎么办？\n    $ git reset --hard commit_id //即可，但是怎么知道上次回滚的commit_id呢？  \n    $ git reflog  \n    289f53a HEAD@{0}: reset: moving to HEAD^  \n    ba423b7 HEAD@{1}: commit: add a line  \n    289f53a HEAD@{2}: commit: add file test.txt  \n    0aa4371 HEAD@{3}: commit: create new file  \n    339d5bb HEAD@{4}: commit: add a line  \n    906ce38 HEAD@{5}: commit (initial): add file readme.txt \n \n`git reflog`可以查看命令历史，于是我们知道 `add a line` 的`commit_id`是`ba423b7`\n\n### git 的撤销修改\n1，如果只是在本地做了一些修改，没有执行`commit`也没有`add`操作，使用`git status`可以看到红色字体提示 `modified: <file>  `\n   这时如果不想保存本地修改，即丢弃工作区修改，直接执行`git checkout -- <file>`即可（`git status`有提示）  \n2，如果已经执行了`add`还没有`commit`想回滚，可以执行`$ git reset HEAD readme.txt`将暂存区修改内容回退到工作区，如果还想撤回本地修改，执行步骤1即可  \n3，如果已经`commit`，想回滚到之前的某个版本  \n\t执行` $ git reset --hard HEAD^ ` //回退上个版本  \n\t在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。  \n\n**小结：**   \n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。  \n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。  \n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n## git 远程仓库\n\n### git 远程仓库基本操作\n以上所讲只是在一个本地仓库里管理文件历史，我们知道`git`是一个分布式的版本控制系统，即同一个`git`仓库可以分布在不同的服务器上，很庆幸`github`这个网站便可以提供免费的仓库托管服务。\n\n先在`github`上注册账号登陆后`Create a new repo`新建一个仓库，例如`learngit`，于是便在`github`上新建了一个空仓库  \n    `$ git remote add origin https://github.com/jiwenxing/learngit.git`  \n添加后，远程库的名字就是`origin`，这是`Git`默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。    \n\n执行`$ git push -u origin master`输入用户名和密码即可将本地库的内容推送到远程`github`仓库, 其中`-u`参数只在第一次提交时使用，表示将本地`master`分支和远程`master`分支相关联，再提交时只需执行  \n`    $ git push origin master `   \n如果报错让你先`fetch`，可以强制推送：  \n`$ git push -u origin master --force`\n\n**注意：**  \n`Git`支持多种协议，包括`ssh`和`https`，  \n`ssh`路径： `git@github.com:jiwenxing/learngit.git`   \n`https`路径： `https://github.com/jiwenxing/learngit.git`  \n通过`ssh`支持的原生`git`协议速度最快。但是在某些特定环境ssh端口被封掉时可以采用`https`，唯一不便的是每次提交都需要输入一下用户名和密码！\n\n### git 从远程仓库 clone\n    git clone https://github.com/h5bp/html5-boilerplate.git\n\n### git 分支管理\n\n`git`创建并切换到新分支 \n \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch dev  //创建新分支\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch\n      dev\n    * master   //*代表当前分支\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git checkout dev  //切换分支\n    Switched to branch 'dev'\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n    $ git branch\n    * dev\n      master\n\n下面我在`dev`分支下对文件`test.txt`添加一行内容后执行`add commit`操作后，再次切换到`master`分支，你会发现刚才做的修改没有了。 也就是说刚才的修改只是针对`dev`分支，对`master`分支没有影响。\n\n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n    $ git checkout master  //切回到主分支\n    Switched to branch 'master'\n    Your branch is up-to-date with 'origin/master'.\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git merge dev  //将dev分支合并到当前master主分支\n    Updating daf105e..b563da8\n    Fast-forward\n     test.txt | 3 ++-\n     1 file changed, 2 insertions(+), 1 deletion(-)\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch -d dev //此时可以删除dev分支\n    Deleted branch dev (was b563da8).\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch\n    * master\n\n可以看到上面我们将dev分支合并到了当前`master`分支后再去看`test.txt`文件，发现刚才做的修改又出现了，这时便可以放心大胆的删除`dev`分支了。\n\n**小结**\n\n- 查看分支：`git branch`\n- 创建分支：`git branch <name>`\n- 切换分支：`git checkout <name>`\n- 创建+切换分支：`git checkout -b <name>`\n- 合并某分支到当前分支：`git merge <name>`\n- 删除分支：`git branch -d <name>`\n\n### git 分支冲突\n    \n    $ git checkout -b feature1  //创建并切换到新分支，并对test文件做修改\n    fatal: A branch named 'feature1' already exists.\n    $ git add test.txt  \n    $ git commit -m \"conflict -and\"  //在新分支下提交更改\n     feature1 651c38a] conflict -and  \n     1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git checkout master  //切回到master分支，对test文件做不同的更改\n    README.MD  \n    Switched to branch 'master'  \n    Your branch is up-to-date with 'origin/master'.  \n    $ git add test.txt  \n    $ git commit -m \"conflict -&\"  //在master下提交更改\n     master 0dc1bd3] conflict -&  \n     1 file changed, 1 insertion(+), 1 deletion(-)  \n    $ git merge feature1  //在master分支下合并feature1分支上的更改，显示冲突\n    CONFLICT (content): Merge conflict in test.txt  \n    Automatic merge failed; fix conflicts and then commit the result.\n\n在不同分支上对同一文件分别做了不同的更改，合并分支的时候就会报冲突，而这时`test.txt`文件的内容也变成了如下：\n\n    I am totoro~\n    who are you？\n    I am totoro~\n    <<<<<<< HEAD\n    Creating a new branch is quick & simple.\n    =======\n    Creating a new branch is quick AND simple.\n    >>>>>>> feature1\n\n`Git`用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的差异内容，`<<<<<<<`标记冲突开始，后面跟的是当前分支中的内容。HEAD指向当前分支末梢的提交。`=======`之后，`>>>>>>>`之前是要`merge`过来的另一条分支上的代码。`>>>>>>>`之后的`feature1`是该分支的名字。\n\n手动在文件中将差异内容做一下修改，再次`add`、`commit`即可解决冲突，完事还可以查看分支的合并情况：\n\n    $ git log --graph --pretty=oneline --abbrev-commit\n    7f9c092 conflict solved\n     \\\n      * 651c38a conflict -and\n      | 0dc1bd3 conflict -&\n     /\n      cfb3522 readme revise4\n      b563da8 branch test\n      daf105e readme revise3\n      002f01d revise2 readme.md\n      5697575 revise readme.md\n      28d49b7 add a pic\n      ca373c6 add two files\n\n\n**注意：**  \n合并分支指令`$ git merge feature1`默认使用的是`fast forward`模式，这样合并并不记录合并历史，而使用指令`$ git merge --no-ff -m \"merge with no-ff\" dev`则是使用普通模式合并代码，合并后有历史记录，建议采用后一种。\n\n### git 分支管理策略\n\n> 注：该部分内容参考自文章[《Git 分支管理详解》](http://www.oschina.net/question/31384_157479)\n\n团队开发中应该如何充分应用`git`的分支功能呢，通常一个项目较为规范的分支策略如下：\n\n- 主分支`master`：代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。  \n  ![](http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png)\n- 开发分支`dev`：进行日常开发工作，这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在`Master`分支上，对`Dev`分支进行\"合并\"。  \n  ![](http://static.oschina.net/uploads/img/201406/05112016_HYVm.png)  \n- 功能分支`feature`：开发某种特定功能，从`Dev`分支上面分出来的；开发完成后，要再并入`Dev`。\n  ![](http://static.oschina.net/uploads/img/201406/05112016_v2ve.png)\n- 预发布分支`release`：预发布分支，它是指发布正式版本之前（即合并到`Master`分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进`Dev`和`Master`分支。\n- `bug`分支`fixbug`：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行`bug`修补。修补`bug`分支是从`Master`分支上面分出来的。修补结束以后，再合并进`Master`和`Dev`分支。\n   ![](http://static.oschina.net/uploads/img/201406/05112016_PIf1.png)\n  \n## 使用`github`参与开源项目\n\n访问自己感兴趣的项目主页（例如`bootstrap`项目`https://github.com/twbs/bootstrap`）， 点右上角的`“Fork”`就在自己的账号下克隆了一个`bootstrap`仓库，然后，**从自己的账号下`clone`**：  \n\n    git clone https://github.com/jiwenxing/bootstrap.git\n\n**注意** 只有从自己的账号下`clone`仓库，才能推送修改。  \n如果你想修复`bootstrap`的一个`bug`，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。如果你希望`bootstrap`的官方库能接受你的修改，你就可以在`GitHub上`发起一个`pull request`。\n\n**小结：**  \n\n- 在`GitHub`上，可以任意`Fork`开源仓库；\n- 自己拥有`Fork`后的仓库的读写权限；\n- 可以推送`pull request`给官方仓库来贡献代码。\n\n## 结语\n虽然很久之前就开始用`github`，并在上面搭建了博客，但是从没用过其版本控制功能，很多东西也没有完全搞明白，希望在以后的工作中慢慢用起来，后面也会根据自己的实际应用进行更新。","source":"_posts/git_map.md","raw":"title: git_map\ndate: 2015-07-15 23:21:42\ncategories: Tools\ntags: [Tools, 筆記,git]\n---\n\ngit 基本用法\n<!-- more -->\n\n## git 介绍\n`Git`是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。关于她的特点[`Git`官网](http://www.git-scm.com/)是这么介绍的：   \n\n<!-- more -->\n\n> Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.  \n\n![](https://github.com/jiwenxing/learngit/blob/master/aboutgit.png?raw=true)\n\n总之，对于开源项目来说，使用Git可以极大地提高了开发效率、扩大了开源项目的参与度、 增强了版本控制系统的安全性，选择Git已是大势所趋。\n\n以下为本人学习`git`过程中的一些练习和笔记，相关参考：[廖雪峰的Git教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000)\n\n## git 本地仓库常用操作\n\n### git 创建本地仓库\n    $ mkdir learngit  //创建文件夹  \n    $ cd learngit  \n    $ pwd   //查看当前目录  \n    /Users/michael/learngit\n    \n    $ git init //将当前文件夹变成git仓库，init后目录下会多出.git文件（默认隐藏） 可以用ls -ah查看  \n    Initialized empty Git repository in /Users/michael/learngit/.git/\n    \n    $ git log //显示从最近到最远的提交日志 如果出现end标记可以按q退出历史记录列表  \n    $ git log --pretty=oneline\n    \n    $ git reset --hard HEAD^  //回退上个版本  \n在`Git`中，用`HEAD`表示当前版本，上一个版本就是`HEAD^`，上上一个版本就是`HEAD^^`，当然往上`100`个版本写`100`个`^`比较容易数不过来，所以写成`HEAD~100`。\n\n### 回退后又想恢复怎么办？\n    $ git reset --hard commit_id //即可，但是怎么知道上次回滚的commit_id呢？  \n    $ git reflog  \n    289f53a HEAD@{0}: reset: moving to HEAD^  \n    ba423b7 HEAD@{1}: commit: add a line  \n    289f53a HEAD@{2}: commit: add file test.txt  \n    0aa4371 HEAD@{3}: commit: create new file  \n    339d5bb HEAD@{4}: commit: add a line  \n    906ce38 HEAD@{5}: commit (initial): add file readme.txt \n \n`git reflog`可以查看命令历史，于是我们知道 `add a line` 的`commit_id`是`ba423b7`\n\n### git 的撤销修改\n1，如果只是在本地做了一些修改，没有执行`commit`也没有`add`操作，使用`git status`可以看到红色字体提示 `modified: <file>  `\n   这时如果不想保存本地修改，即丢弃工作区修改，直接执行`git checkout -- <file>`即可（`git status`有提示）  \n2，如果已经执行了`add`还没有`commit`想回滚，可以执行`$ git reset HEAD readme.txt`将暂存区修改内容回退到工作区，如果还想撤回本地修改，执行步骤1即可  \n3，如果已经`commit`，想回滚到之前的某个版本  \n\t执行` $ git reset --hard HEAD^ ` //回退上个版本  \n\t在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。  \n\n**小结：**   \n场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。  \n场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD file`，就回到了场景1，第二步按场景1操作。  \n场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。\n\n## git 远程仓库\n\n### git 远程仓库基本操作\n以上所讲只是在一个本地仓库里管理文件历史，我们知道`git`是一个分布式的版本控制系统，即同一个`git`仓库可以分布在不同的服务器上，很庆幸`github`这个网站便可以提供免费的仓库托管服务。\n\n先在`github`上注册账号登陆后`Create a new repo`新建一个仓库，例如`learngit`，于是便在`github`上新建了一个空仓库  \n    `$ git remote add origin https://github.com/jiwenxing/learngit.git`  \n添加后，远程库的名字就是`origin`，这是`Git`默认的叫法，也可以改成别的，但是`origin`这个名字一看就知道是远程库。    \n\n执行`$ git push -u origin master`输入用户名和密码即可将本地库的内容推送到远程`github`仓库, 其中`-u`参数只在第一次提交时使用，表示将本地`master`分支和远程`master`分支相关联，再提交时只需执行  \n`    $ git push origin master `   \n如果报错让你先`fetch`，可以强制推送：  \n`$ git push -u origin master --force`\n\n**注意：**  \n`Git`支持多种协议，包括`ssh`和`https`，  \n`ssh`路径： `git@github.com:jiwenxing/learngit.git`   \n`https`路径： `https://github.com/jiwenxing/learngit.git`  \n通过`ssh`支持的原生`git`协议速度最快。但是在某些特定环境ssh端口被封掉时可以采用`https`，唯一不便的是每次提交都需要输入一下用户名和密码！\n\n### git 从远程仓库 clone\n    git clone https://github.com/h5bp/html5-boilerplate.git\n\n### git 分支管理\n\n`git`创建并切换到新分支 \n \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch dev  //创建新分支\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch\n      dev\n    * master   //*代表当前分支\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git checkout dev  //切换分支\n    Switched to branch 'dev'\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n    $ git branch\n    * dev\n      master\n\n下面我在`dev`分支下对文件`test.txt`添加一行内容后执行`add commit`操作后，再次切换到`master`分支，你会发现刚才做的修改没有了。 也就是说刚才的修改只是针对`dev`分支，对`master`分支没有影响。\n\n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n    $ git checkout master  //切回到主分支\n    Switched to branch 'master'\n    Your branch is up-to-date with 'origin/master'.\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git merge dev  //将dev分支合并到当前master主分支\n    Updating daf105e..b563da8\n    Fast-forward\n     test.txt | 3 ++-\n     1 file changed, 2 insertions(+), 1 deletion(-)\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch -d dev //此时可以删除dev分支\n    Deleted branch dev (was b563da8).\n    \n    jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n    $ git branch\n    * master\n\n可以看到上面我们将dev分支合并到了当前`master`分支后再去看`test.txt`文件，发现刚才做的修改又出现了，这时便可以放心大胆的删除`dev`分支了。\n\n**小结**\n\n- 查看分支：`git branch`\n- 创建分支：`git branch <name>`\n- 切换分支：`git checkout <name>`\n- 创建+切换分支：`git checkout -b <name>`\n- 合并某分支到当前分支：`git merge <name>`\n- 删除分支：`git branch -d <name>`\n\n### git 分支冲突\n    \n    $ git checkout -b feature1  //创建并切换到新分支，并对test文件做修改\n    fatal: A branch named 'feature1' already exists.\n    $ git add test.txt  \n    $ git commit -m \"conflict -and\"  //在新分支下提交更改\n     feature1 651c38a] conflict -and  \n     1 file changed, 1 insertion(+), 1 deletion(-)\n    $ git checkout master  //切回到master分支，对test文件做不同的更改\n    README.MD  \n    Switched to branch 'master'  \n    Your branch is up-to-date with 'origin/master'.  \n    $ git add test.txt  \n    $ git commit -m \"conflict -&\"  //在master下提交更改\n     master 0dc1bd3] conflict -&  \n     1 file changed, 1 insertion(+), 1 deletion(-)  \n    $ git merge feature1  //在master分支下合并feature1分支上的更改，显示冲突\n    CONFLICT (content): Merge conflict in test.txt  \n    Automatic merge failed; fix conflicts and then commit the result.\n\n在不同分支上对同一文件分别做了不同的更改，合并分支的时候就会报冲突，而这时`test.txt`文件的内容也变成了如下：\n\n    I am totoro~\n    who are you？\n    I am totoro~\n    <<<<<<< HEAD\n    Creating a new branch is quick & simple.\n    =======\n    Creating a new branch is quick AND simple.\n    >>>>>>> feature1\n\n`Git`用`<<<<<<<`，`=======`，`>>>>>>>`标记出不同分支的差异内容，`<<<<<<<`标记冲突开始，后面跟的是当前分支中的内容。HEAD指向当前分支末梢的提交。`=======`之后，`>>>>>>>`之前是要`merge`过来的另一条分支上的代码。`>>>>>>>`之后的`feature1`是该分支的名字。\n\n手动在文件中将差异内容做一下修改，再次`add`、`commit`即可解决冲突，完事还可以查看分支的合并情况：\n\n    $ git log --graph --pretty=oneline --abbrev-commit\n    7f9c092 conflict solved\n     \\\n      * 651c38a conflict -and\n      | 0dc1bd3 conflict -&\n     /\n      cfb3522 readme revise4\n      b563da8 branch test\n      daf105e readme revise3\n      002f01d revise2 readme.md\n      5697575 revise readme.md\n      28d49b7 add a pic\n      ca373c6 add two files\n\n\n**注意：**  \n合并分支指令`$ git merge feature1`默认使用的是`fast forward`模式，这样合并并不记录合并历史，而使用指令`$ git merge --no-ff -m \"merge with no-ff\" dev`则是使用普通模式合并代码，合并后有历史记录，建议采用后一种。\n\n### git 分支管理策略\n\n> 注：该部分内容参考自文章[《Git 分支管理详解》](http://www.oschina.net/question/31384_157479)\n\n团队开发中应该如何充分应用`git`的分支功能呢，通常一个项目较为规范的分支策略如下：\n\n- 主分支`master`：代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。  \n  ![](http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png)\n- 开发分支`dev`：进行日常开发工作，这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在`Master`分支上，对`Dev`分支进行\"合并\"。  \n  ![](http://static.oschina.net/uploads/img/201406/05112016_HYVm.png)  \n- 功能分支`feature`：开发某种特定功能，从`Dev`分支上面分出来的；开发完成后，要再并入`Dev`。\n  ![](http://static.oschina.net/uploads/img/201406/05112016_v2ve.png)\n- 预发布分支`release`：预发布分支，它是指发布正式版本之前（即合并到`Master`分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进`Dev`和`Master`分支。\n- `bug`分支`fixbug`：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行`bug`修补。修补`bug`分支是从`Master`分支上面分出来的。修补结束以后，再合并进`Master`和`Dev`分支。\n   ![](http://static.oschina.net/uploads/img/201406/05112016_PIf1.png)\n  \n## 使用`github`参与开源项目\n\n访问自己感兴趣的项目主页（例如`bootstrap`项目`https://github.com/twbs/bootstrap`）， 点右上角的`“Fork”`就在自己的账号下克隆了一个`bootstrap`仓库，然后，**从自己的账号下`clone`**：  \n\n    git clone https://github.com/jiwenxing/bootstrap.git\n\n**注意** 只有从自己的账号下`clone`仓库，才能推送修改。  \n如果你想修复`bootstrap`的一个`bug`，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。如果你希望`bootstrap`的官方库能接受你的修改，你就可以在`GitHub上`发起一个`pull request`。\n\n**小结：**  \n\n- 在`GitHub`上，可以任意`Fork`开源仓库；\n- 自己拥有`Fork`后的仓库的读写权限；\n- 可以推送`pull request`给官方仓库来贡献代码。\n\n## 结语\n虽然很久之前就开始用`github`，并在上面搭建了博客，但是从没用过其版本控制功能，很多东西也没有完全搞明白，希望在以后的工作中慢慢用起来，后面也会根据自己的实际应用进行更新。","slug":"git_map","published":1,"updated":"2017-02-20T06:32:54.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqta000c2sl1a1mldfn5","content":"<p>git 基本用法<br><a id=\"more\"></a></p>\n<h2 id=\"git-介绍\"><a href=\"#git-介绍\" class=\"headerlink\" title=\"git 介绍\"></a>git 介绍</h2><p><code>Git</code>是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。关于她的特点<a href=\"http://www.git-scm.com/\" target=\"_blank\" rel=\"external\"><code>Git</code>官网</a>是这么介绍的：   </p>\n<!-- more -->\n<blockquote>\n<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.  </p>\n</blockquote>\n<p><img src=\"https://github.com/jiwenxing/learngit/blob/master/aboutgit.png?raw=true\" alt=\"\"></p>\n<p>总之，对于开源项目来说，使用Git可以极大地提高了开发效率、扩大了开源项目的参与度、 增强了版本控制系统的安全性，选择Git已是大势所趋。</p>\n<p>以下为本人学习<code>git</code>过程中的一些练习和笔记，相关参考：<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\" target=\"_blank\" rel=\"external\">廖雪峰的Git教程</a></p>\n<h2 id=\"git-本地仓库常用操作\"><a href=\"#git-本地仓库常用操作\" class=\"headerlink\" title=\"git 本地仓库常用操作\"></a>git 本地仓库常用操作</h2><h3 id=\"git-创建本地仓库\"><a href=\"#git-创建本地仓库\" class=\"headerlink\" title=\"git 创建本地仓库\"></a>git 创建本地仓库</h3><pre><code>$ mkdir learngit  //创建文件夹  \n$ cd learngit  \n$ pwd   //查看当前目录  \n/Users/michael/learngit\n\n$ git init //将当前文件夹变成git仓库，init后目录下会多出.git文件（默认隐藏） 可以用ls -ah查看  \nInitialized empty Git repository in /Users/michael/learngit/.git/\n\n$ git log //显示从最近到最远的提交日志 如果出现end标记可以按q退出历史记录列表  \n$ git log --pretty=oneline\n\n$ git reset --hard HEAD^  //回退上个版本  \n</code></pre><p>在<code>Git</code>中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上<code>100</code>个版本写<code>100</code>个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>\n<h3 id=\"回退后又想恢复怎么办？\"><a href=\"#回退后又想恢复怎么办？\" class=\"headerlink\" title=\"回退后又想恢复怎么办？\"></a>回退后又想恢复怎么办？</h3><pre><code>$ git reset --hard commit_id //即可，但是怎么知道上次回滚的commit_id呢？  \n$ git reflog  \n289f53a HEAD@{0}: reset: moving to HEAD^  \nba423b7 HEAD@{1}: commit: add a line  \n289f53a HEAD@{2}: commit: add file test.txt  \n0aa4371 HEAD@{3}: commit: create new file  \n339d5bb HEAD@{4}: commit: add a line  \n906ce38 HEAD@{5}: commit (initial): add file readme.txt \n</code></pre><p><code>git reflog</code>可以查看命令历史，于是我们知道 <code>add a line</code> 的<code>commit_id</code>是<code>ba423b7</code></p>\n<h3 id=\"git-的撤销修改\"><a href=\"#git-的撤销修改\" class=\"headerlink\" title=\"git 的撤销修改\"></a>git 的撤销修改</h3><p>1，如果只是在本地做了一些修改，没有执行<code>commit</code>也没有<code>add</code>操作，使用<code>git status</code>可以看到红色字体提示 <code>modified: &lt;file&gt;</code><br>   这时如果不想保存本地修改，即丢弃工作区修改，直接执行<code>git checkout -- &lt;file&gt;</code>即可（<code>git status</code>有提示）<br>2，如果已经执行了<code>add</code>还没有<code>commit</code>想回滚，可以执行<code>$ git reset HEAD readme.txt</code>将暂存区修改内容回退到工作区，如果还想撤回本地修改，执行步骤1即可<br>3，如果已经<code>commit</code>，想回滚到之前的某个版本<br>    执行<code>$ git reset --hard HEAD^</code> //回退上个版本<br>    在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。  </p>\n<p><strong>小结：</strong><br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h2 id=\"git-远程仓库\"><a href=\"#git-远程仓库\" class=\"headerlink\" title=\"git 远程仓库\"></a>git 远程仓库</h2><h3 id=\"git-远程仓库基本操作\"><a href=\"#git-远程仓库基本操作\" class=\"headerlink\" title=\"git 远程仓库基本操作\"></a>git 远程仓库基本操作</h3><p>以上所讲只是在一个本地仓库里管理文件历史，我们知道<code>git</code>是一个分布式的版本控制系统，即同一个<code>git</code>仓库可以分布在不同的服务器上，很庆幸<code>github</code>这个网站便可以提供免费的仓库托管服务。</p>\n<p>先在<code>github</code>上注册账号登陆后<code>Create a new repo</code>新建一个仓库，例如<code>learngit</code>，于是便在<code>github</code>上新建了一个空仓库<br>    <code>$ git remote add origin https://github.com/jiwenxing/learngit.git</code><br>添加后，远程库的名字就是<code>origin</code>，这是<code>Git</code>默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。    </p>\n<p>执行<code>$ git push -u origin master</code>输入用户名和密码即可将本地库的内容推送到远程<code>github</code>仓库, 其中<code>-u</code>参数只在第一次提交时使用，表示将本地<code>master</code>分支和远程<code>master</code>分支相关联，再提交时只需执行<br><code>$ git push origin master</code><br>如果报错让你先<code>fetch</code>，可以强制推送：<br><code>$ git push -u origin master --force</code></p>\n<p><strong>注意：</strong><br><code>Git</code>支持多种协议，包括<code>ssh</code>和<code>https</code>，<br><code>ssh</code>路径： <code>git@github.com:jiwenxing/learngit.git</code><br><code>https</code>路径： <code>https://github.com/jiwenxing/learngit.git</code><br>通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。但是在某些特定环境ssh端口被封掉时可以采用<code>https</code>，唯一不便的是每次提交都需要输入一下用户名和密码！</p>\n<h3 id=\"git-从远程仓库-clone\"><a href=\"#git-从远程仓库-clone\" class=\"headerlink\" title=\"git 从远程仓库 clone\"></a>git 从远程仓库 clone</h3><pre><code>git clone https://github.com/h5bp/html5-boilerplate.git\n</code></pre><h3 id=\"git-分支管理\"><a href=\"#git-分支管理\" class=\"headerlink\" title=\"git 分支管理\"></a>git 分支管理</h3><p><code>git</code>创建并切换到新分支 </p>\n<pre><code>jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch dev  //创建新分支\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch\n  dev\n* master   //*代表当前分支\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git checkout dev  //切换分支\nSwitched to branch &apos;dev&apos;\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n$ git branch\n* dev\n  master\n</code></pre><p>下面我在<code>dev</code>分支下对文件<code>test.txt</code>添加一行内容后执行<code>add commit</code>操作后，再次切换到<code>master</code>分支，你会发现刚才做的修改没有了。 也就是说刚才的修改只是针对<code>dev</code>分支，对<code>master</code>分支没有影响。</p>\n<pre><code>jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n$ git checkout master  //切回到主分支\nSwitched to branch &apos;master&apos;\nYour branch is up-to-date with &apos;origin/master&apos;.\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git merge dev  //将dev分支合并到当前master主分支\nUpdating daf105e..b563da8\nFast-forward\n test.txt | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch -d dev //此时可以删除dev分支\nDeleted branch dev (was b563da8).\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch\n* master\n</code></pre><p>可以看到上面我们将dev分支合并到了当前<code>master</code>分支后再去看<code>test.txt</code>文件，发现刚才做的修改又出现了，这时便可以放心大胆的删除<code>dev</code>分支了。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li>查看分支：<code>git branch</code></li>\n<li>创建分支：<code>git branch &lt;name&gt;</code></li>\n<li>切换分支：<code>git checkout &lt;name&gt;</code></li>\n<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></li>\n<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li>\n<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>\n</ul>\n<h3 id=\"git-分支冲突\"><a href=\"#git-分支冲突\" class=\"headerlink\" title=\"git 分支冲突\"></a>git 分支冲突</h3><pre><code>$ git checkout -b feature1  //创建并切换到新分支，并对test文件做修改\nfatal: A branch named &apos;feature1&apos; already exists.\n$ git add test.txt  \n$ git commit -m &quot;conflict -and&quot;  //在新分支下提交更改\n feature1 651c38a] conflict -and  \n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git checkout master  //切回到master分支，对test文件做不同的更改\nREADME.MD  \nSwitched to branch &apos;master&apos;  \nYour branch is up-to-date with &apos;origin/master&apos;.  \n$ git add test.txt  \n$ git commit -m &quot;conflict -&amp;&quot;  //在master下提交更改\n master 0dc1bd3] conflict -&amp;  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n$ git merge feature1  //在master分支下合并feature1分支上的更改，显示冲突\nCONFLICT (content): Merge conflict in test.txt  \nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre><p>在不同分支上对同一文件分别做了不同的更改，合并分支的时候就会报冲突，而这时<code>test.txt</code>文件的内容也变成了如下：</p>\n<pre><code>I am totoro~\nwho are you？\nI am totoro~\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nCreating a new branch is quick &amp; simple.\n=======\nCreating a new branch is quick AND simple.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1\n</code></pre><p><code>Git</code>用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的差异内容，<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>标记冲突开始，后面跟的是当前分支中的内容。HEAD指向当前分支末梢的提交。<code>=======</code>之后，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之前是要<code>merge</code>过来的另一条分支上的代码。<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之后的<code>feature1</code>是该分支的名字。</p>\n<p>手动在文件中将差异内容做一下修改，再次<code>add</code>、<code>commit</code>即可解决冲突，完事还可以查看分支的合并情况：</p>\n<pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n7f9c092 conflict solved\n \\\n  * 651c38a conflict -and\n  | 0dc1bd3 conflict -&amp;\n /\n  cfb3522 readme revise4\n  b563da8 branch test\n  daf105e readme revise3\n  002f01d revise2 readme.md\n  5697575 revise readme.md\n  28d49b7 add a pic\n  ca373c6 add two files\n</code></pre><p><strong>注意：</strong><br>合并分支指令<code>$ git merge feature1</code>默认使用的是<code>fast forward</code>模式，这样合并并不记录合并历史，而使用指令<code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>则是使用普通模式合并代码，合并后有历史记录，建议采用后一种。</p>\n<h3 id=\"git-分支管理策略\"><a href=\"#git-分支管理策略\" class=\"headerlink\" title=\"git 分支管理策略\"></a>git 分支管理策略</h3><blockquote>\n<p>注：该部分内容参考自文章<a href=\"http://www.oschina.net/question/31384_157479\" target=\"_blank\" rel=\"external\">《Git 分支管理详解》</a></p>\n</blockquote>\n<p>团队开发中应该如何充分应用<code>git</code>的分支功能呢，通常一个项目较为规范的分支策略如下：</p>\n<ul>\n<li>主分支<code>master</code>：代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。<br><img src=\"http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png\" alt=\"\"></li>\n<li>开发分支<code>dev</code>：进行日常开发工作，这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在<code>Master</code>分支上，对<code>Dev</code>分支进行”合并”。<br><img src=\"http://static.oschina.net/uploads/img/201406/05112016_HYVm.png\" alt=\"\">  </li>\n<li>功能分支<code>feature</code>：开发某种特定功能，从<code>Dev</code>分支上面分出来的；开发完成后，要再并入<code>Dev</code>。<br><img src=\"http://static.oschina.net/uploads/img/201406/05112016_v2ve.png\" alt=\"\"></li>\n<li>预发布分支<code>release</code>：预发布分支，它是指发布正式版本之前（即合并到<code>Master</code>分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进<code>Dev</code>和<code>Master</code>分支。</li>\n<li><code>bug</code>分支<code>fixbug</code>：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行<code>bug</code>修补。修补<code>bug</code>分支是从<code>Master</code>分支上面分出来的。修补结束以后，再合并进<code>Master</code>和<code>Dev</code>分支。<br> <img src=\"http://static.oschina.net/uploads/img/201406/05112016_PIf1.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"使用github参与开源项目\"><a href=\"#使用github参与开源项目\" class=\"headerlink\" title=\"使用github参与开源项目\"></a>使用<code>github</code>参与开源项目</h2><p>访问自己感兴趣的项目主页（例如<code>bootstrap</code>项目<code>https://github.com/twbs/bootstrap</code>）， 点右上角的<code>“Fork”</code>就在自己的账号下克隆了一个<code>bootstrap</code>仓库，然后，<strong>从自己的账号下<code>clone</code></strong>：  </p>\n<pre><code>git clone https://github.com/jiwenxing/bootstrap.git\n</code></pre><p><strong>注意</strong> 只有从自己的账号下<code>clone</code>仓库，才能推送修改。<br>如果你想修复<code>bootstrap</code>的一个<code>bug</code>，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。如果你希望<code>bootstrap</code>的官方库能接受你的修改，你就可以在<code>GitHub上</code>发起一个<code>pull request</code>。</p>\n<p><strong>小结：</strong>  </p>\n<ul>\n<li>在<code>GitHub</code>上，可以任意<code>Fork</code>开源仓库；</li>\n<li>自己拥有<code>Fork</code>后的仓库的读写权限；</li>\n<li>可以推送<code>pull request</code>给官方仓库来贡献代码。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>虽然很久之前就开始用<code>github</code>，并在上面搭建了博客，但是从没用过其版本控制功能，很多东西也没有完全搞明白，希望在以后的工作中慢慢用起来，后面也会根据自己的实际应用进行更新。</p>\n","excerpt":"<p>git 基本用法<br>","more":"</p>\n<h2 id=\"git-介绍\"><a href=\"#git-介绍\" class=\"headerlink\" title=\"git 介绍\"></a>git 介绍</h2><p><code>Git</code>是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。关于她的特点<a href=\"http://www.git-scm.com/\"><code>Git</code>官网</a>是这么介绍的：   </p>\n<!-- more -->\n<blockquote>\n<p>Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.  </p>\n</blockquote>\n<p><img src=\"https://github.com/jiwenxing/learngit/blob/master/aboutgit.png?raw=true\" alt=\"\"></p>\n<p>总之，对于开源项目来说，使用Git可以极大地提高了开发效率、扩大了开源项目的参与度、 增强了版本控制系统的安全性，选择Git已是大势所趋。</p>\n<p>以下为本人学习<code>git</code>过程中的一些练习和笔记，相关参考：<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">廖雪峰的Git教程</a></p>\n<h2 id=\"git-本地仓库常用操作\"><a href=\"#git-本地仓库常用操作\" class=\"headerlink\" title=\"git 本地仓库常用操作\"></a>git 本地仓库常用操作</h2><h3 id=\"git-创建本地仓库\"><a href=\"#git-创建本地仓库\" class=\"headerlink\" title=\"git 创建本地仓库\"></a>git 创建本地仓库</h3><pre><code>$ mkdir learngit  //创建文件夹  \n$ cd learngit  \n$ pwd   //查看当前目录  \n/Users/michael/learngit\n\n$ git init //将当前文件夹变成git仓库，init后目录下会多出.git文件（默认隐藏） 可以用ls -ah查看  \nInitialized empty Git repository in /Users/michael/learngit/.git/\n\n$ git log //显示从最近到最远的提交日志 如果出现end标记可以按q退出历史记录列表  \n$ git log --pretty=oneline\n\n$ git reset --hard HEAD^  //回退上个版本  \n</code></pre><p>在<code>Git</code>中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code>，当然往上<code>100</code>个版本写<code>100</code>个<code>^</code>比较容易数不过来，所以写成<code>HEAD~100</code>。</p>\n<h3 id=\"回退后又想恢复怎么办？\"><a href=\"#回退后又想恢复怎么办？\" class=\"headerlink\" title=\"回退后又想恢复怎么办？\"></a>回退后又想恢复怎么办？</h3><pre><code>$ git reset --hard commit_id //即可，但是怎么知道上次回滚的commit_id呢？  \n$ git reflog  \n289f53a HEAD@{0}: reset: moving to HEAD^  \nba423b7 HEAD@{1}: commit: add a line  \n289f53a HEAD@{2}: commit: add file test.txt  \n0aa4371 HEAD@{3}: commit: create new file  \n339d5bb HEAD@{4}: commit: add a line  \n906ce38 HEAD@{5}: commit (initial): add file readme.txt \n</code></pre><p><code>git reflog</code>可以查看命令历史，于是我们知道 <code>add a line</code> 的<code>commit_id</code>是<code>ba423b7</code></p>\n<h3 id=\"git-的撤销修改\"><a href=\"#git-的撤销修改\" class=\"headerlink\" title=\"git 的撤销修改\"></a>git 的撤销修改</h3><p>1，如果只是在本地做了一些修改，没有执行<code>commit</code>也没有<code>add</code>操作，使用<code>git status</code>可以看到红色字体提示 <code>modified: &lt;file&gt;</code><br>   这时如果不想保存本地修改，即丢弃工作区修改，直接执行<code>git checkout -- &lt;file&gt;</code>即可（<code>git status</code>有提示）<br>2，如果已经执行了<code>add</code>还没有<code>commit</code>想回滚，可以执行<code>$ git reset HEAD readme.txt</code>将暂存区修改内容回退到工作区，如果还想撤回本地修改，执行步骤1即可<br>3，如果已经<code>commit</code>，想回滚到之前的某个版本<br>    执行<code>$ git reset --hard HEAD^</code> //回退上个版本<br>    在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。  </p>\n<p><strong>小结：</strong><br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。<br>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD file</code>，就回到了场景1，第二步按场景1操作。<br>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p>\n<h2 id=\"git-远程仓库\"><a href=\"#git-远程仓库\" class=\"headerlink\" title=\"git 远程仓库\"></a>git 远程仓库</h2><h3 id=\"git-远程仓库基本操作\"><a href=\"#git-远程仓库基本操作\" class=\"headerlink\" title=\"git 远程仓库基本操作\"></a>git 远程仓库基本操作</h3><p>以上所讲只是在一个本地仓库里管理文件历史，我们知道<code>git</code>是一个分布式的版本控制系统，即同一个<code>git</code>仓库可以分布在不同的服务器上，很庆幸<code>github</code>这个网站便可以提供免费的仓库托管服务。</p>\n<p>先在<code>github</code>上注册账号登陆后<code>Create a new repo</code>新建一个仓库，例如<code>learngit</code>，于是便在<code>github</code>上新建了一个空仓库<br>    <code>$ git remote add origin https://github.com/jiwenxing/learngit.git</code><br>添加后，远程库的名字就是<code>origin</code>，这是<code>Git</code>默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。    </p>\n<p>执行<code>$ git push -u origin master</code>输入用户名和密码即可将本地库的内容推送到远程<code>github</code>仓库, 其中<code>-u</code>参数只在第一次提交时使用，表示将本地<code>master</code>分支和远程<code>master</code>分支相关联，再提交时只需执行<br><code>$ git push origin master</code><br>如果报错让你先<code>fetch</code>，可以强制推送：<br><code>$ git push -u origin master --force</code></p>\n<p><strong>注意：</strong><br><code>Git</code>支持多种协议，包括<code>ssh</code>和<code>https</code>，<br><code>ssh</code>路径： <code>git@github.com:jiwenxing/learngit.git</code><br><code>https</code>路径： <code>https://github.com/jiwenxing/learngit.git</code><br>通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。但是在某些特定环境ssh端口被封掉时可以采用<code>https</code>，唯一不便的是每次提交都需要输入一下用户名和密码！</p>\n<h3 id=\"git-从远程仓库-clone\"><a href=\"#git-从远程仓库-clone\" class=\"headerlink\" title=\"git 从远程仓库 clone\"></a>git 从远程仓库 clone</h3><pre><code>git clone https://github.com/h5bp/html5-boilerplate.git\n</code></pre><h3 id=\"git-分支管理\"><a href=\"#git-分支管理\" class=\"headerlink\" title=\"git 分支管理\"></a>git 分支管理</h3><p><code>git</code>创建并切换到新分支 </p>\n<pre><code>jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch dev  //创建新分支\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch\n  dev\n* master   //*代表当前分支\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git checkout dev  //切换分支\nSwitched to branch &apos;dev&apos;\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n$ git branch\n* dev\n  master\n</code></pre><p>下面我在<code>dev</code>分支下对文件<code>test.txt</code>添加一行内容后执行<code>add commit</code>操作后，再次切换到<code>master</code>分支，你会发现刚才做的修改没有了。 也就是说刚才的修改只是针对<code>dev</code>分支，对<code>master</code>分支没有影响。</p>\n<pre><code>jiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (dev)\n$ git checkout master  //切回到主分支\nSwitched to branch &apos;master&apos;\nYour branch is up-to-date with &apos;origin/master&apos;.\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git merge dev  //将dev分支合并到当前master主分支\nUpdating daf105e..b563da8\nFast-forward\n test.txt | 3 ++-\n 1 file changed, 2 insertions(+), 1 deletion(-)\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch -d dev //此时可以删除dev分支\nDeleted branch dev (was b563da8).\n\njiwenxing@BJPP-ZHANGQQ3 /d/git/learngit (master)\n$ git branch\n* master\n</code></pre><p>可以看到上面我们将dev分支合并到了当前<code>master</code>分支后再去看<code>test.txt</code>文件，发现刚才做的修改又出现了，这时便可以放心大胆的删除<code>dev</code>分支了。</p>\n<p><strong>小结</strong></p>\n<ul>\n<li>查看分支：<code>git branch</code></li>\n<li>创建分支：<code>git branch &lt;name&gt;</code></li>\n<li>切换分支：<code>git checkout &lt;name&gt;</code></li>\n<li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></li>\n<li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></li>\n<li>删除分支：<code>git branch -d &lt;name&gt;</code></li>\n</ul>\n<h3 id=\"git-分支冲突\"><a href=\"#git-分支冲突\" class=\"headerlink\" title=\"git 分支冲突\"></a>git 分支冲突</h3><pre><code>$ git checkout -b feature1  //创建并切换到新分支，并对test文件做修改\nfatal: A branch named &apos;feature1&apos; already exists.\n$ git add test.txt  \n$ git commit -m &quot;conflict -and&quot;  //在新分支下提交更改\n feature1 651c38a] conflict -and  \n 1 file changed, 1 insertion(+), 1 deletion(-)\n$ git checkout master  //切回到master分支，对test文件做不同的更改\nREADME.MD  \nSwitched to branch &apos;master&apos;  \nYour branch is up-to-date with &apos;origin/master&apos;.  \n$ git add test.txt  \n$ git commit -m &quot;conflict -&amp;&quot;  //在master下提交更改\n master 0dc1bd3] conflict -&amp;  \n 1 file changed, 1 insertion(+), 1 deletion(-)  \n$ git merge feature1  //在master分支下合并feature1分支上的更改，显示冲突\nCONFLICT (content): Merge conflict in test.txt  \nAutomatic merge failed; fix conflicts and then commit the result.\n</code></pre><p>在不同分支上对同一文件分别做了不同的更改，合并分支的时候就会报冲突，而这时<code>test.txt</code>文件的内容也变成了如下：</p>\n<pre><code>I am totoro~\nwho are you？\nI am totoro~\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nCreating a new branch is quick &amp; simple.\n=======\nCreating a new branch is quick AND simple.\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1\n</code></pre><p><code>Git</code>用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的差异内容，<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>标记冲突开始，后面跟的是当前分支中的内容。HEAD指向当前分支末梢的提交。<code>=======</code>之后，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之前是要<code>merge</code>过来的另一条分支上的代码。<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>之后的<code>feature1</code>是该分支的名字。</p>\n<p>手动在文件中将差异内容做一下修改，再次<code>add</code>、<code>commit</code>即可解决冲突，完事还可以查看分支的合并情况：</p>\n<pre><code>$ git log --graph --pretty=oneline --abbrev-commit\n7f9c092 conflict solved\n \\\n  * 651c38a conflict -and\n  | 0dc1bd3 conflict -&amp;\n /\n  cfb3522 readme revise4\n  b563da8 branch test\n  daf105e readme revise3\n  002f01d revise2 readme.md\n  5697575 revise readme.md\n  28d49b7 add a pic\n  ca373c6 add two files\n</code></pre><p><strong>注意：</strong><br>合并分支指令<code>$ git merge feature1</code>默认使用的是<code>fast forward</code>模式，这样合并并不记录合并历史，而使用指令<code>$ git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>则是使用普通模式合并代码，合并后有历史记录，建议采用后一种。</p>\n<h3 id=\"git-分支管理策略\"><a href=\"#git-分支管理策略\" class=\"headerlink\" title=\"git 分支管理策略\"></a>git 分支管理策略</h3><blockquote>\n<p>注：该部分内容参考自文章<a href=\"http://www.oschina.net/question/31384_157479\">《Git 分支管理详解》</a></p>\n</blockquote>\n<p>团队开发中应该如何充分应用<code>git</code>的分支功能呢，通常一个项目较为规范的分支策略如下：</p>\n<ul>\n<li>主分支<code>master</code>：代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。<br><img src=\"http://static.oschina.net/uploads/img/201406/05112016_Jfp8.png\" alt=\"\"></li>\n<li>开发分支<code>dev</code>：进行日常开发工作，这个分支可以用来生成代码的最新代码版本。如果想正式对外发布，就在<code>Master</code>分支上，对<code>Dev</code>分支进行”合并”。<br><img src=\"http://static.oschina.net/uploads/img/201406/05112016_HYVm.png\" alt=\"\">  </li>\n<li>功能分支<code>feature</code>：开发某种特定功能，从<code>Dev</code>分支上面分出来的；开发完成后，要再并入<code>Dev</code>。<br><img src=\"http://static.oschina.net/uploads/img/201406/05112016_v2ve.png\" alt=\"\"></li>\n<li>预发布分支<code>release</code>：预发布分支，它是指发布正式版本之前（即合并到<code>Master</code>分支之前），我们可能需要有一个预发布的版本进行测试。预发布分支是从Develop分支上面 分出来的，预发布结束以后，必须合并进<code>Dev</code>和<code>Master</code>分支。</li>\n<li><code>bug</code>分支<code>fixbug</code>：软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行<code>bug</code>修补。修补<code>bug</code>分支是从<code>Master</code>分支上面分出来的。修补结束以后，再合并进<code>Master</code>和<code>Dev</code>分支。<br> <img src=\"http://static.oschina.net/uploads/img/201406/05112016_PIf1.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"使用github参与开源项目\"><a href=\"#使用github参与开源项目\" class=\"headerlink\" title=\"使用github参与开源项目\"></a>使用<code>github</code>参与开源项目</h2><p>访问自己感兴趣的项目主页（例如<code>bootstrap</code>项目<code>https://github.com/twbs/bootstrap</code>）， 点右上角的<code>“Fork”</code>就在自己的账号下克隆了一个<code>bootstrap</code>仓库，然后，<strong>从自己的账号下<code>clone</code></strong>：  </p>\n<pre><code>git clone https://github.com/jiwenxing/bootstrap.git\n</code></pre><p><strong>注意</strong> 只有从自己的账号下<code>clone</code>仓库，才能推送修改。<br>如果你想修复<code>bootstrap</code>的一个<code>bug</code>，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。如果你希望<code>bootstrap</code>的官方库能接受你的修改，你就可以在<code>GitHub上</code>发起一个<code>pull request</code>。</p>\n<p><strong>小结：</strong>  </p>\n<ul>\n<li>在<code>GitHub</code>上，可以任意<code>Fork</code>开源仓库；</li>\n<li>自己拥有<code>Fork</code>后的仓库的读写权限；</li>\n<li>可以推送<code>pull request</code>给官方仓库来贡献代码。</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>虽然很久之前就开始用<code>github</code>，并在上面搭建了博客，但是从没用过其版本控制功能，很多东西也没有完全搞明白，希望在以后的工作中慢慢用起来，后面也会根据自己的实际应用进行更新。</p>"},{"title":"heroku","date":"2016-10-12T01:45:34.000Z","_content":"\nHeroku 免费云空间\n\n<!-- more -->\n-----\n\n\n## 准备\n    必须要用git\n## 注册账户\n[hero官网](https://www.heroku.com)\n\n\n\n\n## 安装Heroku Toolbelt\n[Heroku Toolbelt](https://toolbelt.heroku.com/)\n\n  Heroku Toolbelt是用于创建、管理Heroku上apps的命令行工具\n\n**heroku** 的命令行客户端将被安装到`/usr/local/heroku`，同时，``/usr/local/heroku/bin``将被添加到你的PATH环境变量\n\n下载并安装完成后，在 shell 中输入`heroku login`，用创建`heroku`账号的`email`和`密码`登陆\n```\n    $ heroku login\n    Enter your Heroku credentials.\n    Email:            adam@example.com\n    Password (typing will be hidden):\n    Authentication successful.\n\n```\n*把你的 SSH 公钥上传到 Heroku，这一点很重要,上传后才能使用 git push 命令。正常情况下,login 命令会自动创建并上传 SSH 公钥。*\n\n## 上传应用\n>在工程的根目录下新建一个 **Procfile** 文件，添加如下内容：\n\n```\nweb: node app.js\n```\n\n- 到应用面板页勾选 **web node app.js** ，然后点击 **Apply Changes** 启动应用。\n\n```\n$ git init\n$ git add .\n$ git commit -m \"init\"\n$ git remote add heroku git@heroku.com:yourAppName.git\n```\n>在 push 到 heroku 服务器之前，我们还需要做一个工作。由于我国某些政策的原因，我们需到**~/.ssh/** 目录下，新建一个 **config** 文件，内容如下：\n\n```\ncd ~/.ssh/\nvi config\n```\n```\nHost heroku.com\nUser yourName\nHostname 107.21.95.3\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nport 22\n```\n```\n$ git push heroku master\n```\n\n## 成功","source":"_posts/heroku.md","raw":"---\ntitle: heroku\ndate: 2016-10-12 09:45:34\ncategories: Tools\ntags: [Tools, 筆記,heroku]\n---\n\nHeroku 免费云空间\n\n<!-- more -->\n-----\n\n\n## 准备\n    必须要用git\n## 注册账户\n[hero官网](https://www.heroku.com)\n\n\n\n\n## 安装Heroku Toolbelt\n[Heroku Toolbelt](https://toolbelt.heroku.com/)\n\n  Heroku Toolbelt是用于创建、管理Heroku上apps的命令行工具\n\n**heroku** 的命令行客户端将被安装到`/usr/local/heroku`，同时，``/usr/local/heroku/bin``将被添加到你的PATH环境变量\n\n下载并安装完成后，在 shell 中输入`heroku login`，用创建`heroku`账号的`email`和`密码`登陆\n```\n    $ heroku login\n    Enter your Heroku credentials.\n    Email:            adam@example.com\n    Password (typing will be hidden):\n    Authentication successful.\n\n```\n*把你的 SSH 公钥上传到 Heroku，这一点很重要,上传后才能使用 git push 命令。正常情况下,login 命令会自动创建并上传 SSH 公钥。*\n\n## 上传应用\n>在工程的根目录下新建一个 **Procfile** 文件，添加如下内容：\n\n```\nweb: node app.js\n```\n\n- 到应用面板页勾选 **web node app.js** ，然后点击 **Apply Changes** 启动应用。\n\n```\n$ git init\n$ git add .\n$ git commit -m \"init\"\n$ git remote add heroku git@heroku.com:yourAppName.git\n```\n>在 push 到 heroku 服务器之前，我们还需要做一个工作。由于我国某些政策的原因，我们需到**~/.ssh/** 目录下，新建一个 **config** 文件，内容如下：\n\n```\ncd ~/.ssh/\nvi config\n```\n```\nHost heroku.com\nUser yourName\nHostname 107.21.95.3\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nport 22\n```\n```\n$ git push heroku master\n```\n\n## 成功","slug":"heroku","published":1,"updated":"2017-02-20T03:10:57.118Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqto000e2sl1xr25yohw","content":"<p>Heroku 免费云空间</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><a id=\"more\"></a></h2><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><pre><code>必须要用git\n</code></pre><h2 id=\"注册账户\"><a href=\"#注册账户\" class=\"headerlink\" title=\"注册账户\"></a>注册账户</h2><p><a href=\"https://www.heroku.com\" target=\"_blank\" rel=\"external\">hero官网</a></p>\n<h2 id=\"安装Heroku-Toolbelt\"><a href=\"#安装Heroku-Toolbelt\" class=\"headerlink\" title=\"安装Heroku Toolbelt\"></a>安装Heroku Toolbelt</h2><p><a href=\"https://toolbelt.heroku.com/\" target=\"_blank\" rel=\"external\">Heroku Toolbelt</a></p>\n<p>  Heroku Toolbelt是用于创建、管理Heroku上apps的命令行工具</p>\n<p><strong>heroku</strong> 的命令行客户端将被安装到<code>/usr/local/heroku</code>，同时，<code>/usr/local/heroku/bin</code>将被添加到你的PATH环境变量</p>\n<p>下载并安装完成后，在 shell 中输入<code>heroku login</code>，用创建<code>heroku</code>账号的<code>email</code>和<code>密码</code>登陆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ heroku login</div><div class=\"line\">Enter your Heroku credentials.</div><div class=\"line\">Email:            adam@example.com</div><div class=\"line\">Password (typing will be hidden):</div><div class=\"line\">Authentication successful.</div></pre></td></tr></table></figure></p>\n<p><em>把你的 SSH 公钥上传到 Heroku，这一点很重要,上传后才能使用 git push 命令。正常情况下,login 命令会自动创建并上传 SSH 公钥。</em></p>\n<h2 id=\"上传应用\"><a href=\"#上传应用\" class=\"headerlink\" title=\"上传应用\"></a>上传应用</h2><blockquote>\n<p>在工程的根目录下新建一个 <strong>Procfile</strong> 文件，添加如下内容：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">web: node app.js</div></pre></td></tr></table></figure>\n<ul>\n<li>到应用面板页勾选 <strong>web node app.js</strong> ，然后点击 <strong>Apply Changes</strong> 启动应用。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &quot;init&quot;</div><div class=\"line\">$ git remote add heroku git@heroku.com:yourAppName.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在 push 到 heroku 服务器之前，我们还需要做一个工作。由于我国某些政策的原因，我们需到<strong>~/.ssh/</strong> 目录下，新建一个 <strong>config</strong> 文件，内容如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.ssh/</div><div class=\"line\">vi config</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host heroku.com</div><div class=\"line\">User yourName</div><div class=\"line\">Hostname 107.21.95.3</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">port 22</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push heroku master</div></pre></td></tr></table></figure>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2>","excerpt":"<p>Heroku 免费云空间</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a>","more":"</h2><h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><pre><code>必须要用git\n</code></pre><h2 id=\"注册账户\"><a href=\"#注册账户\" class=\"headerlink\" title=\"注册账户\"></a>注册账户</h2><p><a href=\"https://www.heroku.com\">hero官网</a></p>\n<h2 id=\"安装Heroku-Toolbelt\"><a href=\"#安装Heroku-Toolbelt\" class=\"headerlink\" title=\"安装Heroku Toolbelt\"></a>安装Heroku Toolbelt</h2><p><a href=\"https://toolbelt.heroku.com/\">Heroku Toolbelt</a></p>\n<p>  Heroku Toolbelt是用于创建、管理Heroku上apps的命令行工具</p>\n<p><strong>heroku</strong> 的命令行客户端将被安装到<code>/usr/local/heroku</code>，同时，<code>/usr/local/heroku/bin</code>将被添加到你的PATH环境变量</p>\n<p>下载并安装完成后，在 shell 中输入<code>heroku login</code>，用创建<code>heroku</code>账号的<code>email</code>和<code>密码</code>登陆<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ heroku login</div><div class=\"line\">Enter your Heroku credentials.</div><div class=\"line\">Email:            adam@example.com</div><div class=\"line\">Password (typing will be hidden):</div><div class=\"line\">Authentication successful.</div></pre></td></tr></table></figure></p>\n<p><em>把你的 SSH 公钥上传到 Heroku，这一点很重要,上传后才能使用 git push 命令。正常情况下,login 命令会自动创建并上传 SSH 公钥。</em></p>\n<h2 id=\"上传应用\"><a href=\"#上传应用\" class=\"headerlink\" title=\"上传应用\"></a>上传应用</h2><blockquote>\n<p>在工程的根目录下新建一个 <strong>Procfile</strong> 文件，添加如下内容：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">web: node app.js</div></pre></td></tr></table></figure>\n<ul>\n<li>到应用面板页勾选 <strong>web node app.js</strong> ，然后点击 <strong>Apply Changes</strong> 启动应用。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git init</div><div class=\"line\">$ git add .</div><div class=\"line\">$ git commit -m &quot;init&quot;</div><div class=\"line\">$ git remote add heroku git@heroku.com:yourAppName.git</div></pre></td></tr></table></figure>\n<blockquote>\n<p>在 push 到 heroku 服务器之前，我们还需要做一个工作。由于我国某些政策的原因，我们需到<strong>~/.ssh/</strong> 目录下，新建一个 <strong>config</strong> 文件，内容如下：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/.ssh/</div><div class=\"line\">vi config</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host heroku.com</div><div class=\"line\">User yourName</div><div class=\"line\">Hostname 107.21.95.3</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">port 22</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git push heroku master</div></pre></td></tr></table></figure>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2>"},{"title":"js判断APP是否安装","date":"2017-02-28T02:28:03.000Z","_content":"\njs判断移动端是否安装某款app的方法\n\n<!-- more -->\n\n\n\n```\n\t< script language=\"javascript\">\n if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n  var loadDateTime = new Date();\n  window.setTimeout(function() {\n   var timeOutDateTime = new Date();\n   if (timeOutDateTime - loadDateTime < 5000) {\n    window.location = \"要跳转的页面URL\";\n   } else {\n    window.close();\n   }\n  },\n  25);\n  window.location = \" apps custom url schemes \";\n } else if (navigator.userAgent.match(/android/i)) {\n  var state = null;\n  try {\n   state = window.open(\"apps custom url schemes \", '_blank');\n  } catch(e) {}\n  if (state) {\n   window.close();\n  } else {\n   window.location = \"要跳转的页面URL\";\n  }\n }\n  <  /script>\n\n```\n\napps custom url schemes 是什么呢？\n\n其实就是你与APP约定的一个协议URL，你的IOS同事或Android同事在写程序的时候会设置一个URL Scheme， 例如设置： URL Scheme ：app 然后其他的程序就可以通过URLString ＝ app:// 调用该应用。 还可以传参数，如：\n\napp://reaction/?uid=1\n\n原理：500ms内，本机有应用程序能解析这个协议并打开程序，调用该应用；如果本机没有应用程序能解析该协议或者500ms内没有打开这个程序，则执行setTimeout里面的function，就是跳转到你想跳转的页面。 \n\n\n","source":"_posts/js判断APP是否安装.md","raw":"---\ntitle: js判断APP是否安装\ndate: 2017-02-28 10:28:03\ncategories: JS\ntags: [JS, 筆記,js判断APP是否安装]\n---\n\njs判断移动端是否安装某款app的方法\n\n<!-- more -->\n\n\n\n```\n\t< script language=\"javascript\">\n if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) {\n  var loadDateTime = new Date();\n  window.setTimeout(function() {\n   var timeOutDateTime = new Date();\n   if (timeOutDateTime - loadDateTime < 5000) {\n    window.location = \"要跳转的页面URL\";\n   } else {\n    window.close();\n   }\n  },\n  25);\n  window.location = \" apps custom url schemes \";\n } else if (navigator.userAgent.match(/android/i)) {\n  var state = null;\n  try {\n   state = window.open(\"apps custom url schemes \", '_blank');\n  } catch(e) {}\n  if (state) {\n   window.close();\n  } else {\n   window.location = \"要跳转的页面URL\";\n  }\n }\n  <  /script>\n\n```\n\napps custom url schemes 是什么呢？\n\n其实就是你与APP约定的一个协议URL，你的IOS同事或Android同事在写程序的时候会设置一个URL Scheme， 例如设置： URL Scheme ：app 然后其他的程序就可以通过URLString ＝ app:// 调用该应用。 还可以传参数，如：\n\napp://reaction/?uid=1\n\n原理：500ms内，本机有应用程序能解析这个协议并打开程序，调用该应用；如果本机没有应用程序能解析该协议或者500ms内没有打开这个程序，则执行setTimeout里面的function，就是跳转到你想跳转的页面。 \n\n\n","slug":"js判断APP是否安装","published":1,"updated":"2017-02-28T02:29:12.616Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqts000h2sl1ie3gab0c","content":"<p>js判断移动端是否安装某款app的方法</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt; script language=&quot;javascript&quot;&gt;</div><div class=\"line\">if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) &#123;</div><div class=\"line\"> var loadDateTime = new Date();</div><div class=\"line\"> window.setTimeout(function() &#123;</div><div class=\"line\">  var timeOutDateTime = new Date();</div><div class=\"line\">  if (timeOutDateTime - loadDateTime &lt; 5000) &#123;</div><div class=\"line\">   window.location = &quot;要跳转的页面URL&quot;;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">   window.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;,</div><div class=\"line\"> 25);</div><div class=\"line\"> window.location = &quot; apps custom url schemes &quot;;</div><div class=\"line\">&#125; else if (navigator.userAgent.match(/android/i)) &#123;</div><div class=\"line\"> var state = null;</div><div class=\"line\"> try &#123;</div><div class=\"line\">  state = window.open(&quot;apps custom url schemes &quot;, &apos;_blank&apos;);</div><div class=\"line\"> &#125; catch(e) &#123;&#125;</div><div class=\"line\"> if (state) &#123;</div><div class=\"line\">  window.close();</div><div class=\"line\"> &#125; else &#123;</div><div class=\"line\">  window.location = &quot;要跳转的页面URL&quot;;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> &lt;  /script&gt;</div></pre></td></tr></table></figure>\n<p>apps custom url schemes 是什么呢？</p>\n<p>其实就是你与APP约定的一个协议URL，你的IOS同事或Android同事在写程序的时候会设置一个URL Scheme， 例如设置： URL Scheme ：app 然后其他的程序就可以通过URLString ＝ app:// 调用该应用。 还可以传参数，如：</p>\n<p>app://reaction/?uid=1</p>\n<p>原理：500ms内，本机有应用程序能解析这个协议并打开程序，调用该应用；如果本机没有应用程序能解析该协议或者500ms内没有打开这个程序，则执行setTimeout里面的function，就是跳转到你想跳转的页面。 </p>\n","excerpt":"<p>js判断移动端是否安装某款app的方法</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt; script language=&quot;javascript&quot;&gt;</div><div class=\"line\">if (navigator.userAgent.match(/(iPhone|iPod|iPad);?/i)) &#123;</div><div class=\"line\"> var loadDateTime = new Date();</div><div class=\"line\"> window.setTimeout(function() &#123;</div><div class=\"line\">  var timeOutDateTime = new Date();</div><div class=\"line\">  if (timeOutDateTime - loadDateTime &lt; 5000) &#123;</div><div class=\"line\">   window.location = &quot;要跳转的页面URL&quot;;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">   window.close();</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;,</div><div class=\"line\"> 25);</div><div class=\"line\"> window.location = &quot; apps custom url schemes &quot;;</div><div class=\"line\">&#125; else if (navigator.userAgent.match(/android/i)) &#123;</div><div class=\"line\"> var state = null;</div><div class=\"line\"> try &#123;</div><div class=\"line\">  state = window.open(&quot;apps custom url schemes &quot;, &apos;_blank&apos;);</div><div class=\"line\"> &#125; catch(e) &#123;&#125;</div><div class=\"line\"> if (state) &#123;</div><div class=\"line\">  window.close();</div><div class=\"line\"> &#125; else &#123;</div><div class=\"line\">  window.location = &quot;要跳转的页面URL&quot;;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> &lt;  /script&gt;</div></pre></td></tr></table></figure>\n<p>apps custom url schemes 是什么呢？</p>\n<p>其实就是你与APP约定的一个协议URL，你的IOS同事或Android同事在写程序的时候会设置一个URL Scheme， 例如设置： URL Scheme ：app 然后其他的程序就可以通过URLString ＝ app:// 调用该应用。 还可以传参数，如：</p>\n<p>app://reaction/?uid=1</p>\n<p>原理：500ms内，本机有应用程序能解析这个协议并打开程序，调用该应用；如果本机没有应用程序能解析该协议或者500ms内没有打开这个程序，则执行setTimeout里面的function，就是跳转到你想跳转的页面。 </p>"},{"title":"markdown 学习笔记","date":"2016-09-28T08:21:57.000Z","_content":"使用 Cmd Markdown 编辑阅读器\n\n------\n<!-- more -->\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n  \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown 学习笔记\ndate: 2016-09-28 16:21:57\ncategories: Tools\ntags: [Tools, 筆記,markdown]\n---\n使用 Cmd Markdown 编辑阅读器\n\n------\n<!-- more -->\n\n我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，**Cmd Markdown** 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：\n\n> * 整理知识，学习笔记\n> * 发布日记，杂文，所见所想\n> * 撰写发布技术文稿（代码支持）\n> * 撰写发布学术论文（LaTeX 公式支持）\n\n![cmd-markdown-logo](https://www.zybuluo.com/static/img/logo.png)\n\n除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：\n\n### [Windows/Mac/Linux 全平台客户端](https://www.zybuluo.com/cmd/)\n\n> 请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> **新文稿** 或者使用快捷键 `Ctrl+Alt+N`。\n\n------\n\n## 什么是 Markdown\n\nMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，**粗体** 或者 *斜体* 某些文字，更棒的是，它还可以\n\n### 1. 制作一份待办事宜 [Todo 列表](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表)\n\n- [ ] 支持以 PDF 格式导出文稿\n- [ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率\n- [x] 新增 Todo 列表功能\n- [x] 修复 LaTex 公式渲染问题\n- [x] 新增 LaTex 公式编号功能\n\n### 2. 书写一个质能守恒公式[^LaTeX]\n\n$$E=mc^2$$\n\n### 3. 高亮一段代码[^code]\n\n```python\n@requires_authorization\nclass SomeClass:\n    pass\n\nif __name__ == '__main__':\n    # A comment\n    print 'hello world'\n```\n\n### 4. 高效绘制 [流程图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图)\n\n```flow\nst=>start: Start\nop=>operation: Your Operation\ncond=>condition: Yes or No?\ne=>end\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n\n### 5. 高效绘制 [序列图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图)\n\n```seq\nAlice->Bob: Hello Bob, how are you?\nNote right of Bob: Bob thinks\nBob-->Alice: I am good thanks!\n```\n\n### 6. 高效绘制 [甘特图](https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图)\n\n```gantt\n    title 项目开发流程\n    section 项目确定\n        需求分析       :a1, 2016-06-22, 3d\n        可行性报告     :after a1, 5d\n        概念验证       : 5d\n    section 项目实施\n        概要设计      :2016-07-05  , 5d\n        详细设计      :2016-07-08, 10d\n        编码          :2016-07-15, 10d\n        测试          :2016-07-22, 5d\n    section 发布验收\n        发布: 2d\n        验收: 3d\n```\n\n### 7. 绘制表格\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机     | \\$1600 |   5     |\n| 手机        |   \\$12   |   12   |\n| 管线        |    \\$1    |  234  |\n\n### 8. 更详细语法说明\n\n想要查看更详细的语法说明，可以参考我们准备的 [Cmd Markdown 简明语法手册][1]，进阶用户可以参考 [Cmd Markdown 高阶语法手册][2] 了解更多高级功能。\n\n总而言之，不同于其它 *所见即所得* 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。**Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。** 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。\n\n---\n\n## 什么是 Cmd Markdown\n\n您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 **编辑/发布/阅读** Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。\n\n### 1. 实时同步预览\n\n我们将 Cmd Markdown 的主界面一分为二，左边为**编辑区**，右边为**预览区**，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！\n\n### 2. 编辑工具栏\n\n也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 **编辑区** 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。\n\n![tool-editor](https://www.zybuluo.com/static/img/toolbar-editor.png)\n\n### 3. 编辑模式\n\n完全心无旁骛的方式编辑文字：点击 **编辑工具栏** 最右侧的拉伸按钮或者按下 `Ctrl + M`，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！\n\n### 4. 实时的云端文稿\n\n为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 **编辑工具栏** 的最右侧提示 `已保存` 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。\n\n### 5. 离线模式\n\n在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。\n\n### 6. 管理工具栏\n\n为了便于管理您的文稿，在 **预览区** 的顶部放置了如下所示的 **管理工具栏**：\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-manager.jpg)\n\n通过管理工具栏可以：\n\n<i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享\n<i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿\n<i class=\"icon-trash\"></i> 删除：删除当前的文稿\n<i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地\n<i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作\n<i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式\n\n### 7. 阅读工具栏\n\n![tool-manager](https://www.zybuluo.com/static/img/toolbar-reader.jpg)\n\n通过 **预览区** 右上角的 **阅读工具栏**，可以查看当前文稿的目录并增强阅读体验。\n\n工具栏上的五个图标依次为：\n\n<i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落\n<i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置\n<i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 **黑色主题**，超炫！\n<i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验\n<i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境\n\n### 8. 阅读模式\n\n在 **阅读工具栏** 点击 <i class=\"icon-desktop\"></i> 或者按下 `Ctrl+Alt+M` 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。\n\n### 9. 标签、分类和搜索\n\n在编辑区任意行首位置输入以下格式的文字可以标签当前文档：\n\n标签： 未分类\n\n标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：\n\n![file-list](https://www.zybuluo.com/static/img/file-list.png)\n\n### 10. 文稿发布和分享\n\n在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！\n\n------\n\n再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！\n\n  \n\n[^LaTeX]: 支持 **LaTeX** 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 [MathJax][4] 参考更多使用方法。\n\n[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，**四十一**种主流编程语言。\n\n[1]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\n[2]: https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\n[3]: http://weibo.com/ghosert\n[4]: http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\n\n","slug":"markdown","published":1,"updated":"2017-02-20T06:24:11.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqtu000j2sl1rpi8t43w","content":"<p>使用 Cmd Markdown 编辑阅读器</p>\n<hr>\n<a id=\"more\"></a>\n<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\" target=\"_blank\" rel=\"external\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\" target=\"_blank\" rel=\"external\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\" target=\"_blank\" rel=\"external\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\" target=\"_blank\" rel=\"external\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\" target=\"_blank\" rel=\"external\">甘特图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\" target=\"_blank\" rel=\"external\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\" target=\"_blank\" rel=\"external\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\" target=\"_blank\" rel=\"external\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>\n","excerpt":"<p>使用 Cmd Markdown 编辑阅读器</p>\n<hr>","more":"<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>\n<blockquote>\n<ul>\n<li>整理知识，学习笔记</li>\n<li>发布日记，杂文，所见所想</li>\n<li>撰写发布技术文稿（代码支持）</li>\n<li>撰写发布学术论文（LaTeX 公式支持）</li>\n</ul>\n</blockquote>\n<p><img src=\"https://www.zybuluo.com/static/img/logo.png\" alt=\"cmd-markdown-logo\"></p>\n<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>\n<h3 id=\"Windows-Mac-Linux-全平台客户端\"><a href=\"#Windows-Mac-Linux-全平台客户端\" class=\"headerlink\" title=\"Windows/Mac/Linux 全平台客户端\"></a><a href=\"https://www.zybuluo.com/cmd/\">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>\n<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class=\"icon-file\"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>\n</blockquote>\n<hr>\n<h2 id=\"什么是-Markdown\"><a href=\"#什么是-Markdown\" class=\"headerlink\" title=\"什么是 Markdown\"></a>什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>\n<h3 id=\"1-制作一份待办事宜-Todo-列表\"><a href=\"#1-制作一份待办事宜-Todo-列表\" class=\"headerlink\" title=\"1. 制作一份待办事宜 Todo 列表\"></a>1. 制作一份待办事宜 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表\">Todo 列表</a></h3><ul>\n<li>[ ] 支持以 PDF 格式导出文稿</li>\n<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>\n<li>[x] 新增 Todo 列表功能</li>\n<li>[x] 修复 LaTex 公式渲染问题</li>\n<li>[x] 新增 LaTex 公式编号功能</li>\n</ul>\n<h3 id=\"2-书写一个质能守恒公式-LaTeX\"><a href=\"#2-书写一个质能守恒公式-LaTeX\" class=\"headerlink\" title=\"2. 书写一个质能守恒公式[^LaTeX]\"></a>2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>\n<h3 id=\"3-高亮一段代码-code\"><a href=\"#3-高亮一段代码-code\" class=\"headerlink\" title=\"3. 高亮一段代码[^code]\"></a>3. 高亮一段代码[^code]</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@requires_authorization</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>:</span></div><div class=\"line\">    <span class=\"keyword\">pass</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    <span class=\"comment\"># A comment</span></div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div></pre></td></tr></table></figure>\n<h3 id=\"4-高效绘制-流程图\"><a href=\"#4-高效绘制-流程图\" class=\"headerlink\" title=\"4. 高效绘制 流程图\"></a>4. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图\">流程图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: Start</div><div class=\"line\">op=&gt;operation: Your Operation</div><div class=\"line\">cond=&gt;condition: Yes or No?</div><div class=\"line\">e=&gt;end</div><div class=\"line\"></div><div class=\"line\">st-&gt;op-&gt;cond</div><div class=\"line\">cond(yes)-&gt;e</div><div class=\"line\">cond(no)-&gt;op</div></pre></td></tr></table></figure>\n<h3 id=\"5-高效绘制-序列图\"><a href=\"#5-高效绘制-序列图\" class=\"headerlink\" title=\"5. 高效绘制 序列图\"></a>5. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图\">序列图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Alice-&gt;Bob: Hello Bob, how are you?</div><div class=\"line\">Note right of Bob: Bob thinks</div><div class=\"line\">Bob--&gt;Alice: I am good thanks!</div></pre></td></tr></table></figure>\n<h3 id=\"6-高效绘制-甘特图\"><a href=\"#6-高效绘制-甘特图\" class=\"headerlink\" title=\"6. 高效绘制 甘特图\"></a>6. 高效绘制 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#9-甘特图\">甘特图</a></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">title 项目开发流程</div><div class=\"line\">section 项目确定</div><div class=\"line\">    需求分析       :a1, 2016-06-22, 3d</div><div class=\"line\">    可行性报告     :after a1, 5d</div><div class=\"line\">    概念验证       : 5d</div><div class=\"line\">section 项目实施</div><div class=\"line\">    概要设计      :2016-07-05  , 5d</div><div class=\"line\">    详细设计      :2016-07-08, 10d</div><div class=\"line\">    编码          :2016-07-15, 10d</div><div class=\"line\">    测试          :2016-07-22, 5d</div><div class=\"line\">section 发布验收</div><div class=\"line\">    发布: 2d</div><div class=\"line\">    验收: 3d</div></pre></td></tr></table></figure>\n<h3 id=\"7-绘制表格\"><a href=\"#7-绘制表格\" class=\"headerlink\" title=\"7. 绘制表格\"></a>7. 绘制表格</h3><table>\n<thead>\n<tr>\n<th>项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>计算机</td>\n<td style=\"text-align:right\">\\$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td>手机</td>\n<td style=\"text-align:right\">\\$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td>管线</td>\n<td style=\"text-align:right\">\\$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-更详细语法说明\"><a href=\"#8-更详细语法说明\" class=\"headerlink\" title=\"8. 更详细语法说明\"></a>8. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown\">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href=\"https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册\">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>\n<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>\n<hr>\n<h2 id=\"什么是-Cmd-Markdown\"><a href=\"#什么是-Cmd-Markdown\" class=\"headerlink\" title=\"什么是 Cmd Markdown\"></a>什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>\n<h3 id=\"1-实时同步预览\"><a href=\"#1-实时同步预览\" class=\"headerlink\" title=\"1. 实时同步预览\"></a>1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>\n<h3 id=\"2-编辑工具栏\"><a href=\"#2-编辑工具栏\" class=\"headerlink\" title=\"2. 编辑工具栏\"></a>2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-editor.png\" alt=\"tool-editor\"></p>\n<h3 id=\"3-编辑模式\"><a href=\"#3-编辑模式\" class=\"headerlink\" title=\"3. 编辑模式\"></a>3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右侧的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>\n<h3 id=\"4-实时的云端文稿\"><a href=\"#4-实时的云端文稿\" class=\"headerlink\" title=\"4. 实时的云端文稿\"></a>4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>\n<h3 id=\"5-离线模式\"><a href=\"#5-离线模式\" class=\"headerlink\" title=\"5. 离线模式\"></a>5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>\n<h3 id=\"6-管理工具栏\"><a href=\"#6-管理工具栏\" class=\"headerlink\" title=\"6. 管理工具栏\"></a>6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/toolbar-manager.jpg\" alt=\"tool-manager\"></p>\n<p>通过管理工具栏可以：</p>\n<p><i class=\"icon-share\"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class=\"icon-file\"></i> 新建：开始撰写一篇新的文稿<br><i class=\"icon-trash\"></i> 删除：删除当前的文稿<br><i class=\"icon-cloud\"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class=\"icon-reorder\"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class=\"icon-pencil\"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>\n<h3 id=\"7-阅读工具栏\"><a href=\"#7-阅读工具栏\" class=\"headerlink\" title=\"7. 阅读工具栏\"></a>7. 阅读工具栏</h3><p><img src=\"https://www.zybuluo.com/static/img/toolbar-reader.jpg\" alt=\"tool-manager\"></p>\n<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>\n<p>工具栏上的五个图标依次为：</p>\n<p><i class=\"icon-list\"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class=\"icon-chevron-sign-left\"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class=\"icon-adjust\"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class=\"icon-desktop\"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class=\"icon-fullscreen\"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>\n<h3 id=\"8-阅读模式\"><a href=\"#8-阅读模式\" class=\"headerlink\" title=\"8. 阅读模式\"></a>8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class=\"icon-desktop\"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>\n<h3 id=\"9-标签、分类和搜索\"><a href=\"#9-标签、分类和搜索\" class=\"headerlink\" title=\"9. 标签、分类和搜索\"></a>9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>\n<p>标签： 未分类</p>\n<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>\n<p><img src=\"https://www.zybuluo.com/static/img/file-list.png\" alt=\"file-list\"></p>\n<h3 id=\"10-文稿发布和分享\"><a href=\"#10-文稿发布和分享\" class=\"headerlink\" title=\"10. 文稿发布和分享\"></a>10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class=\"icon-share\"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>\n<hr>\n<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class=\"icon-file\"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>\n<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\\sum_{i=1}^n a_i=0$， 访问 <a href=\"http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference\">MathJax</a> 参考更多使用方法。</p>\n<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>"},{"title":"react 学习清单","date":"2016-09-28T16:51:29.000Z","_content":"\n主要是搜集整理react从入门到深入的教程、工具和自己做的demo,以便日后查阅\n<!-- more -->\n\n## 教程:\n1. [为你定制的 React 学习路线](http://geek.csdn.net/news/detail/88222)\n2. [菜鸟教程react入门](http://www.runoob.com/react/react-tutorial.html)\n3. [阮一峰老师的入门react-demo](https://github.com/cllgeek/react-demos)\n4. [React文档](http://reactjs.cn/react/docs/getting-started.html)\n5. [React Router文档](http://react-guide.github.io/react-router-cn/)\n6. [Redux文档](http://cn.redux.js.org/index.html)\n7. [Redux 莞式教程](https://github.com/kenberkeley/redux-simple-tutorial)\n8. [react-redux-tutorial](https://github.com/lewis617/react-redux-tutorial)\n9. [React 技术栈系列教程](http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html)\n\n## 相关好文:\n1. [React初体验](http://hustlzp.com/post/2016/03/react-first-blood)\n2. [React 最佳实践——那些 React 没告诉你但很重要的事](http://www.v2ex.com/t/274697)\n3. [Redux 状态管理方法与实例](https://segmentfault.com/a/1190000005933397)\n4. [高质量的 React 相关文档和翻译](https://github.com/react-guide)\n\n## 相关工具:\n1. [react-babel-webpack-boilerplate](https://github.com/ruanyf/react-babel-webpack-boilerplate)\n2. [react-webpack-generators](https://github.com/react-webpack-generators/generator-react-webpack)\n3. [React项目可视化生成器](http://www.overreact.io/)\n4. [react-starter-kit](https://github.com/bodyno/react-starter-kit)\n\n## 规范\n1. [react-style-guide](https://github.com/cllgeek/react-style-guide)\n\n## demo\n1. [gallery-by-react](https://cllgeek.github.io/gallery-by-react) 地址:[https://github.com/cllgeek/gallery-by-react](https://github.com/cllgeek/gallery-by-react)\n2. [react-router-tutorial](https://github.com/reactjs/react-router-tutorial)\n3. [redux-tutorial](https://github.com/react-guide/redux-tutorial-cn)\n","source":"_posts/react_map.md","raw":"---\ntitle: react 学习清单\ndate: 2016-09-29 00:51:29\ncategories: Javascript\ntags: [Javascript, 筆記,react]\n---\n\n主要是搜集整理react从入门到深入的教程、工具和自己做的demo,以便日后查阅\n<!-- more -->\n\n## 教程:\n1. [为你定制的 React 学习路线](http://geek.csdn.net/news/detail/88222)\n2. [菜鸟教程react入门](http://www.runoob.com/react/react-tutorial.html)\n3. [阮一峰老师的入门react-demo](https://github.com/cllgeek/react-demos)\n4. [React文档](http://reactjs.cn/react/docs/getting-started.html)\n5. [React Router文档](http://react-guide.github.io/react-router-cn/)\n6. [Redux文档](http://cn.redux.js.org/index.html)\n7. [Redux 莞式教程](https://github.com/kenberkeley/redux-simple-tutorial)\n8. [react-redux-tutorial](https://github.com/lewis617/react-redux-tutorial)\n9. [React 技术栈系列教程](http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html)\n\n## 相关好文:\n1. [React初体验](http://hustlzp.com/post/2016/03/react-first-blood)\n2. [React 最佳实践——那些 React 没告诉你但很重要的事](http://www.v2ex.com/t/274697)\n3. [Redux 状态管理方法与实例](https://segmentfault.com/a/1190000005933397)\n4. [高质量的 React 相关文档和翻译](https://github.com/react-guide)\n\n## 相关工具:\n1. [react-babel-webpack-boilerplate](https://github.com/ruanyf/react-babel-webpack-boilerplate)\n2. [react-webpack-generators](https://github.com/react-webpack-generators/generator-react-webpack)\n3. [React项目可视化生成器](http://www.overreact.io/)\n4. [react-starter-kit](https://github.com/bodyno/react-starter-kit)\n\n## 规范\n1. [react-style-guide](https://github.com/cllgeek/react-style-guide)\n\n## demo\n1. [gallery-by-react](https://cllgeek.github.io/gallery-by-react) 地址:[https://github.com/cllgeek/gallery-by-react](https://github.com/cllgeek/gallery-by-react)\n2. [react-router-tutorial](https://github.com/reactjs/react-router-tutorial)\n3. [redux-tutorial](https://github.com/react-guide/redux-tutorial-cn)\n","slug":"react_map","published":1,"updated":"2017-02-20T06:24:20.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqtw000n2sl1ehh1m2i0","content":"<p>主要是搜集整理react从入门到深入的教程、工具和自己做的demo,以便日后查阅<br><a id=\"more\"></a></p>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程:\"></a>教程:</h2><ol>\n<li><a href=\"http://geek.csdn.net/news/detail/88222\" target=\"_blank\" rel=\"external\">为你定制的 React 学习路线</a></li>\n<li><a href=\"http://www.runoob.com/react/react-tutorial.html\" target=\"_blank\" rel=\"external\">菜鸟教程react入门</a></li>\n<li><a href=\"https://github.com/cllgeek/react-demos\" target=\"_blank\" rel=\"external\">阮一峰老师的入门react-demo</a></li>\n<li><a href=\"http://reactjs.cn/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">React文档</a></li>\n<li><a href=\"http://react-guide.github.io/react-router-cn/\" target=\"_blank\" rel=\"external\">React Router文档</a></li>\n<li><a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">Redux文档</a></li>\n<li><a href=\"https://github.com/kenberkeley/redux-simple-tutorial\" target=\"_blank\" rel=\"external\">Redux 莞式教程</a></li>\n<li><a href=\"https://github.com/lewis617/react-redux-tutorial\" target=\"_blank\" rel=\"external\">react-redux-tutorial</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\" target=\"_blank\" rel=\"external\">React 技术栈系列教程</a></li>\n</ol>\n<h2 id=\"相关好文\"><a href=\"#相关好文\" class=\"headerlink\" title=\"相关好文:\"></a>相关好文:</h2><ol>\n<li><a href=\"http://hustlzp.com/post/2016/03/react-first-blood\" target=\"_blank\" rel=\"external\">React初体验</a></li>\n<li><a href=\"http://www.v2ex.com/t/274697\" target=\"_blank\" rel=\"external\">React 最佳实践——那些 React 没告诉你但很重要的事</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000005933397\" target=\"_blank\" rel=\"external\">Redux 状态管理方法与实例</a></li>\n<li><a href=\"https://github.com/react-guide\" target=\"_blank\" rel=\"external\">高质量的 React 相关文档和翻译</a></li>\n</ol>\n<h2 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具:\"></a>相关工具:</h2><ol>\n<li><a href=\"https://github.com/ruanyf/react-babel-webpack-boilerplate\" target=\"_blank\" rel=\"external\">react-babel-webpack-boilerplate</a></li>\n<li><a href=\"https://github.com/react-webpack-generators/generator-react-webpack\" target=\"_blank\" rel=\"external\">react-webpack-generators</a></li>\n<li><a href=\"http://www.overreact.io/\" target=\"_blank\" rel=\"external\">React项目可视化生成器</a></li>\n<li><a href=\"https://github.com/bodyno/react-starter-kit\" target=\"_blank\" rel=\"external\">react-starter-kit</a></li>\n</ol>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><ol>\n<li><a href=\"https://github.com/cllgeek/react-style-guide\" target=\"_blank\" rel=\"external\">react-style-guide</a></li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><ol>\n<li><a href=\"https://cllgeek.github.io/gallery-by-react\" target=\"_blank\" rel=\"external\">gallery-by-react</a> 地址:<a href=\"https://github.com/cllgeek/gallery-by-react\" target=\"_blank\" rel=\"external\">https://github.com/cllgeek/gallery-by-react</a></li>\n<li><a href=\"https://github.com/reactjs/react-router-tutorial\" target=\"_blank\" rel=\"external\">react-router-tutorial</a></li>\n<li><a href=\"https://github.com/react-guide/redux-tutorial-cn\" target=\"_blank\" rel=\"external\">redux-tutorial</a></li>\n</ol>\n","excerpt":"<p>主要是搜集整理react从入门到深入的教程、工具和自己做的demo,以便日后查阅<br>","more":"</p>\n<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程:\"></a>教程:</h2><ol>\n<li><a href=\"http://geek.csdn.net/news/detail/88222\">为你定制的 React 学习路线</a></li>\n<li><a href=\"http://www.runoob.com/react/react-tutorial.html\">菜鸟教程react入门</a></li>\n<li><a href=\"https://github.com/cllgeek/react-demos\">阮一峰老师的入门react-demo</a></li>\n<li><a href=\"http://reactjs.cn/react/docs/getting-started.html\">React文档</a></li>\n<li><a href=\"http://react-guide.github.io/react-router-cn/\">React Router文档</a></li>\n<li><a href=\"http://cn.redux.js.org/index.html\">Redux文档</a></li>\n<li><a href=\"https://github.com/kenberkeley/redux-simple-tutorial\">Redux 莞式教程</a></li>\n<li><a href=\"https://github.com/lewis617/react-redux-tutorial\">react-redux-tutorial</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2016/09/react-technology-stack.html\">React 技术栈系列教程</a></li>\n</ol>\n<h2 id=\"相关好文\"><a href=\"#相关好文\" class=\"headerlink\" title=\"相关好文:\"></a>相关好文:</h2><ol>\n<li><a href=\"http://hustlzp.com/post/2016/03/react-first-blood\">React初体验</a></li>\n<li><a href=\"http://www.v2ex.com/t/274697\">React 最佳实践——那些 React 没告诉你但很重要的事</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000005933397\">Redux 状态管理方法与实例</a></li>\n<li><a href=\"https://github.com/react-guide\">高质量的 React 相关文档和翻译</a></li>\n</ol>\n<h2 id=\"相关工具\"><a href=\"#相关工具\" class=\"headerlink\" title=\"相关工具:\"></a>相关工具:</h2><ol>\n<li><a href=\"https://github.com/ruanyf/react-babel-webpack-boilerplate\">react-babel-webpack-boilerplate</a></li>\n<li><a href=\"https://github.com/react-webpack-generators/generator-react-webpack\">react-webpack-generators</a></li>\n<li><a href=\"http://www.overreact.io/\">React项目可视化生成器</a></li>\n<li><a href=\"https://github.com/bodyno/react-starter-kit\">react-starter-kit</a></li>\n</ol>\n<h2 id=\"规范\"><a href=\"#规范\" class=\"headerlink\" title=\"规范\"></a>规范</h2><ol>\n<li><a href=\"https://github.com/cllgeek/react-style-guide\">react-style-guide</a></li>\n</ol>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><ol>\n<li><a href=\"https://cllgeek.github.io/gallery-by-react\">gallery-by-react</a> 地址:<a href=\"https://github.com/cllgeek/gallery-by-react\">https://github.com/cllgeek/gallery-by-react</a></li>\n<li><a href=\"https://github.com/reactjs/react-router-tutorial\">react-router-tutorial</a></li>\n<li><a href=\"https://github.com/react-guide/redux-tutorial-cn\">redux-tutorial</a></li>\n</ol>"},{"title":"reactjs","date":"2017-02-20T06:24:37.000Z","_content":"\n\n[Nodejs学习路线图](http://blog.fens.me/nodejs-roadmap/)\n\n<!-- more -->\n\n<div class=\"entry\">\n<p><a href=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\"><img class=\"alignnone size-full wp-image-425\" alt=\"nodejs\" src=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\" width=\"600\" height=\"400\"></a></p>\n<p><a title=\"从零开始nodejs系列文章\" href=\"http://blog.fens.me/series-nodejs/\" target=\"_blank\">从零开始nodejs系列文章</a>，将介绍如何利Javascript做为服务端脚本，通过Nodejs框架web开发。Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。非常适合小型网站，个性化网站，我们自己的Geek网站！！</p>\n<p><a title=\"Nodejs学习路线图\" href=\"http://blog.fens.me/nodejs-roadmap/\" target=\"_blank\">Nodejs学习路线图</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://item.taobao.com/item.htm?id=520291083951\" target=\"_blank\" ref=\"nofollow\">[视频购买]</a>&nbsp;&nbsp;<a href=\"http://i.xue.taobao.com/detail.htm?courseId=32732\" target=\"_blank\" ref=\"nofollow\">[试看]</a></p>\n<h2>从零开始 – 入门篇</h2>\n<p><a title=\"准备Nodejs开发环境Ubuntu\" href=\"http://blog.fens.me/nodejs-enviroment\" target=\"_blank\">准备Nodejs开发环境Ubuntu</a></p>\n<p><a title=\"Node.js开发框架Express4.x\" href=\"http://blog.fens.me/nodejs-express4/\" target=\"_blank\">Node.js开发框架Express4.x</a></p>\n<p><a title=\"Nodejs开发框架Express3.0开发手记–从零开始\" href=\"http://blog.fens.me/nodejs-express3/\" target=\"_blank\">Nodejs开发框架Express3.0开发手记–从零开始</a></p>\n<p><a title=\"Mongoose使用案例–让JSON数据直接入库MongoDB\" href=\"http://blog.fens.me/nodejs-mongoose-json/\" target=\"_blank\">Mongoose使用案例–让JSON数据直接入库MongoDB</a></p>\n<p><a title=\"Nodejs对MongoDB模糊查询\" href=\"http://blog.fens.me/nodejs-mongodb-regexp/\" target=\"_blank\">Nodejs对MongoDB模糊查询</a></p>\n<p><a title=\"用Nodejs连接MySQL\" href=\"http://blog.fens.me/nodejs-mysql-intro/\" target=\"_blank\">用Nodejs连接MySQL</a></p>\n<p><a title=\"Nodejs配合bootstrap-select下拉列表\" href=\"http://blog.fens.me/nodejs-bootstrap-select/\" target=\"_blank\">Nodejs配合bootstrap-select下拉列表</a></p>\n<p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-bootstrap-paginator/\" target=\"_blank\">nodejs分页设计配合bootstrap-paginator</a></p>\n<p><a title=\"nodejs豆瓣爬虫\" href=\"http://blog.fens.me/nodejs-crawler-douban/\" target=\"_blank\">nodejs豆瓣爬虫</a></p>\n<p><a title=\"玩转Nodejs日志管理log4js\" href=\"http://blog.fens.me/nodejs-log4js/\" target=\"_blank\">玩转Nodejs日志管理log4js</a></p>\n<p><a title=\"Nginx反向代理Nodejs – log4js日志IP显示错误\" href=\"http://blog.fens.me/nodejs-nginx-log4js/\" target=\"_blank\">Nginx反向代理Nodejs – log4js日志IP显示错误</a></p>\n<p><a title=\"upstart封装nodejs应用为系统服务\" href=\"http://blog.fens.me/linux-upstart-nodejs/\" target=\"_blank\">upstart封装nodejs应用为系统服务</a></p>\n<h2>成为高手 – 进阶篇</h2>\n<p><a title=\"Nodejs基础中间件Connect\" href=\"http://blog.fens.me/nodejs-connect/\" target=\"_blank\">Nodejs基础中间件Connect</a></p>\n<p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-grunt-intro/\" target=\"_blank\">grunt让Nodejs规范起来</a></p>\n<p><a title=\"bower解决js的依赖管理\" href=\"http://blog.fens.me/nodejs-bower-intro/\" target=\"_blank\">bower解决js的依赖管理</a></p>\n<p><a title=\"Yeoman自动构建js项目\" href=\"http://blog.fens.me/nodejs-yeoman-intro/\" target=\"_blank\">Yeoman自动构建js项目</a></p>\n<p><a title=\"快速创建基于npm的nodejs库\" href=\"http://blog.fens.me/nodejs-npm-package/\" target=\"_blank\">快速创建基于npm的nodejs库</a></p>\n<p><a title=\"CNPM搭建私有的NPM服务\" href=\"http://blog.fens.me/nodejs-cnpm-npm/\" target=\"_blank\">CNPM搭建私有的NPM服务</a></p>\n<p><a title=\"NPM下载出错 No compatible version found\" href=\"http://blog.fens.me/nodejs-npm-no-compatible-version\" target=\"_blank\">NPM下载出错 No compatible version found</a></p>\n<p><a title=\"Nodejs实现websocket的4种方式\" href=\"http://blog.fens.me/nodejs-websocket/\" target=\"_blank\">Nodejs实现websocket的4种方式</a></p>\n<p><a title=\"Socket.io在线聊天室\" href=\"http://blog.fens.me/nodejs-socketio-chat/\" target=\"_blank\">Socket.io在线聊天室</a></p>\n<p><a title=\"websocket服务器监控\" href=\"http://blog.fens.me/nodejs-websocket-monitor/\" target=\"_blank\">websocket服务器监控</a></p>\n<p><a title=\"Nginx反向代理Websocket\" href=\"http://blog.fens.me/nodejs-websocket-nginx\" target=\"_blank\">Nginx反向代理Websocket</a></p>\n<p><a title=\"restify构建REST服务\" href=\"http://blog.fens.me/nodejs-restify/\" target=\"_blank\">restify构建REST服务</a></p>\n<p><a title=\"jasmine行为驱动,测试先行\" href=\"http://blog.fens.me/nodejs-jasmine-bdd/\" target=\"_blank\">jasmine行为驱动,测试先行</a></p>\n<p><a title=\"Karma和Jasmine自动化单元测试\" href=\"http://blog.fens.me/nodejs-karma-jasmine/\" target=\"_blank\">Karma和Jasmine自动化单元测试</a></p>\n<p><a title=\"Nodejs服务器管理模块forever\" href=\"http://blog.fens.me/nodejs-server-forever/\" target=\"_blank\">Nodejs服务器管理模块forever</a></p>\n<p><a title=\"Express结合Passport实现登陆认证\" href=\"http://blog.fens.me/nodejs-express-passport/\" target=\"_blank\">Express结合Passport实现登陆认证</a></p>\n<p><a title=\"Passport现实社交网络OAuth登陆\" href=\"http://blog.fens.me/nodejs-oauth-passport/\" target=\"_blank\">Passport现实社交网络OAuth登陆</a></p>\n<p><a title=\"Nodejs发邮件组件Nodemailer\" href=\"http://blog.fens.me/nodejs-email-nodemailer/\" target=\"_blank\">Nodejs发邮件组件Nodemailer</a></p>\n<p><a title=\"快速排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-quicksort-nodejs/\" target=\"_blank\">快速排序的Nodejs实现</a></p>\n<p><a title=\"桶排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-bucketsort-nodejs/\" target=\"_blank\">桶排序的Nodejs实现</a></p>\n<h2>追根溯源 – 内核篇</h2>\n<p><a title=\"解读Nodejs多核处理模块cluster\" href=\"http://blog.fens.me/nodejs-core-cluster/\" target=\"_blank\">解读Nodejs多核处理模块cluster</a></p>\n<p><a title=\"Nodejs创建HTTPS服务器\" href=\"http://blog.fens.me/nodejs-https-server/\" target=\"_blank\">Nodejs创建HTTPS服务器</a></p>\n<p><a title=\"Nodejs异步异常处理domain\" href=\"http://blog.fens.me/nodejs-core-domain/\" target=\"_blank\">Nodejs异步异常处理domain</a></p>\n<p><a title=\"Nodejs加密算法库Crypto\" href=\"http://blog.fens.me/nodejs-crypto/\" target=\"_blank\">Nodejs加密算法库Crypto</a></p>\n<p><a title=\"Node.js缓冲模块Buffer\" href=\"http://blog.fens.me/nodejs-buffer/\" target=\"_blank\">Node.js缓冲模块Buffer</a></p>\n<p><a title=\"Node.js进程通信模块child_process\" href=\"http://blog.fens.me/nodejs-child-process/\" target=\"_blank\">Node.js进程通信模块child_process</a></p>\n<h2>跨界应用 – 创造篇</h2>\n<p><a title=\"Nodejs与R跨平台通信\" href=\"http://blog.fens.me/r-rserve-nodejs/\" target=\"_blank\">Nodejs与R跨平台通信</a></p>\n<p><a title=\"tty.js打通浏览器与Linux的通道\" href=\"http://blog.fens.me/nodejs-linux-sh-tty/\" target=\"_blank\">tty.js打通浏览器与Linux的通道</a></p>\n<p><a title=\"用Highcharts轻松构建交互性图表\" href=\"http://blog.fens.me/nodejs-highcharts/\" target=\"_blank\">用Highcharts轻松构建交互性图表</a></p>\n<h2>利剑在手 – 工具篇</h2>\n<p><a title=\"RequireJS异步模块加载\" href=\"http://blog.fens.me/nodejs-requirejs/\" target=\"_blank\">RequireJS异步模块加载</a></p>\n<p><a title=\"Nodejs临时文件回收器reap\" href=\"http://blog.fens.me/nodejs-gc-reap/\" target=\"_blank\">Nodejs临时文件回收器reap</a></p>\n<p><a title=\"Nodejs异步流程控制Async\" href=\"http://blog.fens.me/nodejs-async/\" target=\"_blank\">Nodejs异步流程控制Async</a></p>\n<p><a title=\"Async多任务时间管理\" href=\"http://blog.fens.me/nodejs-async-timer/\" target=\"_blank\">Async多任务时间管理</a></p>\n<p><a title=\"让Nodejs来管理定时任务later\" href=\"http://blog.fens.me/nodejs-cron-later/\" target=\"_blank\">让Nodejs来管理定时任务later</a></p>\n<p><a title=\"wind.js助力异步编程\" href=\"http://blog.fens.me/nodejs-async-windjs/\" target=\"_blank\">wind.js助力异步编程</a></p>\n<p><a title=\"UnderscoreJS精巧而强大工具包\" href=\"http://blog.fens.me/nodejs-underscore/\" target=\"_blank\">UnderscoreJS精巧而强大工具包</a></p>\n<p><a title=\"Commander写自己的Nodejs命令\" href=\"http://blog.fens.me/nodejs-commander/\" target=\"_blank\">Commander写自己的Nodejs命令</a></p>\n<p><a title=\"Stylus让CSS也能编程\" href=\"http://blog.fens.me/nodejs-stylus-css/\" target=\"_blank\">Stylus让CSS也能编程</a></p>\n<p><a title=\"Browserify 跑在浏览器上的Node程序\" href=\"http://blog.fens.me/nodejs-browserify/\" target=\"_blank\">Browserify 跑在浏览器上的Node程序</a></p>\n<p><a title=\"Retry优雅的失败重试策略\" href=\"http://blog.fens.me/nodejs-retry/\" target=\"_blank\">Retry优雅的失败重试策略</a></p>\n<p><a title=\"用UglifyJS2合并压缩混淆JS代码\" href=\"http://blog.fens.me/nodejs-uglifyjs2-js/\" target=\"_blank\">用UglifyJS2合并压缩混淆JS代码</a></p>\n<p><a title=\"Marked高效的Markdown解析器\" href=\"http://blog.fens.me/nodejs-markdown-marked/\" target=\"_blank\">Marked高效的Markdown解析器</a></p>\n<h2>Web技术 – 应用篇</h2>\n<p><a title=\"Hexo在github上构建免费的Web应用\" href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\">Hexo在github上构建免费的Web应用</a></p>\n<p><a title=\"Jekyll在github上构建免费的Web应用\" href=\"http://blog.fens.me/jekyll-bootstarp-github/\" target=\"_blank\">Jekyll在github上构建免费的Web应用</a></p>\n<p><a href=\"http://blog.fens.me/nodejs-alexa/\" target=\"_blank\" title=\"构建自己的Aleax查询服务\">构建自己的Aleax查询服务</a></p>\n<p><a title=\"用WebStorm编辑Markdown\" href=\"http://blog.fens.me/webstorm-markdown/\" target=\"_blank\">用WebStorm编辑Markdown</a></p>\n<p><a title=\"30秒制作幻灯片 Cleaver\" href=\"http://blog.fens.me/nodejs-slide-cleaver/\" target=\"_blank\">30秒制作幻灯片 Cleaver</a></p>\n<p><a title=\"图片延迟加载库Layzr\" href=\"http://blog.fens.me/nodejs-layzr/\" target=\"_blank\">图片延迟加载库Layzr</a></p>\n<p><img src=\"http://blog.fens.me/wp-content/uploads/2016/04/pay50.png\" alt=\"打赏作者\" width=\"600\" height=\"400\" class=\"alignnone size-full wp-image-8388\"></p>\n              <div class=\"clear\"></div>\n          </div>","source":"_posts/reactjs.md","raw":"---\ntitle: reactjs\ndate: 2017-02-20 14:24:37\ncategories: Javascript\ntags: [Javascript, 筆記,nodejs]\n---\n\n\n[Nodejs学习路线图](http://blog.fens.me/nodejs-roadmap/)\n\n<!-- more -->\n\n<div class=\"entry\">\n<p><a href=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\"><img class=\"alignnone size-full wp-image-425\" alt=\"nodejs\" src=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\" width=\"600\" height=\"400\"></a></p>\n<p><a title=\"从零开始nodejs系列文章\" href=\"http://blog.fens.me/series-nodejs/\" target=\"_blank\">从零开始nodejs系列文章</a>，将介绍如何利Javascript做为服务端脚本，通过Nodejs框架web开发。Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。非常适合小型网站，个性化网站，我们自己的Geek网站！！</p>\n<p><a title=\"Nodejs学习路线图\" href=\"http://blog.fens.me/nodejs-roadmap/\" target=\"_blank\">Nodejs学习路线图</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://item.taobao.com/item.htm?id=520291083951\" target=\"_blank\" ref=\"nofollow\">[视频购买]</a>&nbsp;&nbsp;<a href=\"http://i.xue.taobao.com/detail.htm?courseId=32732\" target=\"_blank\" ref=\"nofollow\">[试看]</a></p>\n<h2>从零开始 – 入门篇</h2>\n<p><a title=\"准备Nodejs开发环境Ubuntu\" href=\"http://blog.fens.me/nodejs-enviroment\" target=\"_blank\">准备Nodejs开发环境Ubuntu</a></p>\n<p><a title=\"Node.js开发框架Express4.x\" href=\"http://blog.fens.me/nodejs-express4/\" target=\"_blank\">Node.js开发框架Express4.x</a></p>\n<p><a title=\"Nodejs开发框架Express3.0开发手记–从零开始\" href=\"http://blog.fens.me/nodejs-express3/\" target=\"_blank\">Nodejs开发框架Express3.0开发手记–从零开始</a></p>\n<p><a title=\"Mongoose使用案例–让JSON数据直接入库MongoDB\" href=\"http://blog.fens.me/nodejs-mongoose-json/\" target=\"_blank\">Mongoose使用案例–让JSON数据直接入库MongoDB</a></p>\n<p><a title=\"Nodejs对MongoDB模糊查询\" href=\"http://blog.fens.me/nodejs-mongodb-regexp/\" target=\"_blank\">Nodejs对MongoDB模糊查询</a></p>\n<p><a title=\"用Nodejs连接MySQL\" href=\"http://blog.fens.me/nodejs-mysql-intro/\" target=\"_blank\">用Nodejs连接MySQL</a></p>\n<p><a title=\"Nodejs配合bootstrap-select下拉列表\" href=\"http://blog.fens.me/nodejs-bootstrap-select/\" target=\"_blank\">Nodejs配合bootstrap-select下拉列表</a></p>\n<p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-bootstrap-paginator/\" target=\"_blank\">nodejs分页设计配合bootstrap-paginator</a></p>\n<p><a title=\"nodejs豆瓣爬虫\" href=\"http://blog.fens.me/nodejs-crawler-douban/\" target=\"_blank\">nodejs豆瓣爬虫</a></p>\n<p><a title=\"玩转Nodejs日志管理log4js\" href=\"http://blog.fens.me/nodejs-log4js/\" target=\"_blank\">玩转Nodejs日志管理log4js</a></p>\n<p><a title=\"Nginx反向代理Nodejs – log4js日志IP显示错误\" href=\"http://blog.fens.me/nodejs-nginx-log4js/\" target=\"_blank\">Nginx反向代理Nodejs – log4js日志IP显示错误</a></p>\n<p><a title=\"upstart封装nodejs应用为系统服务\" href=\"http://blog.fens.me/linux-upstart-nodejs/\" target=\"_blank\">upstart封装nodejs应用为系统服务</a></p>\n<h2>成为高手 – 进阶篇</h2>\n<p><a title=\"Nodejs基础中间件Connect\" href=\"http://blog.fens.me/nodejs-connect/\" target=\"_blank\">Nodejs基础中间件Connect</a></p>\n<p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-grunt-intro/\" target=\"_blank\">grunt让Nodejs规范起来</a></p>\n<p><a title=\"bower解决js的依赖管理\" href=\"http://blog.fens.me/nodejs-bower-intro/\" target=\"_blank\">bower解决js的依赖管理</a></p>\n<p><a title=\"Yeoman自动构建js项目\" href=\"http://blog.fens.me/nodejs-yeoman-intro/\" target=\"_blank\">Yeoman自动构建js项目</a></p>\n<p><a title=\"快速创建基于npm的nodejs库\" href=\"http://blog.fens.me/nodejs-npm-package/\" target=\"_blank\">快速创建基于npm的nodejs库</a></p>\n<p><a title=\"CNPM搭建私有的NPM服务\" href=\"http://blog.fens.me/nodejs-cnpm-npm/\" target=\"_blank\">CNPM搭建私有的NPM服务</a></p>\n<p><a title=\"NPM下载出错 No compatible version found\" href=\"http://blog.fens.me/nodejs-npm-no-compatible-version\" target=\"_blank\">NPM下载出错 No compatible version found</a></p>\n<p><a title=\"Nodejs实现websocket的4种方式\" href=\"http://blog.fens.me/nodejs-websocket/\" target=\"_blank\">Nodejs实现websocket的4种方式</a></p>\n<p><a title=\"Socket.io在线聊天室\" href=\"http://blog.fens.me/nodejs-socketio-chat/\" target=\"_blank\">Socket.io在线聊天室</a></p>\n<p><a title=\"websocket服务器监控\" href=\"http://blog.fens.me/nodejs-websocket-monitor/\" target=\"_blank\">websocket服务器监控</a></p>\n<p><a title=\"Nginx反向代理Websocket\" href=\"http://blog.fens.me/nodejs-websocket-nginx\" target=\"_blank\">Nginx反向代理Websocket</a></p>\n<p><a title=\"restify构建REST服务\" href=\"http://blog.fens.me/nodejs-restify/\" target=\"_blank\">restify构建REST服务</a></p>\n<p><a title=\"jasmine行为驱动,测试先行\" href=\"http://blog.fens.me/nodejs-jasmine-bdd/\" target=\"_blank\">jasmine行为驱动,测试先行</a></p>\n<p><a title=\"Karma和Jasmine自动化单元测试\" href=\"http://blog.fens.me/nodejs-karma-jasmine/\" target=\"_blank\">Karma和Jasmine自动化单元测试</a></p>\n<p><a title=\"Nodejs服务器管理模块forever\" href=\"http://blog.fens.me/nodejs-server-forever/\" target=\"_blank\">Nodejs服务器管理模块forever</a></p>\n<p><a title=\"Express结合Passport实现登陆认证\" href=\"http://blog.fens.me/nodejs-express-passport/\" target=\"_blank\">Express结合Passport实现登陆认证</a></p>\n<p><a title=\"Passport现实社交网络OAuth登陆\" href=\"http://blog.fens.me/nodejs-oauth-passport/\" target=\"_blank\">Passport现实社交网络OAuth登陆</a></p>\n<p><a title=\"Nodejs发邮件组件Nodemailer\" href=\"http://blog.fens.me/nodejs-email-nodemailer/\" target=\"_blank\">Nodejs发邮件组件Nodemailer</a></p>\n<p><a title=\"快速排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-quicksort-nodejs/\" target=\"_blank\">快速排序的Nodejs实现</a></p>\n<p><a title=\"桶排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-bucketsort-nodejs/\" target=\"_blank\">桶排序的Nodejs实现</a></p>\n<h2>追根溯源 – 内核篇</h2>\n<p><a title=\"解读Nodejs多核处理模块cluster\" href=\"http://blog.fens.me/nodejs-core-cluster/\" target=\"_blank\">解读Nodejs多核处理模块cluster</a></p>\n<p><a title=\"Nodejs创建HTTPS服务器\" href=\"http://blog.fens.me/nodejs-https-server/\" target=\"_blank\">Nodejs创建HTTPS服务器</a></p>\n<p><a title=\"Nodejs异步异常处理domain\" href=\"http://blog.fens.me/nodejs-core-domain/\" target=\"_blank\">Nodejs异步异常处理domain</a></p>\n<p><a title=\"Nodejs加密算法库Crypto\" href=\"http://blog.fens.me/nodejs-crypto/\" target=\"_blank\">Nodejs加密算法库Crypto</a></p>\n<p><a title=\"Node.js缓冲模块Buffer\" href=\"http://blog.fens.me/nodejs-buffer/\" target=\"_blank\">Node.js缓冲模块Buffer</a></p>\n<p><a title=\"Node.js进程通信模块child_process\" href=\"http://blog.fens.me/nodejs-child-process/\" target=\"_blank\">Node.js进程通信模块child_process</a></p>\n<h2>跨界应用 – 创造篇</h2>\n<p><a title=\"Nodejs与R跨平台通信\" href=\"http://blog.fens.me/r-rserve-nodejs/\" target=\"_blank\">Nodejs与R跨平台通信</a></p>\n<p><a title=\"tty.js打通浏览器与Linux的通道\" href=\"http://blog.fens.me/nodejs-linux-sh-tty/\" target=\"_blank\">tty.js打通浏览器与Linux的通道</a></p>\n<p><a title=\"用Highcharts轻松构建交互性图表\" href=\"http://blog.fens.me/nodejs-highcharts/\" target=\"_blank\">用Highcharts轻松构建交互性图表</a></p>\n<h2>利剑在手 – 工具篇</h2>\n<p><a title=\"RequireJS异步模块加载\" href=\"http://blog.fens.me/nodejs-requirejs/\" target=\"_blank\">RequireJS异步模块加载</a></p>\n<p><a title=\"Nodejs临时文件回收器reap\" href=\"http://blog.fens.me/nodejs-gc-reap/\" target=\"_blank\">Nodejs临时文件回收器reap</a></p>\n<p><a title=\"Nodejs异步流程控制Async\" href=\"http://blog.fens.me/nodejs-async/\" target=\"_blank\">Nodejs异步流程控制Async</a></p>\n<p><a title=\"Async多任务时间管理\" href=\"http://blog.fens.me/nodejs-async-timer/\" target=\"_blank\">Async多任务时间管理</a></p>\n<p><a title=\"让Nodejs来管理定时任务later\" href=\"http://blog.fens.me/nodejs-cron-later/\" target=\"_blank\">让Nodejs来管理定时任务later</a></p>\n<p><a title=\"wind.js助力异步编程\" href=\"http://blog.fens.me/nodejs-async-windjs/\" target=\"_blank\">wind.js助力异步编程</a></p>\n<p><a title=\"UnderscoreJS精巧而强大工具包\" href=\"http://blog.fens.me/nodejs-underscore/\" target=\"_blank\">UnderscoreJS精巧而强大工具包</a></p>\n<p><a title=\"Commander写自己的Nodejs命令\" href=\"http://blog.fens.me/nodejs-commander/\" target=\"_blank\">Commander写自己的Nodejs命令</a></p>\n<p><a title=\"Stylus让CSS也能编程\" href=\"http://blog.fens.me/nodejs-stylus-css/\" target=\"_blank\">Stylus让CSS也能编程</a></p>\n<p><a title=\"Browserify 跑在浏览器上的Node程序\" href=\"http://blog.fens.me/nodejs-browserify/\" target=\"_blank\">Browserify 跑在浏览器上的Node程序</a></p>\n<p><a title=\"Retry优雅的失败重试策略\" href=\"http://blog.fens.me/nodejs-retry/\" target=\"_blank\">Retry优雅的失败重试策略</a></p>\n<p><a title=\"用UglifyJS2合并压缩混淆JS代码\" href=\"http://blog.fens.me/nodejs-uglifyjs2-js/\" target=\"_blank\">用UglifyJS2合并压缩混淆JS代码</a></p>\n<p><a title=\"Marked高效的Markdown解析器\" href=\"http://blog.fens.me/nodejs-markdown-marked/\" target=\"_blank\">Marked高效的Markdown解析器</a></p>\n<h2>Web技术 – 应用篇</h2>\n<p><a title=\"Hexo在github上构建免费的Web应用\" href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\">Hexo在github上构建免费的Web应用</a></p>\n<p><a title=\"Jekyll在github上构建免费的Web应用\" href=\"http://blog.fens.me/jekyll-bootstarp-github/\" target=\"_blank\">Jekyll在github上构建免费的Web应用</a></p>\n<p><a href=\"http://blog.fens.me/nodejs-alexa/\" target=\"_blank\" title=\"构建自己的Aleax查询服务\">构建自己的Aleax查询服务</a></p>\n<p><a title=\"用WebStorm编辑Markdown\" href=\"http://blog.fens.me/webstorm-markdown/\" target=\"_blank\">用WebStorm编辑Markdown</a></p>\n<p><a title=\"30秒制作幻灯片 Cleaver\" href=\"http://blog.fens.me/nodejs-slide-cleaver/\" target=\"_blank\">30秒制作幻灯片 Cleaver</a></p>\n<p><a title=\"图片延迟加载库Layzr\" href=\"http://blog.fens.me/nodejs-layzr/\" target=\"_blank\">图片延迟加载库Layzr</a></p>\n<p><img src=\"http://blog.fens.me/wp-content/uploads/2016/04/pay50.png\" alt=\"打赏作者\" width=\"600\" height=\"400\" class=\"alignnone size-full wp-image-8388\"></p>\n              <div class=\"clear\"></div>\n          </div>","slug":"reactjs","published":1,"updated":"2017-02-20T06:25:08.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496eqtz000q2sl1rogtqwvx","content":"<p><a href=\"http://blog.fens.me/nodejs-roadmap/\" target=\"_blank\" rel=\"external\">Nodejs学习路线图</a></p>\n<a id=\"more\"></a>\n<div class=\"entry\"><br><p><a href=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\" target=\"_blank\" rel=\"external\"><img class=\"alignnone size-full wp-image-425\" alt=\"nodejs\" src=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\" width=\"600\" height=\"400\"></a></p><br><p><a title=\"从零开始nodejs系列文章\" href=\"http://blog.fens.me/series-nodejs/\" target=\"_blank\">从零开始nodejs系列文章</a>，将介绍如何利Javascript做为服务端脚本，通过Nodejs框架web开发。Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。非常适合小型网站，个性化网站，我们自己的Geek网站！！</p><br><p><a title=\"Nodejs学习路线图\" href=\"http://blog.fens.me/nodejs-roadmap/\" target=\"_blank\">Nodejs学习路线图</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://item.taobao.com/item.htm?id=520291083951\" target=\"_blank\" ref=\"nofollow\">[视频购买]</a>&nbsp;&nbsp;<a href=\"http://i.xue.taobao.com/detail.htm?courseId=32732\" target=\"_blank\" ref=\"nofollow\">[试看]</a></p><br><h2>从零开始 – 入门篇</h2><br><p><a title=\"准备Nodejs开发环境Ubuntu\" href=\"http://blog.fens.me/nodejs-enviroment\" target=\"_blank\">准备Nodejs开发环境Ubuntu</a></p><br><p><a title=\"Node.js开发框架Express4.x\" href=\"http://blog.fens.me/nodejs-express4/\" target=\"_blank\">Node.js开发框架Express4.x</a></p><br><p><a title=\"Nodejs开发框架Express3.0开发手记–从零开始\" href=\"http://blog.fens.me/nodejs-express3/\" target=\"_blank\">Nodejs开发框架Express3.0开发手记–从零开始</a></p><br><p><a title=\"Mongoose使用案例–让JSON数据直接入库MongoDB\" href=\"http://blog.fens.me/nodejs-mongoose-json/\" target=\"_blank\">Mongoose使用案例–让JSON数据直接入库MongoDB</a></p><br><p><a title=\"Nodejs对MongoDB模糊查询\" href=\"http://blog.fens.me/nodejs-mongodb-regexp/\" target=\"_blank\">Nodejs对MongoDB模糊查询</a></p><br><p><a title=\"用Nodejs连接MySQL\" href=\"http://blog.fens.me/nodejs-mysql-intro/\" target=\"_blank\">用Nodejs连接MySQL</a></p><br><p><a title=\"Nodejs配合bootstrap-select下拉列表\" href=\"http://blog.fens.me/nodejs-bootstrap-select/\" target=\"_blank\">Nodejs配合bootstrap-select下拉列表</a></p><br><p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-bootstrap-paginator/\" target=\"_blank\">nodejs分页设计配合bootstrap-paginator</a></p><br><p><a title=\"nodejs豆瓣爬虫\" href=\"http://blog.fens.me/nodejs-crawler-douban/\" target=\"_blank\">nodejs豆瓣爬虫</a></p><br><p><a title=\"玩转Nodejs日志管理log4js\" href=\"http://blog.fens.me/nodejs-log4js/\" target=\"_blank\">玩转Nodejs日志管理log4js</a></p><br><p><a title=\"Nginx反向代理Nodejs – log4js日志IP显示错误\" href=\"http://blog.fens.me/nodejs-nginx-log4js/\" target=\"_blank\">Nginx反向代理Nodejs – log4js日志IP显示错误</a></p><br><p><a title=\"upstart封装nodejs应用为系统服务\" href=\"http://blog.fens.me/linux-upstart-nodejs/\" target=\"_blank\">upstart封装nodejs应用为系统服务</a></p><br><h2>成为高手 – 进阶篇</h2><br><p><a title=\"Nodejs基础中间件Connect\" href=\"http://blog.fens.me/nodejs-connect/\" target=\"_blank\">Nodejs基础中间件Connect</a></p><br><p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-grunt-intro/\" target=\"_blank\">grunt让Nodejs规范起来</a></p><br><p><a title=\"bower解决js的依赖管理\" href=\"http://blog.fens.me/nodejs-bower-intro/\" target=\"_blank\">bower解决js的依赖管理</a></p><br><p><a title=\"Yeoman自动构建js项目\" href=\"http://blog.fens.me/nodejs-yeoman-intro/\" target=\"_blank\">Yeoman自动构建js项目</a></p><br><p><a title=\"快速创建基于npm的nodejs库\" href=\"http://blog.fens.me/nodejs-npm-package/\" target=\"_blank\">快速创建基于npm的nodejs库</a></p><br><p><a title=\"CNPM搭建私有的NPM服务\" href=\"http://blog.fens.me/nodejs-cnpm-npm/\" target=\"_blank\">CNPM搭建私有的NPM服务</a></p><br><p><a title=\"NPM下载出错 No compatible version found\" href=\"http://blog.fens.me/nodejs-npm-no-compatible-version\" target=\"_blank\">NPM下载出错 No compatible version found</a></p><br><p><a title=\"Nodejs实现websocket的4种方式\" href=\"http://blog.fens.me/nodejs-websocket/\" target=\"_blank\">Nodejs实现websocket的4种方式</a></p><br><p><a title=\"Socket.io在线聊天室\" href=\"http://blog.fens.me/nodejs-socketio-chat/\" target=\"_blank\">Socket.io在线聊天室</a></p><br><p><a title=\"websocket服务器监控\" href=\"http://blog.fens.me/nodejs-websocket-monitor/\" target=\"_blank\">websocket服务器监控</a></p><br><p><a title=\"Nginx反向代理Websocket\" href=\"http://blog.fens.me/nodejs-websocket-nginx\" target=\"_blank\">Nginx反向代理Websocket</a></p><br><p><a title=\"restify构建REST服务\" href=\"http://blog.fens.me/nodejs-restify/\" target=\"_blank\">restify构建REST服务</a></p><br><p><a title=\"jasmine行为驱动,测试先行\" href=\"http://blog.fens.me/nodejs-jasmine-bdd/\" target=\"_blank\">jasmine行为驱动,测试先行</a></p><br><p><a title=\"Karma和Jasmine自动化单元测试\" href=\"http://blog.fens.me/nodejs-karma-jasmine/\" target=\"_blank\">Karma和Jasmine自动化单元测试</a></p><br><p><a title=\"Nodejs服务器管理模块forever\" href=\"http://blog.fens.me/nodejs-server-forever/\" target=\"_blank\">Nodejs服务器管理模块forever</a></p><br><p><a title=\"Express结合Passport实现登陆认证\" href=\"http://blog.fens.me/nodejs-express-passport/\" target=\"_blank\">Express结合Passport实现登陆认证</a></p><br><p><a title=\"Passport现实社交网络OAuth登陆\" href=\"http://blog.fens.me/nodejs-oauth-passport/\" target=\"_blank\">Passport现实社交网络OAuth登陆</a></p><br><p><a title=\"Nodejs发邮件组件Nodemailer\" href=\"http://blog.fens.me/nodejs-email-nodemailer/\" target=\"_blank\">Nodejs发邮件组件Nodemailer</a></p><br><p><a title=\"快速排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-quicksort-nodejs/\" target=\"_blank\">快速排序的Nodejs实现</a></p><br><p><a title=\"桶排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-bucketsort-nodejs/\" target=\"_blank\">桶排序的Nodejs实现</a></p><br><h2>追根溯源 – 内核篇</h2><br><p><a title=\"解读Nodejs多核处理模块cluster\" href=\"http://blog.fens.me/nodejs-core-cluster/\" target=\"_blank\">解读Nodejs多核处理模块cluster</a></p><br><p><a title=\"Nodejs创建HTTPS服务器\" href=\"http://blog.fens.me/nodejs-https-server/\" target=\"_blank\">Nodejs创建HTTPS服务器</a></p><br><p><a title=\"Nodejs异步异常处理domain\" href=\"http://blog.fens.me/nodejs-core-domain/\" target=\"_blank\">Nodejs异步异常处理domain</a></p><br><p><a title=\"Nodejs加密算法库Crypto\" href=\"http://blog.fens.me/nodejs-crypto/\" target=\"_blank\">Nodejs加密算法库Crypto</a></p><br><p><a title=\"Node.js缓冲模块Buffer\" href=\"http://blog.fens.me/nodejs-buffer/\" target=\"_blank\">Node.js缓冲模块Buffer</a></p><br><p><a title=\"Node.js进程通信模块child_process\" href=\"http://blog.fens.me/nodejs-child-process/\" target=\"_blank\">Node.js进程通信模块child_process</a></p><br><h2>跨界应用 – 创造篇</h2><br><p><a title=\"Nodejs与R跨平台通信\" href=\"http://blog.fens.me/r-rserve-nodejs/\" target=\"_blank\">Nodejs与R跨平台通信</a></p><br><p><a title=\"tty.js打通浏览器与Linux的通道\" href=\"http://blog.fens.me/nodejs-linux-sh-tty/\" target=\"_blank\">tty.js打通浏览器与Linux的通道</a></p><br><p><a title=\"用Highcharts轻松构建交互性图表\" href=\"http://blog.fens.me/nodejs-highcharts/\" target=\"_blank\">用Highcharts轻松构建交互性图表</a></p><br><h2>利剑在手 – 工具篇</h2><br><p><a title=\"RequireJS异步模块加载\" href=\"http://blog.fens.me/nodejs-requirejs/\" target=\"_blank\">RequireJS异步模块加载</a></p><br><p><a title=\"Nodejs临时文件回收器reap\" href=\"http://blog.fens.me/nodejs-gc-reap/\" target=\"_blank\">Nodejs临时文件回收器reap</a></p><br><p><a title=\"Nodejs异步流程控制Async\" href=\"http://blog.fens.me/nodejs-async/\" target=\"_blank\">Nodejs异步流程控制Async</a></p><br><p><a title=\"Async多任务时间管理\" href=\"http://blog.fens.me/nodejs-async-timer/\" target=\"_blank\">Async多任务时间管理</a></p><br><p><a title=\"让Nodejs来管理定时任务later\" href=\"http://blog.fens.me/nodejs-cron-later/\" target=\"_blank\">让Nodejs来管理定时任务later</a></p><br><p><a title=\"wind.js助力异步编程\" href=\"http://blog.fens.me/nodejs-async-windjs/\" target=\"_blank\">wind.js助力异步编程</a></p><br><p><a title=\"UnderscoreJS精巧而强大工具包\" href=\"http://blog.fens.me/nodejs-underscore/\" target=\"_blank\">UnderscoreJS精巧而强大工具包</a></p><br><p><a title=\"Commander写自己的Nodejs命令\" href=\"http://blog.fens.me/nodejs-commander/\" target=\"_blank\">Commander写自己的Nodejs命令</a></p><br><p><a title=\"Stylus让CSS也能编程\" href=\"http://blog.fens.me/nodejs-stylus-css/\" target=\"_blank\">Stylus让CSS也能编程</a></p><br><p><a title=\"Browserify 跑在浏览器上的Node程序\" href=\"http://blog.fens.me/nodejs-browserify/\" target=\"_blank\">Browserify 跑在浏览器上的Node程序</a></p><br><p><a title=\"Retry优雅的失败重试策略\" href=\"http://blog.fens.me/nodejs-retry/\" target=\"_blank\">Retry优雅的失败重试策略</a></p><br><p><a title=\"用UglifyJS2合并压缩混淆JS代码\" href=\"http://blog.fens.me/nodejs-uglifyjs2-js/\" target=\"_blank\">用UglifyJS2合并压缩混淆JS代码</a></p><br><p><a title=\"Marked高效的Markdown解析器\" href=\"http://blog.fens.me/nodejs-markdown-marked/\" target=\"_blank\">Marked高效的Markdown解析器</a></p><br><h2>Web技术 – 应用篇</h2><br><p><a title=\"Hexo在github上构建免费的Web应用\" href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\">Hexo在github上构建免费的Web应用</a></p><br><p><a title=\"Jekyll在github上构建免费的Web应用\" href=\"http://blog.fens.me/jekyll-bootstarp-github/\" target=\"_blank\">Jekyll在github上构建免费的Web应用</a></p><br><p><a href=\"http://blog.fens.me/nodejs-alexa/\" target=\"_blank\" title=\"构建自己的Aleax查询服务\">构建自己的Aleax查询服务</a></p><br><p><a title=\"用WebStorm编辑Markdown\" href=\"http://blog.fens.me/webstorm-markdown/\" target=\"_blank\">用WebStorm编辑Markdown</a></p><br><p><a title=\"30秒制作幻灯片 Cleaver\" href=\"http://blog.fens.me/nodejs-slide-cleaver/\" target=\"_blank\">30秒制作幻灯片 Cleaver</a></p><br><p><a title=\"图片延迟加载库Layzr\" href=\"http://blog.fens.me/nodejs-layzr/\" target=\"_blank\">图片延迟加载库Layzr</a></p><br><p><img src=\"http://blog.fens.me/wp-content/uploads/2016/04/pay50.png\" alt=\"打赏作者\" width=\"600\" height=\"400\" class=\"alignnone size-full wp-image-8388\"></p><br>              <div class=\"clear\"></div><br>          </div>","excerpt":"<p><a href=\"http://blog.fens.me/nodejs-roadmap/\">Nodejs学习路线图</a></p>","more":"<div class=\"entry\"><br><p><a href=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\"><img class=\"alignnone size-full wp-image-425\" alt=\"nodejs\" src=\"http://blog.fens.me/wp-content/uploads/2013/06/nodejs1.jpg\" width=\"600\" height=\"400\"></a></p><br><p><a title=\"从零开始nodejs系列文章\" href=\"http://blog.fens.me/series-nodejs/\" target=\"_blank\">从零开始nodejs系列文章</a>，将介绍如何利Javascript做为服务端脚本，通过Nodejs框架web开发。Nodejs框架是基于V8的引擎，是目前速度最快的Javascript引擎。chrome浏览器就基于V8，同时打开20-30个网页都很流畅。Nodejs标准的web开发框架Express，可以帮助我们迅速建立web站点，比起PHP的开发效率更高，而且学习曲线更低。非常适合小型网站，个性化网站，我们自己的Geek网站！！</p><br><p><a title=\"Nodejs学习路线图\" href=\"http://blog.fens.me/nodejs-roadmap/\" target=\"_blank\">Nodejs学习路线图</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href=\"https://item.taobao.com/item.htm?id=520291083951\" target=\"_blank\" ref=\"nofollow\">[视频购买]</a>&nbsp;&nbsp;<a href=\"http://i.xue.taobao.com/detail.htm?courseId=32732\" target=\"_blank\" ref=\"nofollow\">[试看]</a></p><br><h2>从零开始 – 入门篇</h2><br><p><a title=\"准备Nodejs开发环境Ubuntu\" href=\"http://blog.fens.me/nodejs-enviroment\" target=\"_blank\">准备Nodejs开发环境Ubuntu</a></p><br><p><a title=\"Node.js开发框架Express4.x\" href=\"http://blog.fens.me/nodejs-express4/\" target=\"_blank\">Node.js开发框架Express4.x</a></p><br><p><a title=\"Nodejs开发框架Express3.0开发手记–从零开始\" href=\"http://blog.fens.me/nodejs-express3/\" target=\"_blank\">Nodejs开发框架Express3.0开发手记–从零开始</a></p><br><p><a title=\"Mongoose使用案例–让JSON数据直接入库MongoDB\" href=\"http://blog.fens.me/nodejs-mongoose-json/\" target=\"_blank\">Mongoose使用案例–让JSON数据直接入库MongoDB</a></p><br><p><a title=\"Nodejs对MongoDB模糊查询\" href=\"http://blog.fens.me/nodejs-mongodb-regexp/\" target=\"_blank\">Nodejs对MongoDB模糊查询</a></p><br><p><a title=\"用Nodejs连接MySQL\" href=\"http://blog.fens.me/nodejs-mysql-intro/\" target=\"_blank\">用Nodejs连接MySQL</a></p><br><p><a title=\"Nodejs配合bootstrap-select下拉列表\" href=\"http://blog.fens.me/nodejs-bootstrap-select/\" target=\"_blank\">Nodejs配合bootstrap-select下拉列表</a></p><br><p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-bootstrap-paginator/\" target=\"_blank\">nodejs分页设计配合bootstrap-paginator</a></p><br><p><a title=\"nodejs豆瓣爬虫\" href=\"http://blog.fens.me/nodejs-crawler-douban/\" target=\"_blank\">nodejs豆瓣爬虫</a></p><br><p><a title=\"玩转Nodejs日志管理log4js\" href=\"http://blog.fens.me/nodejs-log4js/\" target=\"_blank\">玩转Nodejs日志管理log4js</a></p><br><p><a title=\"Nginx反向代理Nodejs – log4js日志IP显示错误\" href=\"http://blog.fens.me/nodejs-nginx-log4js/\" target=\"_blank\">Nginx反向代理Nodejs – log4js日志IP显示错误</a></p><br><p><a title=\"upstart封装nodejs应用为系统服务\" href=\"http://blog.fens.me/linux-upstart-nodejs/\" target=\"_blank\">upstart封装nodejs应用为系统服务</a></p><br><h2>成为高手 – 进阶篇</h2><br><p><a title=\"Nodejs基础中间件Connect\" href=\"http://blog.fens.me/nodejs-connect/\" target=\"_blank\">Nodejs基础中间件Connect</a></p><br><p><a title=\"grunt让Nodejs规范起来\" href=\"http://blog.fens.me/nodejs-grunt-intro/\" target=\"_blank\">grunt让Nodejs规范起来</a></p><br><p><a title=\"bower解决js的依赖管理\" href=\"http://blog.fens.me/nodejs-bower-intro/\" target=\"_blank\">bower解决js的依赖管理</a></p><br><p><a title=\"Yeoman自动构建js项目\" href=\"http://blog.fens.me/nodejs-yeoman-intro/\" target=\"_blank\">Yeoman自动构建js项目</a></p><br><p><a title=\"快速创建基于npm的nodejs库\" href=\"http://blog.fens.me/nodejs-npm-package/\" target=\"_blank\">快速创建基于npm的nodejs库</a></p><br><p><a title=\"CNPM搭建私有的NPM服务\" href=\"http://blog.fens.me/nodejs-cnpm-npm/\" target=\"_blank\">CNPM搭建私有的NPM服务</a></p><br><p><a title=\"NPM下载出错 No compatible version found\" href=\"http://blog.fens.me/nodejs-npm-no-compatible-version\" target=\"_blank\">NPM下载出错 No compatible version found</a></p><br><p><a title=\"Nodejs实现websocket的4种方式\" href=\"http://blog.fens.me/nodejs-websocket/\" target=\"_blank\">Nodejs实现websocket的4种方式</a></p><br><p><a title=\"Socket.io在线聊天室\" href=\"http://blog.fens.me/nodejs-socketio-chat/\" target=\"_blank\">Socket.io在线聊天室</a></p><br><p><a title=\"websocket服务器监控\" href=\"http://blog.fens.me/nodejs-websocket-monitor/\" target=\"_blank\">websocket服务器监控</a></p><br><p><a title=\"Nginx反向代理Websocket\" href=\"http://blog.fens.me/nodejs-websocket-nginx\" target=\"_blank\">Nginx反向代理Websocket</a></p><br><p><a title=\"restify构建REST服务\" href=\"http://blog.fens.me/nodejs-restify/\" target=\"_blank\">restify构建REST服务</a></p><br><p><a title=\"jasmine行为驱动,测试先行\" href=\"http://blog.fens.me/nodejs-jasmine-bdd/\" target=\"_blank\">jasmine行为驱动,测试先行</a></p><br><p><a title=\"Karma和Jasmine自动化单元测试\" href=\"http://blog.fens.me/nodejs-karma-jasmine/\" target=\"_blank\">Karma和Jasmine自动化单元测试</a></p><br><p><a title=\"Nodejs服务器管理模块forever\" href=\"http://blog.fens.me/nodejs-server-forever/\" target=\"_blank\">Nodejs服务器管理模块forever</a></p><br><p><a title=\"Express结合Passport实现登陆认证\" href=\"http://blog.fens.me/nodejs-express-passport/\" target=\"_blank\">Express结合Passport实现登陆认证</a></p><br><p><a title=\"Passport现实社交网络OAuth登陆\" href=\"http://blog.fens.me/nodejs-oauth-passport/\" target=\"_blank\">Passport现实社交网络OAuth登陆</a></p><br><p><a title=\"Nodejs发邮件组件Nodemailer\" href=\"http://blog.fens.me/nodejs-email-nodemailer/\" target=\"_blank\">Nodejs发邮件组件Nodemailer</a></p><br><p><a title=\"快速排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-quicksort-nodejs/\" target=\"_blank\">快速排序的Nodejs实现</a></p><br><p><a title=\"桶排序的Nodejs实现\" href=\"http://blog.fens.me/algorithm-bucketsort-nodejs/\" target=\"_blank\">桶排序的Nodejs实现</a></p><br><h2>追根溯源 – 内核篇</h2><br><p><a title=\"解读Nodejs多核处理模块cluster\" href=\"http://blog.fens.me/nodejs-core-cluster/\" target=\"_blank\">解读Nodejs多核处理模块cluster</a></p><br><p><a title=\"Nodejs创建HTTPS服务器\" href=\"http://blog.fens.me/nodejs-https-server/\" target=\"_blank\">Nodejs创建HTTPS服务器</a></p><br><p><a title=\"Nodejs异步异常处理domain\" href=\"http://blog.fens.me/nodejs-core-domain/\" target=\"_blank\">Nodejs异步异常处理domain</a></p><br><p><a title=\"Nodejs加密算法库Crypto\" href=\"http://blog.fens.me/nodejs-crypto/\" target=\"_blank\">Nodejs加密算法库Crypto</a></p><br><p><a title=\"Node.js缓冲模块Buffer\" href=\"http://blog.fens.me/nodejs-buffer/\" target=\"_blank\">Node.js缓冲模块Buffer</a></p><br><p><a title=\"Node.js进程通信模块child_process\" href=\"http://blog.fens.me/nodejs-child-process/\" target=\"_blank\">Node.js进程通信模块child_process</a></p><br><h2>跨界应用 – 创造篇</h2><br><p><a title=\"Nodejs与R跨平台通信\" href=\"http://blog.fens.me/r-rserve-nodejs/\" target=\"_blank\">Nodejs与R跨平台通信</a></p><br><p><a title=\"tty.js打通浏览器与Linux的通道\" href=\"http://blog.fens.me/nodejs-linux-sh-tty/\" target=\"_blank\">tty.js打通浏览器与Linux的通道</a></p><br><p><a title=\"用Highcharts轻松构建交互性图表\" href=\"http://blog.fens.me/nodejs-highcharts/\" target=\"_blank\">用Highcharts轻松构建交互性图表</a></p><br><h2>利剑在手 – 工具篇</h2><br><p><a title=\"RequireJS异步模块加载\" href=\"http://blog.fens.me/nodejs-requirejs/\" target=\"_blank\">RequireJS异步模块加载</a></p><br><p><a title=\"Nodejs临时文件回收器reap\" href=\"http://blog.fens.me/nodejs-gc-reap/\" target=\"_blank\">Nodejs临时文件回收器reap</a></p><br><p><a title=\"Nodejs异步流程控制Async\" href=\"http://blog.fens.me/nodejs-async/\" target=\"_blank\">Nodejs异步流程控制Async</a></p><br><p><a title=\"Async多任务时间管理\" href=\"http://blog.fens.me/nodejs-async-timer/\" target=\"_blank\">Async多任务时间管理</a></p><br><p><a title=\"让Nodejs来管理定时任务later\" href=\"http://blog.fens.me/nodejs-cron-later/\" target=\"_blank\">让Nodejs来管理定时任务later</a></p><br><p><a title=\"wind.js助力异步编程\" href=\"http://blog.fens.me/nodejs-async-windjs/\" target=\"_blank\">wind.js助力异步编程</a></p><br><p><a title=\"UnderscoreJS精巧而强大工具包\" href=\"http://blog.fens.me/nodejs-underscore/\" target=\"_blank\">UnderscoreJS精巧而强大工具包</a></p><br><p><a title=\"Commander写自己的Nodejs命令\" href=\"http://blog.fens.me/nodejs-commander/\" target=\"_blank\">Commander写自己的Nodejs命令</a></p><br><p><a title=\"Stylus让CSS也能编程\" href=\"http://blog.fens.me/nodejs-stylus-css/\" target=\"_blank\">Stylus让CSS也能编程</a></p><br><p><a title=\"Browserify 跑在浏览器上的Node程序\" href=\"http://blog.fens.me/nodejs-browserify/\" target=\"_blank\">Browserify 跑在浏览器上的Node程序</a></p><br><p><a title=\"Retry优雅的失败重试策略\" href=\"http://blog.fens.me/nodejs-retry/\" target=\"_blank\">Retry优雅的失败重试策略</a></p><br><p><a title=\"用UglifyJS2合并压缩混淆JS代码\" href=\"http://blog.fens.me/nodejs-uglifyjs2-js/\" target=\"_blank\">用UglifyJS2合并压缩混淆JS代码</a></p><br><p><a title=\"Marked高效的Markdown解析器\" href=\"http://blog.fens.me/nodejs-markdown-marked/\" target=\"_blank\">Marked高效的Markdown解析器</a></p><br><h2>Web技术 – 应用篇</h2><br><p><a title=\"Hexo在github上构建免费的Web应用\" href=\"http://blog.fens.me/hexo-blog-github/\" target=\"_blank\">Hexo在github上构建免费的Web应用</a></p><br><p><a title=\"Jekyll在github上构建免费的Web应用\" href=\"http://blog.fens.me/jekyll-bootstarp-github/\" target=\"_blank\">Jekyll在github上构建免费的Web应用</a></p><br><p><a href=\"http://blog.fens.me/nodejs-alexa/\" target=\"_blank\" title=\"构建自己的Aleax查询服务\">构建自己的Aleax查询服务</a></p><br><p><a title=\"用WebStorm编辑Markdown\" href=\"http://blog.fens.me/webstorm-markdown/\" target=\"_blank\">用WebStorm编辑Markdown</a></p><br><p><a title=\"30秒制作幻灯片 Cleaver\" href=\"http://blog.fens.me/nodejs-slide-cleaver/\" target=\"_blank\">30秒制作幻灯片 Cleaver</a></p><br><p><a title=\"图片延迟加载库Layzr\" href=\"http://blog.fens.me/nodejs-layzr/\" target=\"_blank\">图片延迟加载库Layzr</a></p><br><p><img src=\"http://blog.fens.me/wp-content/uploads/2016/04/pay50.png\" alt=\"打赏作者\" width=\"600\" height=\"400\" class=\"alignnone size-full wp-image-8388\"></p><br>              <div class=\"clear\"></div><br>          </div>"},{"title":"Redis几种数据结构的基本操作","date":"2014-06-12T15:50:15.000Z","_content":"\nRedis的命令总是很难记，每次用到都去网上查一下，最近得空整理一下，一方面加深印象，另一方面再用的时候也方便查阅。<!-- more --> \n\n*参考：*\n\n 1. [Redis 命令参考-中文版](http://redisdoc.com/)\n 2. [ Redis Command Reference](http://redis.io/commands)\n 3. [Redis Documentation](http://redis.io/documentation)\n\n\n\n\n### set的基本操作\n\n[添加](#setadd)   [查询](#setsee)     [删除](#setdel)    [集合关系操作](#setrelation)\n\n#### <span id = \"setadd\">添加数据</span>\n\n> sadd key  value1 value2 value3...\n\n    dev:0>sadd test:set:01 \"hello\"\n    1     //1表示成功插入一条数据\n    dev:0>sadd test:set:01 \"redis\"\n    1\n    dev:0>sadd test:set:01 \"hello\" \"world\"\n    1     //这里我虽然一次插入两个value，但是返回1，因为\"hello\"已存在\n    dev:0>smembers test:set:01   //查看该key下的value分布：smembers key（see members）\n    \"world\"\n    \"redis\"\n    \"hello\"\n\n#### <span id = \"setsee\">查询数据</span>\n\n - 获取set指定key的所有member\n\n> smembers key   //abbr. of \"see members\"\n\n    dev:0>smembers test:set:01\n    \"world\"\n    \"redis\"\n    \"hello\"\n\n - 判断值是否是set的member。如果值是返回1，否则返回0\n\n> sismember key member  //abbr. of \"see is member\"\n\n    dev:0>sismember test:set:01 \"hello\"\n    1\n    dev:0>sismember test:set:01 \"hi\"\n    0\n\n - 返回set的member个数，如果set不存在，返回0\n\n> scard key\n\n    dev:0>smembers test:set:01\n    \"hell\"\n    \"world\"\n    \"hello\"\n    \"redis\"\n    \"worl\"\n    dev:0>scard test:set:01\n    5\n\n - 从set中返回一个随机member\n\n> srandmember key  //abbr. of \"see random member\"，随机抽奖\n\n    dev:0>srandmember test:set:01\n    \"world\"\n\n#### <span id = \"setdel\">删除数据</span>\n\n - 随机删除指定key的一个value\n\n> spop key   //set pop\n\n    dev:0>spop test:set:01\n    \"redis\"\n    dev:0>smembers test:set:01\n    \"world\"\n    \"hello\"\n    \"worl\"\n    \"hell\"\n\n - 删除指定key的指定value\n\n> srem key member [member ...] \n\n    dev:0>srem test:set:01 \"hell\" 1\n    dev:0>smembers test:set:01\n    \"world\"\n    \"hello\"\n    \"worl\"\n\n - 将source key中的members移动到destination key中\n\n> smove source_key destination_key member\n\n    dev:0>smembers test:set:01\n    \"world\"\n    \"hello\"\n    \"worl\"\n    dev:0>smembers test:set:001\n    \"world\"\n    \"redis\"\n    \"hi\"\n    dev:0>smove test:set:01 test:set:001 \"hello\"\n    1\n    dev:0>smembers test:set:001\n    \"world\"\n    \"hello\"\n    \"redis\"\n    \"hi\"\n    dev:0>smembers test:set:01\n    \"world\"\n    \"worl\"\n\n#### <span id = \"setrelation\">集合关系操作</span>\n\n - 多个set的并集\n\n> sunion key1 key2 key3...  //注意只是求并集，并没有将其存储\n\n    dev:0>smembers set2\n    \"ache\"\n    \"ello\"\n    \"edis\"\n    \"orld\"\n    dev:0>smembers set1\n    \"world\"\n    \"cache\"\n    \"redis\"\n    \"hello\"\n    dev:0>sunion set1 set2\n    \"world\"\n    \"cache\"\n    \"redis\"\n    \"hello\"\n    \"orld\"\n    \"edis\"\n    \"ello\"\n    \"ache\"\n\n - 求并集并将结果存储到set\n\n> sunionstore destination key [key ...]\n\n    dev:0>smembers set1\n    \"world\"\n    \"redis\"\n    dev:0>smembers set2\n    \"ache\"\n    \"orld\"\n    dev:0>sunionstore all set1 set2\n    4\n    dev:0>smembers all\n    \"world\"\n    \"ache\"\n    \"redis\"\n    \"orld\"\n\n - 多个set求交集\n\n> sinter key[key...]  \n> sinterstore destination key [key ...] \n\n    dev:0>smembers set1\n    \"world\"\n    \"redis\"\n    dev:0>smembers set2\n    \"redis\"\n    \"ache\"\n    dev:0>sinter set1 set2\n    \"redis\"\n\n - set中在其他set中不存在member\n\n>  sdiff key[key ...]  \n>  sdiffstore destination key[key...]\n\n    dev:0>smembers set1\n    \"world\"\n    \"redis\"\n    dev:0>smembers set2\n    \"redis\"\n    \"ache\"\n    dev:0>sdiff set1 set2\n    \"world\"\n\n### sorted set的基本操作\n\n[添加](#zsetadd)   [查询](#zsetsee)   [更新](#zsetupdate)    [删除](#zsetdel)    [集合关系操作](#setrelation)\n\n#### <span id = \"zsetadd\">添加/查询数据</span>\n\n> zadd key score member [[score member] [score member] ...]\n\n    local:0>zadd zset:set1 111 redis  \n    local:0>zadd zset:set1 110 hello\n    local:0>zrange zset:set1 0 -1  \n    hello  \n    redis\n\n\n#### <span id = \"zsetsee\">查询数据</span>\n\n> 语法：zrange key start stop [withscores]\n> 解释：返回有序集key中指定范围[通过索引 start stop]的member[及其score]；\n\n    local:0>zrange zset:set1 0 -1  \n    hello  \n    redis\n    local:0>zrange zset:set1 0 -1 withscores \n\thello   \n\t110\n\tredis\n\t111\n**注意：**返回数据自动按照score排序，start参数0表示第一个元素开始；stop参数-1表示至最后一个元素，-2表示至倒数第二个元素\n\n>语法： zcount key min max \n>解释：统计key中score值介于min 和max之间的member个数\n\n    local:0>zrange zset:set1 0 -1 withscores\n    hello\n    110\n    redis\n    111\n    local:0>zcount zset:set1 0 200\n    2\n    local:0>zcount zset:set1 0 110\n    1\n\n> 语法：zscore key member \n> 解释：返回有续集key中member的score\n\t\n\tlocal:0>zscore zset:set1 hello\n\t110\n> \n> \n> 语法：zrevrange key start stop [withscores]\n> 解释：根据score按降序排列返回有续集key中指定范围[通过索引start stop]的member[及score]\n\n    local:0>zrevrange zset:set1 0 -1 withscores\n    redis\n    111\n    hello\n    110\n\n> 语法：zrangebyscore key min max [withscores] [limit offset count]\n> 解释：返回有续集key中，score大于等于min并且小于等于max的member。返回结果按照score递增的次序排列。可选参数limit\n> 指定返回结果的数量区间。\n\n    local:0>zrange zset:set1 0 -1 withscores\n    world\n    50\n    hello\n    110\n    redis\n    111\n    local:0>zrangebyscore zset:set1 0 200 limit 0 2\n    world\n    hello\n\n**注意：** zrevrangebyscore参数同理返回倒序排列的指定数据\n\n> 语法：zrevrank key member \n> 解释：根据score从高到低排序，返回member在有序集key中的index\n\n    local:0>zrange zset:set1 0 -1\n    world\n    hello\n    redis\n    local:0>zrank zset:set1 redis\n    2\n\n> 语法：zcard key \n> 解释：返回有续集key的基数\n\nlocal:0>zcard zset:set1\n3\n\n#### <span id = \"zsetupdate\">更新数据</span>\n\n> 语法：zincrby key increment member\n> 解释：有续集key的member增加增量increment，返回增加后的score\n\n    local:0>zscore zset:set1 redis\n    111\n    local:0>zincrby zset:set1 500 redis\n    611\n    local:0>zscore zset:set1 redis\n    611\n\n#### <span id = \"zsetdel\">更新数据</span>\n\n> 语法：zrem key member [member ...] \n> 解释：移除有续集中的一个或多个member，返回移除member的个数\n\n    local:0>zrem zset:set1 world\n    1\n    local:0>zrange zset:set1 0 -1\n    hello\n    redis\n\n\n> 语法：zremrangebyrank key start stop \n> 解释：移除有续集中指定排名范围[start stop]的元素，返回移除元素个数\n\n    redis 127.0.0.1:6379> zrange score 0 -1\n    1) \"zhangsan\"\n    2) \"lisi\"\n    3) \"wangwu\"\n    4) \"liuli\"\n    redis 127.0.0.1:6379> zremrangebyrank score 0 1\n    (integer) 2\n    redis 127.0.0.1:6379> zrange score 0 -1\n    1) \"wangwu\"\n    2) \"liuli\"\n\n> 语法：zremrangebyscore key min max\n> 解释：移除有续集中的member，移除member的score大于等于min小于等于max；返回移除元素个数\n\n    redis 127.0.0.1:6379> zrange score 0 -1 withscores\n    1) \"wangwu\"\n    2) \"249\"\n    3) \"liuli\"\n    4) \"400\"\n    redis 127.0.0.1:6379> zremrangebyscore score 248 250\n    (integer) 1\n    redis 127.0.0.1:6379> zrange score 0 -1 withscores\n    1) \"liuli\"\n    2) \"400\"\n\n<br>\nString、Hash以及List未完待续。。。","source":"_posts/redis.md","raw":"title: Redis几种数据结构的基本操作\ndate: 2014-06-12 23:50:15\ncategories: Tools\ntags: [Tools, 筆記,redis]\n---\n\nRedis的命令总是很难记，每次用到都去网上查一下，最近得空整理一下，一方面加深印象，另一方面再用的时候也方便查阅。<!-- more --> \n\n*参考：*\n\n 1. [Redis 命令参考-中文版](http://redisdoc.com/)\n 2. [ Redis Command Reference](http://redis.io/commands)\n 3. [Redis Documentation](http://redis.io/documentation)\n\n\n\n\n### set的基本操作\n\n[添加](#setadd)   [查询](#setsee)     [删除](#setdel)    [集合关系操作](#setrelation)\n\n#### <span id = \"setadd\">添加数据</span>\n\n> sadd key  value1 value2 value3...\n\n    dev:0>sadd test:set:01 \"hello\"\n    1     //1表示成功插入一条数据\n    dev:0>sadd test:set:01 \"redis\"\n    1\n    dev:0>sadd test:set:01 \"hello\" \"world\"\n    1     //这里我虽然一次插入两个value，但是返回1，因为\"hello\"已存在\n    dev:0>smembers test:set:01   //查看该key下的value分布：smembers key（see members）\n    \"world\"\n    \"redis\"\n    \"hello\"\n\n#### <span id = \"setsee\">查询数据</span>\n\n - 获取set指定key的所有member\n\n> smembers key   //abbr. of \"see members\"\n\n    dev:0>smembers test:set:01\n    \"world\"\n    \"redis\"\n    \"hello\"\n\n - 判断值是否是set的member。如果值是返回1，否则返回0\n\n> sismember key member  //abbr. of \"see is member\"\n\n    dev:0>sismember test:set:01 \"hello\"\n    1\n    dev:0>sismember test:set:01 \"hi\"\n    0\n\n - 返回set的member个数，如果set不存在，返回0\n\n> scard key\n\n    dev:0>smembers test:set:01\n    \"hell\"\n    \"world\"\n    \"hello\"\n    \"redis\"\n    \"worl\"\n    dev:0>scard test:set:01\n    5\n\n - 从set中返回一个随机member\n\n> srandmember key  //abbr. of \"see random member\"，随机抽奖\n\n    dev:0>srandmember test:set:01\n    \"world\"\n\n#### <span id = \"setdel\">删除数据</span>\n\n - 随机删除指定key的一个value\n\n> spop key   //set pop\n\n    dev:0>spop test:set:01\n    \"redis\"\n    dev:0>smembers test:set:01\n    \"world\"\n    \"hello\"\n    \"worl\"\n    \"hell\"\n\n - 删除指定key的指定value\n\n> srem key member [member ...] \n\n    dev:0>srem test:set:01 \"hell\" 1\n    dev:0>smembers test:set:01\n    \"world\"\n    \"hello\"\n    \"worl\"\n\n - 将source key中的members移动到destination key中\n\n> smove source_key destination_key member\n\n    dev:0>smembers test:set:01\n    \"world\"\n    \"hello\"\n    \"worl\"\n    dev:0>smembers test:set:001\n    \"world\"\n    \"redis\"\n    \"hi\"\n    dev:0>smove test:set:01 test:set:001 \"hello\"\n    1\n    dev:0>smembers test:set:001\n    \"world\"\n    \"hello\"\n    \"redis\"\n    \"hi\"\n    dev:0>smembers test:set:01\n    \"world\"\n    \"worl\"\n\n#### <span id = \"setrelation\">集合关系操作</span>\n\n - 多个set的并集\n\n> sunion key1 key2 key3...  //注意只是求并集，并没有将其存储\n\n    dev:0>smembers set2\n    \"ache\"\n    \"ello\"\n    \"edis\"\n    \"orld\"\n    dev:0>smembers set1\n    \"world\"\n    \"cache\"\n    \"redis\"\n    \"hello\"\n    dev:0>sunion set1 set2\n    \"world\"\n    \"cache\"\n    \"redis\"\n    \"hello\"\n    \"orld\"\n    \"edis\"\n    \"ello\"\n    \"ache\"\n\n - 求并集并将结果存储到set\n\n> sunionstore destination key [key ...]\n\n    dev:0>smembers set1\n    \"world\"\n    \"redis\"\n    dev:0>smembers set2\n    \"ache\"\n    \"orld\"\n    dev:0>sunionstore all set1 set2\n    4\n    dev:0>smembers all\n    \"world\"\n    \"ache\"\n    \"redis\"\n    \"orld\"\n\n - 多个set求交集\n\n> sinter key[key...]  \n> sinterstore destination key [key ...] \n\n    dev:0>smembers set1\n    \"world\"\n    \"redis\"\n    dev:0>smembers set2\n    \"redis\"\n    \"ache\"\n    dev:0>sinter set1 set2\n    \"redis\"\n\n - set中在其他set中不存在member\n\n>  sdiff key[key ...]  \n>  sdiffstore destination key[key...]\n\n    dev:0>smembers set1\n    \"world\"\n    \"redis\"\n    dev:0>smembers set2\n    \"redis\"\n    \"ache\"\n    dev:0>sdiff set1 set2\n    \"world\"\n\n### sorted set的基本操作\n\n[添加](#zsetadd)   [查询](#zsetsee)   [更新](#zsetupdate)    [删除](#zsetdel)    [集合关系操作](#setrelation)\n\n#### <span id = \"zsetadd\">添加/查询数据</span>\n\n> zadd key score member [[score member] [score member] ...]\n\n    local:0>zadd zset:set1 111 redis  \n    local:0>zadd zset:set1 110 hello\n    local:0>zrange zset:set1 0 -1  \n    hello  \n    redis\n\n\n#### <span id = \"zsetsee\">查询数据</span>\n\n> 语法：zrange key start stop [withscores]\n> 解释：返回有序集key中指定范围[通过索引 start stop]的member[及其score]；\n\n    local:0>zrange zset:set1 0 -1  \n    hello  \n    redis\n    local:0>zrange zset:set1 0 -1 withscores \n\thello   \n\t110\n\tredis\n\t111\n**注意：**返回数据自动按照score排序，start参数0表示第一个元素开始；stop参数-1表示至最后一个元素，-2表示至倒数第二个元素\n\n>语法： zcount key min max \n>解释：统计key中score值介于min 和max之间的member个数\n\n    local:0>zrange zset:set1 0 -1 withscores\n    hello\n    110\n    redis\n    111\n    local:0>zcount zset:set1 0 200\n    2\n    local:0>zcount zset:set1 0 110\n    1\n\n> 语法：zscore key member \n> 解释：返回有续集key中member的score\n\t\n\tlocal:0>zscore zset:set1 hello\n\t110\n> \n> \n> 语法：zrevrange key start stop [withscores]\n> 解释：根据score按降序排列返回有续集key中指定范围[通过索引start stop]的member[及score]\n\n    local:0>zrevrange zset:set1 0 -1 withscores\n    redis\n    111\n    hello\n    110\n\n> 语法：zrangebyscore key min max [withscores] [limit offset count]\n> 解释：返回有续集key中，score大于等于min并且小于等于max的member。返回结果按照score递增的次序排列。可选参数limit\n> 指定返回结果的数量区间。\n\n    local:0>zrange zset:set1 0 -1 withscores\n    world\n    50\n    hello\n    110\n    redis\n    111\n    local:0>zrangebyscore zset:set1 0 200 limit 0 2\n    world\n    hello\n\n**注意：** zrevrangebyscore参数同理返回倒序排列的指定数据\n\n> 语法：zrevrank key member \n> 解释：根据score从高到低排序，返回member在有序集key中的index\n\n    local:0>zrange zset:set1 0 -1\n    world\n    hello\n    redis\n    local:0>zrank zset:set1 redis\n    2\n\n> 语法：zcard key \n> 解释：返回有续集key的基数\n\nlocal:0>zcard zset:set1\n3\n\n#### <span id = \"zsetupdate\">更新数据</span>\n\n> 语法：zincrby key increment member\n> 解释：有续集key的member增加增量increment，返回增加后的score\n\n    local:0>zscore zset:set1 redis\n    111\n    local:0>zincrby zset:set1 500 redis\n    611\n    local:0>zscore zset:set1 redis\n    611\n\n#### <span id = \"zsetdel\">更新数据</span>\n\n> 语法：zrem key member [member ...] \n> 解释：移除有续集中的一个或多个member，返回移除member的个数\n\n    local:0>zrem zset:set1 world\n    1\n    local:0>zrange zset:set1 0 -1\n    hello\n    redis\n\n\n> 语法：zremrangebyrank key start stop \n> 解释：移除有续集中指定排名范围[start stop]的元素，返回移除元素个数\n\n    redis 127.0.0.1:6379> zrange score 0 -1\n    1) \"zhangsan\"\n    2) \"lisi\"\n    3) \"wangwu\"\n    4) \"liuli\"\n    redis 127.0.0.1:6379> zremrangebyrank score 0 1\n    (integer) 2\n    redis 127.0.0.1:6379> zrange score 0 -1\n    1) \"wangwu\"\n    2) \"liuli\"\n\n> 语法：zremrangebyscore key min max\n> 解释：移除有续集中的member，移除member的score大于等于min小于等于max；返回移除元素个数\n\n    redis 127.0.0.1:6379> zrange score 0 -1 withscores\n    1) \"wangwu\"\n    2) \"249\"\n    3) \"liuli\"\n    4) \"400\"\n    redis 127.0.0.1:6379> zremrangebyscore score 248 250\n    (integer) 1\n    redis 127.0.0.1:6379> zrange score 0 -1 withscores\n    1) \"liuli\"\n    2) \"400\"\n\n<br>\nString、Hash以及List未完待续。。。","slug":"redis","published":1,"updated":"2017-02-20T03:11:08.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496equ3000v2sl12ge970ju","content":"<p>Redis的命令总是很难记，每次用到都去网上查一下，最近得空整理一下，一方面加深印象，另一方面再用的时候也方便查阅。<a id=\"more\"></a> </p>\n<p><em>参考：</em></p>\n<ol>\n<li><a href=\"http://redisdoc.com/\" target=\"_blank\" rel=\"external\">Redis 命令参考-中文版</a></li>\n<li><a href=\"http://redis.io/commands\" target=\"_blank\" rel=\"external\"> Redis Command Reference</a></li>\n<li><a href=\"http://redis.io/documentation\" target=\"_blank\" rel=\"external\">Redis Documentation</a></li>\n</ol>\n<h3 id=\"set的基本操作\"><a href=\"#set的基本操作\" class=\"headerlink\" title=\"set的基本操作\"></a>set的基本操作</h3><p><a href=\"#setadd\">添加</a>   <a href=\"#setsee\">查询</a>     <a href=\"#setdel\">删除</a>    <a href=\"#setrelation\">集合关系操作</a></p>\n<h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a><span id=\"setadd\">添加数据</span></h4><blockquote>\n<p>sadd key  value1 value2 value3…</p>\n</blockquote>\n<pre><code>dev:0&gt;sadd test:set:01 &quot;hello&quot;\n1     //1表示成功插入一条数据\ndev:0&gt;sadd test:set:01 &quot;redis&quot;\n1\ndev:0&gt;sadd test:set:01 &quot;hello&quot; &quot;world&quot;\n1     //这里我虽然一次插入两个value，但是返回1，因为&quot;hello&quot;已存在\ndev:0&gt;smembers test:set:01   //查看该key下的value分布：smembers key（see members）\n&quot;world&quot;\n&quot;redis&quot;\n&quot;hello&quot;\n</code></pre><h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a><span id=\"setsee\">查询数据</span></h4><ul>\n<li>获取set指定key的所有member</li>\n</ul>\n<blockquote>\n<p>smembers key   //abbr. of “see members”</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;redis&quot;\n&quot;hello&quot;\n</code></pre><ul>\n<li>判断值是否是set的member。如果值是返回1，否则返回0</li>\n</ul>\n<blockquote>\n<p>sismember key member  //abbr. of “see is member”</p>\n</blockquote>\n<pre><code>dev:0&gt;sismember test:set:01 &quot;hello&quot;\n1\ndev:0&gt;sismember test:set:01 &quot;hi&quot;\n0\n</code></pre><ul>\n<li>返回set的member个数，如果set不存在，返回0</li>\n</ul>\n<blockquote>\n<p>scard key</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers test:set:01\n&quot;hell&quot;\n&quot;world&quot;\n&quot;hello&quot;\n&quot;redis&quot;\n&quot;worl&quot;\ndev:0&gt;scard test:set:01\n5\n</code></pre><ul>\n<li>从set中返回一个随机member</li>\n</ul>\n<blockquote>\n<p>srandmember key  //abbr. of “see random member”，随机抽奖</p>\n</blockquote>\n<pre><code>dev:0&gt;srandmember test:set:01\n&quot;world&quot;\n</code></pre><h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a><span id=\"setdel\">删除数据</span></h4><ul>\n<li>随机删除指定key的一个value</li>\n</ul>\n<blockquote>\n<p>spop key   //set pop</p>\n</blockquote>\n<pre><code>dev:0&gt;spop test:set:01\n&quot;redis&quot;\ndev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;hello&quot;\n&quot;worl&quot;\n&quot;hell&quot;\n</code></pre><ul>\n<li>删除指定key的指定value</li>\n</ul>\n<blockquote>\n<p>srem key member [member …] </p>\n</blockquote>\n<pre><code>dev:0&gt;srem test:set:01 &quot;hell&quot; 1\ndev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;hello&quot;\n&quot;worl&quot;\n</code></pre><ul>\n<li>将source key中的members移动到destination key中</li>\n</ul>\n<blockquote>\n<p>smove source_key destination_key member</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;hello&quot;\n&quot;worl&quot;\ndev:0&gt;smembers test:set:001\n&quot;world&quot;\n&quot;redis&quot;\n&quot;hi&quot;\ndev:0&gt;smove test:set:01 test:set:001 &quot;hello&quot;\n1\ndev:0&gt;smembers test:set:001\n&quot;world&quot;\n&quot;hello&quot;\n&quot;redis&quot;\n&quot;hi&quot;\ndev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;worl&quot;\n</code></pre><h4 id=\"集合关系操作\"><a href=\"#集合关系操作\" class=\"headerlink\" title=\"集合关系操作\"></a><span id=\"setrelation\">集合关系操作</span></h4><ul>\n<li>多个set的并集</li>\n</ul>\n<blockquote>\n<p>sunion key1 key2 key3…  //注意只是求并集，并没有将其存储</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set2\n&quot;ache&quot;\n&quot;ello&quot;\n&quot;edis&quot;\n&quot;orld&quot;\ndev:0&gt;smembers set1\n&quot;world&quot;\n&quot;cache&quot;\n&quot;redis&quot;\n&quot;hello&quot;\ndev:0&gt;sunion set1 set2\n&quot;world&quot;\n&quot;cache&quot;\n&quot;redis&quot;\n&quot;hello&quot;\n&quot;orld&quot;\n&quot;edis&quot;\n&quot;ello&quot;\n&quot;ache&quot;\n</code></pre><ul>\n<li>求并集并将结果存储到set</li>\n</ul>\n<blockquote>\n<p>sunionstore destination key [key …]</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set1\n&quot;world&quot;\n&quot;redis&quot;\ndev:0&gt;smembers set2\n&quot;ache&quot;\n&quot;orld&quot;\ndev:0&gt;sunionstore all set1 set2\n4\ndev:0&gt;smembers all\n&quot;world&quot;\n&quot;ache&quot;\n&quot;redis&quot;\n&quot;orld&quot;\n</code></pre><ul>\n<li>多个set求交集</li>\n</ul>\n<blockquote>\n<p>sinter key[key…]<br>sinterstore destination key [key …] </p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set1\n&quot;world&quot;\n&quot;redis&quot;\ndev:0&gt;smembers set2\n&quot;redis&quot;\n&quot;ache&quot;\ndev:0&gt;sinter set1 set2\n&quot;redis&quot;\n</code></pre><ul>\n<li>set中在其他set中不存在member</li>\n</ul>\n<blockquote>\n<p> sdiff key[key …]<br> sdiffstore destination key[key…]</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set1\n&quot;world&quot;\n&quot;redis&quot;\ndev:0&gt;smembers set2\n&quot;redis&quot;\n&quot;ache&quot;\ndev:0&gt;sdiff set1 set2\n&quot;world&quot;\n</code></pre><h3 id=\"sorted-set的基本操作\"><a href=\"#sorted-set的基本操作\" class=\"headerlink\" title=\"sorted set的基本操作\"></a>sorted set的基本操作</h3><p><a href=\"#zsetadd\">添加</a>   <a href=\"#zsetsee\">查询</a>   <a href=\"#zsetupdate\">更新</a>    <a href=\"#zsetdel\">删除</a>    <a href=\"#setrelation\">集合关系操作</a></p>\n<h4 id=\"添加-查询数据\"><a href=\"#添加-查询数据\" class=\"headerlink\" title=\"添加/查询数据\"></a><span id=\"zsetadd\">添加/查询数据</span></h4><blockquote>\n<p>zadd key score member [[score member] [score member] …]</p>\n</blockquote>\n<pre><code>local:0&gt;zadd zset:set1 111 redis  \nlocal:0&gt;zadd zset:set1 110 hello\nlocal:0&gt;zrange zset:set1 0 -1  \nhello  \nredis\n</code></pre><h4 id=\"查询数据-1\"><a href=\"#查询数据-1\" class=\"headerlink\" title=\"查询数据\"></a><span id=\"zsetsee\">查询数据</span></h4><blockquote>\n<p>语法：zrange key start stop [withscores]<br>解释：返回有序集key中指定范围[通过索引 start stop]的member[及其score]；</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1  \nhello  \nredis\nlocal:0&gt;zrange zset:set1 0 -1 withscores \nhello   \n110\nredis\n111\n</code></pre><p><strong>注意：</strong>返回数据自动按照score排序，start参数0表示第一个元素开始；stop参数-1表示至最后一个元素，-2表示至倒数第二个元素</p>\n<blockquote>\n<p>语法： zcount key min max<br>解释：统计key中score值介于min 和max之间的member个数</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1 withscores\nhello\n110\nredis\n111\nlocal:0&gt;zcount zset:set1 0 200\n2\nlocal:0&gt;zcount zset:set1 0 110\n1\n</code></pre><blockquote>\n<p>语法：zscore key member<br>解释：返回有续集key中member的score</p>\n</blockquote>\n<pre><code>local:0&gt;zscore zset:set1 hello\n110\n</code></pre><blockquote>\n<p>语法：zrevrange key start stop [withscores]<br>解释：根据score按降序排列返回有续集key中指定范围[通过索引start stop]的member[及score]</p>\n</blockquote>\n<pre><code>local:0&gt;zrevrange zset:set1 0 -1 withscores\nredis\n111\nhello\n110\n</code></pre><blockquote>\n<p>语法：zrangebyscore key min max [withscores] [limit offset count]<br>解释：返回有续集key中，score大于等于min并且小于等于max的member。返回结果按照score递增的次序排列。可选参数limit<br>指定返回结果的数量区间。</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1 withscores\nworld\n50\nhello\n110\nredis\n111\nlocal:0&gt;zrangebyscore zset:set1 0 200 limit 0 2\nworld\nhello\n</code></pre><p><strong>注意：</strong> zrevrangebyscore参数同理返回倒序排列的指定数据</p>\n<blockquote>\n<p>语法：zrevrank key member<br>解释：根据score从高到低排序，返回member在有序集key中的index</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1\nworld\nhello\nredis\nlocal:0&gt;zrank zset:set1 redis\n2\n</code></pre><blockquote>\n<p>语法：zcard key<br>解释：返回有续集key的基数</p>\n</blockquote>\n<p>local:0&gt;zcard zset:set1<br>3</p>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a><span id=\"zsetupdate\">更新数据</span></h4><blockquote>\n<p>语法：zincrby key increment member<br>解释：有续集key的member增加增量increment，返回增加后的score</p>\n</blockquote>\n<pre><code>local:0&gt;zscore zset:set1 redis\n111\nlocal:0&gt;zincrby zset:set1 500 redis\n611\nlocal:0&gt;zscore zset:set1 redis\n611\n</code></pre><h4 id=\"更新数据-1\"><a href=\"#更新数据-1\" class=\"headerlink\" title=\"更新数据\"></a><span id=\"zsetdel\">更新数据</span></h4><blockquote>\n<p>语法：zrem key member [member …]<br>解释：移除有续集中的一个或多个member，返回移除member的个数</p>\n</blockquote>\n<pre><code>local:0&gt;zrem zset:set1 world\n1\nlocal:0&gt;zrange zset:set1 0 -1\nhello\nredis\n</code></pre><blockquote>\n<p>语法：zremrangebyrank key start stop<br>解释：移除有续集中指定排名范围[start stop]的元素，返回移除元素个数</p>\n</blockquote>\n<pre><code>redis 127.0.0.1:6379&gt; zrange score 0 -1\n1) &quot;zhangsan&quot;\n2) &quot;lisi&quot;\n3) &quot;wangwu&quot;\n4) &quot;liuli&quot;\nredis 127.0.0.1:6379&gt; zremrangebyrank score 0 1\n(integer) 2\nredis 127.0.0.1:6379&gt; zrange score 0 -1\n1) &quot;wangwu&quot;\n2) &quot;liuli&quot;\n</code></pre><blockquote>\n<p>语法：zremrangebyscore key min max<br>解释：移除有续集中的member，移除member的score大于等于min小于等于max；返回移除元素个数</p>\n</blockquote>\n<pre><code>redis 127.0.0.1:6379&gt; zrange score 0 -1 withscores\n1) &quot;wangwu&quot;\n2) &quot;249&quot;\n3) &quot;liuli&quot;\n4) &quot;400&quot;\nredis 127.0.0.1:6379&gt; zremrangebyscore score 248 250\n(integer) 1\nredis 127.0.0.1:6379&gt; zrange score 0 -1 withscores\n1) &quot;liuli&quot;\n2) &quot;400&quot;\n</code></pre><p><br><br>String、Hash以及List未完待续。。。</p>\n","excerpt":"<p>Redis的命令总是很难记，每次用到都去网上查一下，最近得空整理一下，一方面加深印象，另一方面再用的时候也方便查阅。","more":"</p>\n<p><em>参考：</em></p>\n<ol>\n<li><a href=\"http://redisdoc.com/\">Redis 命令参考-中文版</a></li>\n<li><a href=\"http://redis.io/commands\"> Redis Command Reference</a></li>\n<li><a href=\"http://redis.io/documentation\">Redis Documentation</a></li>\n</ol>\n<h3 id=\"set的基本操作\"><a href=\"#set的基本操作\" class=\"headerlink\" title=\"set的基本操作\"></a>set的基本操作</h3><p><a href=\"#setadd\">添加</a>   <a href=\"#setsee\">查询</a>     <a href=\"#setdel\">删除</a>    <a href=\"#setrelation\">集合关系操作</a></p>\n<h4 id=\"添加数据\"><a href=\"#添加数据\" class=\"headerlink\" title=\"添加数据\"></a><span id = \"setadd\">添加数据</span></h4><blockquote>\n<p>sadd key  value1 value2 value3…</p>\n</blockquote>\n<pre><code>dev:0&gt;sadd test:set:01 &quot;hello&quot;\n1     //1表示成功插入一条数据\ndev:0&gt;sadd test:set:01 &quot;redis&quot;\n1\ndev:0&gt;sadd test:set:01 &quot;hello&quot; &quot;world&quot;\n1     //这里我虽然一次插入两个value，但是返回1，因为&quot;hello&quot;已存在\ndev:0&gt;smembers test:set:01   //查看该key下的value分布：smembers key（see members）\n&quot;world&quot;\n&quot;redis&quot;\n&quot;hello&quot;\n</code></pre><h4 id=\"查询数据\"><a href=\"#查询数据\" class=\"headerlink\" title=\"查询数据\"></a><span id = \"setsee\">查询数据</span></h4><ul>\n<li>获取set指定key的所有member</li>\n</ul>\n<blockquote>\n<p>smembers key   //abbr. of “see members”</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;redis&quot;\n&quot;hello&quot;\n</code></pre><ul>\n<li>判断值是否是set的member。如果值是返回1，否则返回0</li>\n</ul>\n<blockquote>\n<p>sismember key member  //abbr. of “see is member”</p>\n</blockquote>\n<pre><code>dev:0&gt;sismember test:set:01 &quot;hello&quot;\n1\ndev:0&gt;sismember test:set:01 &quot;hi&quot;\n0\n</code></pre><ul>\n<li>返回set的member个数，如果set不存在，返回0</li>\n</ul>\n<blockquote>\n<p>scard key</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers test:set:01\n&quot;hell&quot;\n&quot;world&quot;\n&quot;hello&quot;\n&quot;redis&quot;\n&quot;worl&quot;\ndev:0&gt;scard test:set:01\n5\n</code></pre><ul>\n<li>从set中返回一个随机member</li>\n</ul>\n<blockquote>\n<p>srandmember key  //abbr. of “see random member”，随机抽奖</p>\n</blockquote>\n<pre><code>dev:0&gt;srandmember test:set:01\n&quot;world&quot;\n</code></pre><h4 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a><span id = \"setdel\">删除数据</span></h4><ul>\n<li>随机删除指定key的一个value</li>\n</ul>\n<blockquote>\n<p>spop key   //set pop</p>\n</blockquote>\n<pre><code>dev:0&gt;spop test:set:01\n&quot;redis&quot;\ndev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;hello&quot;\n&quot;worl&quot;\n&quot;hell&quot;\n</code></pre><ul>\n<li>删除指定key的指定value</li>\n</ul>\n<blockquote>\n<p>srem key member [member …] </p>\n</blockquote>\n<pre><code>dev:0&gt;srem test:set:01 &quot;hell&quot; 1\ndev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;hello&quot;\n&quot;worl&quot;\n</code></pre><ul>\n<li>将source key中的members移动到destination key中</li>\n</ul>\n<blockquote>\n<p>smove source_key destination_key member</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;hello&quot;\n&quot;worl&quot;\ndev:0&gt;smembers test:set:001\n&quot;world&quot;\n&quot;redis&quot;\n&quot;hi&quot;\ndev:0&gt;smove test:set:01 test:set:001 &quot;hello&quot;\n1\ndev:0&gt;smembers test:set:001\n&quot;world&quot;\n&quot;hello&quot;\n&quot;redis&quot;\n&quot;hi&quot;\ndev:0&gt;smembers test:set:01\n&quot;world&quot;\n&quot;worl&quot;\n</code></pre><h4 id=\"集合关系操作\"><a href=\"#集合关系操作\" class=\"headerlink\" title=\"集合关系操作\"></a><span id = \"setrelation\">集合关系操作</span></h4><ul>\n<li>多个set的并集</li>\n</ul>\n<blockquote>\n<p>sunion key1 key2 key3…  //注意只是求并集，并没有将其存储</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set2\n&quot;ache&quot;\n&quot;ello&quot;\n&quot;edis&quot;\n&quot;orld&quot;\ndev:0&gt;smembers set1\n&quot;world&quot;\n&quot;cache&quot;\n&quot;redis&quot;\n&quot;hello&quot;\ndev:0&gt;sunion set1 set2\n&quot;world&quot;\n&quot;cache&quot;\n&quot;redis&quot;\n&quot;hello&quot;\n&quot;orld&quot;\n&quot;edis&quot;\n&quot;ello&quot;\n&quot;ache&quot;\n</code></pre><ul>\n<li>求并集并将结果存储到set</li>\n</ul>\n<blockquote>\n<p>sunionstore destination key [key …]</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set1\n&quot;world&quot;\n&quot;redis&quot;\ndev:0&gt;smembers set2\n&quot;ache&quot;\n&quot;orld&quot;\ndev:0&gt;sunionstore all set1 set2\n4\ndev:0&gt;smembers all\n&quot;world&quot;\n&quot;ache&quot;\n&quot;redis&quot;\n&quot;orld&quot;\n</code></pre><ul>\n<li>多个set求交集</li>\n</ul>\n<blockquote>\n<p>sinter key[key…]<br>sinterstore destination key [key …] </p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set1\n&quot;world&quot;\n&quot;redis&quot;\ndev:0&gt;smembers set2\n&quot;redis&quot;\n&quot;ache&quot;\ndev:0&gt;sinter set1 set2\n&quot;redis&quot;\n</code></pre><ul>\n<li>set中在其他set中不存在member</li>\n</ul>\n<blockquote>\n<p> sdiff key[key …]<br> sdiffstore destination key[key…]</p>\n</blockquote>\n<pre><code>dev:0&gt;smembers set1\n&quot;world&quot;\n&quot;redis&quot;\ndev:0&gt;smembers set2\n&quot;redis&quot;\n&quot;ache&quot;\ndev:0&gt;sdiff set1 set2\n&quot;world&quot;\n</code></pre><h3 id=\"sorted-set的基本操作\"><a href=\"#sorted-set的基本操作\" class=\"headerlink\" title=\"sorted set的基本操作\"></a>sorted set的基本操作</h3><p><a href=\"#zsetadd\">添加</a>   <a href=\"#zsetsee\">查询</a>   <a href=\"#zsetupdate\">更新</a>    <a href=\"#zsetdel\">删除</a>    <a href=\"#setrelation\">集合关系操作</a></p>\n<h4 id=\"添加-查询数据\"><a href=\"#添加-查询数据\" class=\"headerlink\" title=\"添加/查询数据\"></a><span id = \"zsetadd\">添加/查询数据</span></h4><blockquote>\n<p>zadd key score member [[score member] [score member] …]</p>\n</blockquote>\n<pre><code>local:0&gt;zadd zset:set1 111 redis  \nlocal:0&gt;zadd zset:set1 110 hello\nlocal:0&gt;zrange zset:set1 0 -1  \nhello  \nredis\n</code></pre><h4 id=\"查询数据-1\"><a href=\"#查询数据-1\" class=\"headerlink\" title=\"查询数据\"></a><span id = \"zsetsee\">查询数据</span></h4><blockquote>\n<p>语法：zrange key start stop [withscores]<br>解释：返回有序集key中指定范围[通过索引 start stop]的member[及其score]；</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1  \nhello  \nredis\nlocal:0&gt;zrange zset:set1 0 -1 withscores \nhello   \n110\nredis\n111\n</code></pre><p><strong>注意：</strong>返回数据自动按照score排序，start参数0表示第一个元素开始；stop参数-1表示至最后一个元素，-2表示至倒数第二个元素</p>\n<blockquote>\n<p>语法： zcount key min max<br>解释：统计key中score值介于min 和max之间的member个数</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1 withscores\nhello\n110\nredis\n111\nlocal:0&gt;zcount zset:set1 0 200\n2\nlocal:0&gt;zcount zset:set1 0 110\n1\n</code></pre><blockquote>\n<p>语法：zscore key member<br>解释：返回有续集key中member的score</p>\n</blockquote>\n<pre><code>local:0&gt;zscore zset:set1 hello\n110\n</code></pre><blockquote>\n<p>语法：zrevrange key start stop [withscores]<br>解释：根据score按降序排列返回有续集key中指定范围[通过索引start stop]的member[及score]</p>\n</blockquote>\n<pre><code>local:0&gt;zrevrange zset:set1 0 -1 withscores\nredis\n111\nhello\n110\n</code></pre><blockquote>\n<p>语法：zrangebyscore key min max [withscores] [limit offset count]<br>解释：返回有续集key中，score大于等于min并且小于等于max的member。返回结果按照score递增的次序排列。可选参数limit<br>指定返回结果的数量区间。</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1 withscores\nworld\n50\nhello\n110\nredis\n111\nlocal:0&gt;zrangebyscore zset:set1 0 200 limit 0 2\nworld\nhello\n</code></pre><p><strong>注意：</strong> zrevrangebyscore参数同理返回倒序排列的指定数据</p>\n<blockquote>\n<p>语法：zrevrank key member<br>解释：根据score从高到低排序，返回member在有序集key中的index</p>\n</blockquote>\n<pre><code>local:0&gt;zrange zset:set1 0 -1\nworld\nhello\nredis\nlocal:0&gt;zrank zset:set1 redis\n2\n</code></pre><blockquote>\n<p>语法：zcard key<br>解释：返回有续集key的基数</p>\n</blockquote>\n<p>local:0&gt;zcard zset:set1<br>3</p>\n<h4 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a><span id = \"zsetupdate\">更新数据</span></h4><blockquote>\n<p>语法：zincrby key increment member<br>解释：有续集key的member增加增量increment，返回增加后的score</p>\n</blockquote>\n<pre><code>local:0&gt;zscore zset:set1 redis\n111\nlocal:0&gt;zincrby zset:set1 500 redis\n611\nlocal:0&gt;zscore zset:set1 redis\n611\n</code></pre><h4 id=\"更新数据-1\"><a href=\"#更新数据-1\" class=\"headerlink\" title=\"更新数据\"></a><span id = \"zsetdel\">更新数据</span></h4><blockquote>\n<p>语法：zrem key member [member …]<br>解释：移除有续集中的一个或多个member，返回移除member的个数</p>\n</blockquote>\n<pre><code>local:0&gt;zrem zset:set1 world\n1\nlocal:0&gt;zrange zset:set1 0 -1\nhello\nredis\n</code></pre><blockquote>\n<p>语法：zremrangebyrank key start stop<br>解释：移除有续集中指定排名范围[start stop]的元素，返回移除元素个数</p>\n</blockquote>\n<pre><code>redis 127.0.0.1:6379&gt; zrange score 0 -1\n1) &quot;zhangsan&quot;\n2) &quot;lisi&quot;\n3) &quot;wangwu&quot;\n4) &quot;liuli&quot;\nredis 127.0.0.1:6379&gt; zremrangebyrank score 0 1\n(integer) 2\nredis 127.0.0.1:6379&gt; zrange score 0 -1\n1) &quot;wangwu&quot;\n2) &quot;liuli&quot;\n</code></pre><blockquote>\n<p>语法：zremrangebyscore key min max<br>解释：移除有续集中的member，移除member的score大于等于min小于等于max；返回移除元素个数</p>\n</blockquote>\n<pre><code>redis 127.0.0.1:6379&gt; zrange score 0 -1 withscores\n1) &quot;wangwu&quot;\n2) &quot;249&quot;\n3) &quot;liuli&quot;\n4) &quot;400&quot;\nredis 127.0.0.1:6379&gt; zremrangebyscore score 248 250\n(integer) 1\nredis 127.0.0.1:6379&gt; zrange score 0 -1 withscores\n1) &quot;liuli&quot;\n2) &quot;400&quot;\n</code></pre><p><br><br>String、Hash以及List未完待续。。。</p>"},{"title":"前端知识整理","date":"2017-02-20T06:29:41.000Z","_content":"\n整理一些常用的前端知识\n\n[全栈开发](http://www.ruanyifeng.com/blog/2016/11/javascript.html)\n\n[LINK](http://www.cnblogs.com/strick/p/4968200.html)\n\n* box-sizing\n* BFC\n* 块级元素,内联元素\n* 浮动\n* AMD和CMD\n* <img>标签上title属性与alt属性的区别\n* 标签语义化\n* html5新特性\n* CSS的选择器\n* CSS伪类与CSS伪对象\n* 等高布局\n* px、em\n* link 和@import\n* position的absolute与fixed\n* 闭包\n* JS实现面向对象和继承机制\n* Prototype模式\n* this\n* 冒泡和捕获\n* null和undefined的区别\n* flex\n* 立即执行函数 IIFE\n* EVAL和new function的区别\n* inline-block\n\n\n<!-- more -->\n\n\n\n\n\n\n\n\n##  BFC ## \n\n- [块格式化上下文](http://elcarim5efil.github.io/blog/2015/08/20/Learning_BFC.html)块格式化上下文,内部元素和外部元素相互隔离，使内外元素的定位不会互相影响，可以闭合浮动，防止与浮动元素重叠 \n块格式上下文是页面CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。\n\n>BFC的创建方法\n- 根元素或其它包含它的元素；\n- 浮动 (元素的`float`不为`none`)；\n- 绝对定位元素 (元素的`position`为`absolute`或`fixed`)；\n- 行内块`inline-blocks`(元素的` display: inline-block`)；\n- 表格单元格(元素的`display: table-cell`，HTML表格单元格默认属性)；\n- `overflow`的值不为`visible`的元素；\n- 弹性盒` flex boxes` (元素的`display: flex`或`inline-flex`)；\n但其中，最常见的就是`overflow:hidden、float:left/right、position:absolute`。也就是说，每次看到这些属性的时候，就代表了该元素以及创建了一个BFC了。\n一个BFC包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。\n\n>BFC特性\n- 内部的盒会在垂直方向一个接一个排列（可以看作BFC中有一个的常规流）；\n- 处于同一个BFC中的元素相互影响，可能会发生margin collapse；\n- 每个元素的margin box的左边，与容器块border box的左边相接触(对于从左往右的格式化，否则相反)。即- 使存在浮动也是如此；\n- BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然；\n- **计算BFC的高度时，考虑BFC所包含的所有元素，连浮动元素也参与计算**；\n- 浮动盒区域不叠加到BFC上；\n\n\n## 块级元素## \n|-|简述|sample|remark|\n|---------------|----------------|---------------------|-----------------|\n|块级元素|另起一行的方式一直往下排|`address,blockquote,center,dir,div,dl,filedset,form,h1-h6,hr,ol,ul,p,pre,table`||\n|内联元素|`display`为`inline`，`inline-block`或`inline-table` 一行并排显示,只能容纳文本或者其他内联元素|`a,b,br,cite,em,i,img,input,label,span,small,strong`|- `width,height`无效 -`margin,padding` 上下无效|\n|可变元素||`button,del,iframe,ins,object,script`|-|\n\n## 浮动## \n- 导致常规流环绕在它的周边\n>浮动会漂浮于普通流之上，像浮云一样，但是只能左右浮动。正是这种特性，导致框内部由于不存在其他普通流元素了，表现出高度为0（高度塌陷）。\na. 添加额外标签，例如<div style=\"clear:both\"></div>\nb. 使用br标签和其自身的html属性，例如<br clear=\"all\" />\nc. 父元素设置 overflow：hidden；在IE6中还需要触发[hasLayout](http://yiminghe.iteye.com/blog/367384)，例如zoom：1；\nd. 父元素设置 overflow：auto 属性；同样IE6需要触发hasLayout\ne. 父元素也设置浮动\nf. 父元素设置display:table\ng. 使用:after 伪元素；由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n在CSS2.1里面有一个很重要的概念，那就是 Block formatting contexts （块级格式化上下文），简称 [BFC](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)。\n创建了BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，同时BFC仍然属于文档中的普通流。\nIE6-7的显示引擎使用的是一个称为布局（layout）的内部概念。\n\n## AMD和CMD 规范的区别？## \n- AMD 提前执行依赖 - 尽早执行，requireJS 是它的实现 \n- CMD 按需执行依赖 - 懒执行，seaJS 是它的实现\n[SeaJS与RequireJS最大的区别](https://www.douban.com/note/283566440/)\n\n\n## html5新特性## \n\n>a. HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\nb. 拖拽释放(`Drag and drop`) API\nc. 语义化更好的内容标签（header,nav,footer,aside,article,section）\nd. 音频、视频API([audio](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio),[video](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video))\ne. 画布([Canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)) API\nf. 地理([Geolocation](https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/Using_geolocation)) API\ng. 本地离线存储 [localStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage) 长期存储数据，浏览器关闭后数据不丢失\nh. [sessionStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage) 的数据在页面会话结束时会被清除\ni. 表单控件，`calendar、date、time、email、url、search `\nj. 新的技术[webworker](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers), [websocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)等\n**移除的元素：**\na. 纯表现的元素：`basefont，big，center, s，strike，tt，u`；\nb. 对可用性产生负面影响的元素：`frame，frameset，noframes`；\n\n## CSS的选择器## \n>元素选择器：`* 、E、 E#id、 E.class`\n关系选择器：`E、F、E>F、E+F、E~F`\n属性选择器：`E[att]、E[att=\"val\"]、E[att~=\"val\"]、E[att^=\"val\"]、E[att$=\"val\"]、E[att*=\"val\"]、E[att|=\"val\"]`\n伪类选择器：`E:link、E:visited、E:hover、E:active、E:focus、E:lang(fr)、E:not(s)、E:root、E:first-child、E:last-chil`等\n伪对象选择器：`E:first-letter/E::first-letter、E:first-line/E::first-line、E:before/E::before、E:after/E::after、E::selection`\n\n\n## CSS伪类与CSS伪对象## \n>CSS 引入伪类和伪元素的概念是为了描述一些现有CSS无法描述的东西\n根本区别在于：**它们是否创造了新的元素（抽象）**\n伪类：一开始用来表示一些元素的动态状态，随后CSS2标准扩展了其概念范围，使其成为了所有逻辑上存在但在文档树中却无须标识的“幽灵”分类\n伪对象：代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中\n\n\n## 请写出多种等高布局## \n>a. 假等高列：使用背景图片，在列的父元素上使用这个背景图进行Y轴的铺放，从而实现一种等高列的假像\nb. 给容器div使用单独的背景色（[固定布局](http://codepen.io/strick/pen/ZbZYoW)）（[流体布局](http://codepen.io/strick/pen/WQWOPK)）：用<div>元素中的最大高度撑大其他的<div>容器高度\nc. 创建[带边框的两列](http://codepen.io/strick/pen/bVJRQv)等高布局：用border-left来做，只能使用两列。\nd. 使用[正padding和负margin](http://codepen.io/strick/pen/qOwXEN)对冲实现多列布局方法：在所有列中使用正的上、下padding和负的上、下margin，并在所有列外面加上一个容器，设置overflow:hiden把溢出背景切掉\ne. 使用[边框和定位模拟](http://codepen.io/strick/pen/XmQabJ)列等高：但不能使用在多列\nf. [模仿表格布局](http://codepen.io/strick/pen/ZbZJGg)等高列效果：兼容性不好，在ie6-7无法正常运行\n\n\n## 在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？## \n>px是相对长度单位，相对于显示器屏幕分辨率而言的。\nem是相对长度单位，相对于当前对象内文本的字体尺寸。\npx定义的字体，无法用浏览器字体放大功能。\nem的值并不是固定的，会继承父级元素的字体大小，1 ÷ 父元素的font-size × 需要转换的像素值 = em值。\n\n\n## CSS中 link 和@import 的区别是什么？## \n>a. link属于HTML标签，而@import是CSS提供的，且只能加载 CSS\nb. 页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载\nc. import只在IE5以上才能识别，而link是HTML标签，无兼容问题\nd. link方式的样式的权重 高于@import的权重\ne. 当使用 Javascript 控制 DOM 去改变样式的时候，只能使用 link 方式，因为 @import 眼里只有 CSS ，不是 DOM 可以控制\n\n\n## position的absolute与fixed共同点与不同点## \n>相同：\na. 改变行内元素的呈现方式，display被置为block\nb. 让元素脱离普通流，不占据空间\nc. 默认会覆盖到非定位元素上\n区别：\nabsolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。\n当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。\n\n## absolute：生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素进行定位\n>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。 （IE6不支持）\nrelative：生成相对定位的元素，相对于其在普通流中的位置进行定位\nstatic：默认值。没有定位，元素出现在正常的流中\n\n## Gulp 自动刷新\n```\nvar gulp = require('gulp');\nvar less = require('gulp-less')\nvar connect = require('gulp-connect');\n\ngulp.task(\"webserver\", function() {\n\tconnect.server({\n\t\tlivereload: true\n\t});\n})\n\n\ngulp.task('css', function() {\n\n\tgulp.src(\"*.css\").pipe(connect.reload())\n\n})\n\ngulp.task('less', function() {\n\n\tgulp.src(\"*.less\").pipe(less()).pipe(gulp.dest(\"./\")).pipe(connect.reload())\n\n})\n\n\ngulp.task('watch', function() {\n\n\tgulp.watch(\"*.less\", ['less'])\n})\n\n\ngulp.task(\"default\", ['webserver', 'watch'])\n\n\n```\n\n## 闭包\n>内部函数引用外部变量\n模块化，可重用，实现信息隐藏\n优：\n封装私有属性和私有方法，加强封装性，可以达到对变量的保护作用。\n更好的组织代码，比如模块化\n缺：\n增加了内存的消耗，并且在某些浏览器下，由于垃圾回收机制不同，有可能导致内存溢出\n增加复杂度\n由于闭包内部变量优先级高于外部变量，所以多查找作用域链中的一个层次，就会在一定程度上影响查找速度。\n\n\n\n\n## 变量提升 [link](http://www.cnblogs.com/strick/p/5806427.html)\n>变量和函数的所有声明都会在任何代码被执行前首先被处理\n函数声明和变量声明总是被JavaScript解释器隐式地提升到包含他们的作用域的最顶端。\nfunction优先声明于var。\n函数表达式中只会提升名称，函数体只有在执行到赋值语句时才会被赋值。\n```\nfunction foo() {\n    bar();\n    var x = 1;\n}\nfunction foo() {//等同于\n    var x;\n    bar();\n    x = 1;\n}\nfunction test() {\n    foo(); // TypeError \"foo is not a function\"\n    bar(); // \"this will run!\"\n    var foo = function () { }// 函数表达式被赋值给变量'foo'\n    function bar() { }// 名为'bar'的函数声明\n}\n```\n\n\n\n## JS实现面向对象和继承机制\n> *创建对象方法：*\na. 利用json创建对象\nb. 使用JavaScript中的Object类型\nc. 通过创建函数来生成对象\n*继承机制：*\na. 构造函数绑定，使用call或apply方法，将父对象的构造函数绑定在子对象上\nb. prototype模式，继承new函数的模式\nc. 直接继承函数的prototype属性，对b的一种改进\nd. 利用空对象作为中介\ne. 在ECMAScript5中定义了一个新方法Object.create()，用于创建一个新方法\nf. 拷贝继承，把父对象的所有属性和方法，拷贝进子对象，实现继承。参考《JavaScript中的对象克隆》\n\n\n## Prototype模式\n\n\n## this [link](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n>this指的是：调用函数的那个对象。\na. 纯粹的函数调用，属于全局性调用，因此this就代表全局对象Global。\nb. 作为对象方法的调用，这时this就指这个上级对象。\nc. 作为构造函数调用，就是通过这个函数new一个新对象（object）。这时，this就指这个新对象。\nd. apply与call的调用，它们的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。\n\n\n## 冒泡和捕获\n>阻止冒泡\n`event.stopPropagation()`\n`event.cancelBubble=true。`\n阻止默认事件\n`event.preventDefault()`\n`event.returnValue=false。`\n```\nfunction addEvent(obj,type,handle){\n    try{  // Chrome、FireFox、Opera、Safari、IE9.0及其以上版本\n        obj.addEventListener(type,handle,false);\n    }catch(e){\n        try{  // IE8.0及其以下版本\n            obj.attachEvent('on' + type,handle);\n        }catch(e){  // 早期浏览器\n            obj['on' + type] = handle;\n        }\n    }\n}\naddEvent(document.getElementById(\"demo\"),\"click\",myAlert);\n\n```\n\n\n## null和undefined的区别 [link](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n>null：\na. null是一个表示\"无\"的对象，转为数值时为0\nb. null表示\"没有对象\"，即该处不应该有值。\nundefined：\na. undefined是一个表示\"无\"的原始值，转为数值时为NaN。\nb. undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。\n\n\n## 立即执行函数（IIFE） [Link](http://web.jobbole.com/82520/)\n* 括号内部不能包含语句，当解析器对代码进行解释的时候，先碰到了`()`，然后碰到`function`关键字就会自动将`()`里面的代码识别为*函数表达式*而不是*函数声明*。\n\n```\n// 最常用的两种写法\n(function(){ /* code */ }()); // 老道推荐写法\n(function(){ /* code */ })(); // 当然这种也可以\n\n// 括号和JS的一些操作符（如 = && || ,等）可以在函数表达式和函数声明上消除歧义\n// 如下代码中，解析器已经知道一个是表达式了，于是也会把另一个默认为表达式\n// 但是两者交换则会报错\nvar i = function(){ return 10; }();\ntrue && function(){ /* code */ }();\n0, function(){ /* code */ }();\n\n// 如果你不怕代码晦涩难读，也可以选择一元运算符\n!function(){ /* code */ }();\n~function(){ /* code */ }();\n-function(){ /* code */ }();\n+function(){ /* code */ }();\n\n// 你也可以这样\nnew function(){ /* code */ }\nnew function(){ /* code */ }() // 带参数\n\n```\n* 立即执行函数在模块化中也大有用处。用立即执行函数处理模块化可以减少全局变量造成的空间污染，构造更多的*私有变量*。\n\n```\n// 创建一个立即执行的匿名函数\n// 该函数返回一个对象，包含你要暴露的属性\n// 如下代码如果不使用立即执行函数，就会多一个属性i\n// 如果有了属性i，我们就能调用counter.i改变i的值\n// 对我们来说这种不确定的因素越少越好\n\nvar counter = (function(){\n  var i = 0;\n\n  return {\n    get: function(){\n      return i;\n    },\n    set: function( val ){\n      i = val;\n    },\n    increment: function() {\n      return ++i;\n    }\n  };\n}());\n\n// counter其实是一个对象\n\ncounter.get(); // 0\ncounter.set( 3 );\ncounter.increment(); // 4\ncounter.increment(); // 5\n\ncounter.i; // undefined i并不是counter的属性\ni; // ReferenceError: i is not defined (函数内部的是局部变量)\n```\n\n\n## EVAL和new function的区别  [Link](http://www.cnblogs.com/shine-li/articles/2772737.html)\n\n\n```\n1 var jsonStr = \"{'a:':'b'}\";\n2 var object = eval(jsonStr);  //会报错 \n不加括号eval时，js会把{}当成代码块，而'a':'b'当成语句来进行解析，那么肯定会报语法错误;\n '(' + jsonStr + ')'后，代码字符串变成 ({'a':'b'})，那么该代码是个正确的js赋值代码\n3 var object = eval('(' + jsonStr + ')');  //则会正确解析\n\n```\n* 他们的区别在于：作用域不同\n```\nvar str = 'console.log(a)';\nvar a = 0;\n(function() {\n  var a = 1;\n  eval('(' + str + ')');                                 //返回1\n  window.eval('(' + str + ')');                          //返回0\n  (new Function('return ' + str))();                     //返回0\n})();\n\n```\n* 对于JS的函数作用域来说，变量作用域有任意层级，即 *其他函数内部定义的函数可以调用父函数的局部变量*，而内部函数里定义的函数不仅可以调用父函数的局部变量，还可以调用祖父函数的局部变量，以此类推* —— 摘自 《Javascript编程精解》\n\n因此，对于上述例子来说，`window.eval`和`new Function`都是全局作用域的，即他们只能调用全局变量；而eval是局部函数，即他可以调用其父函数的局部变量。\n\n\n## Function.bind\n```\nFunction.prototype.bind = function (scope) {\n    var fn = this;\n    return function () {\n        return fn.apply(scope);\n    };\n}\n```\n\n```\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(this instanceof fNOP\n                                 ? this\n                                 : oThis || this,\n                               aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n```\n\n\n## 函数表达式\n`var getName` 与 `function getName` 都是声明语句，\n区别在于 `var getName` 是*函数表达式*，而 `function getName` 是*函数声明*。\n事实是函数声明会覆盖变量声明。\n\n\n## inline-block\n既拥有了`block`元素可以*设置`width`和`height`*的特性，又保持了`inline`元素*不换行*的特性。\n`inline`元素之间就有空隙出现,空白符！ `font-size:0px;`\n\n## JAVASCRIPT 装载和执行\n浏览器是并行加载css文件，串行加载js文件。\n\n\n\n## apply && this\napply：应用某一对象的一个方法，用另一个对象替换当前对象。\ncall：调用一个对象的一个方法，以另一个对象替换当前对象。\n可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象\n```\nfunction.apply([thisObj[,argArray]])\nfunction.call([thisObj[,arg1[, arg2[, [,.argN]]]]])\n```\n`Math.max.apply(null, [a, b, c, d, ...])`","source":"_posts/前端知识整理.md","raw":"---\ntitle: 前端知识整理\ndate: 2017-02-20 14:29:41\ncategories: Html\ntags: [Html, 筆記,整理]\n---\n\n整理一些常用的前端知识\n\n[全栈开发](http://www.ruanyifeng.com/blog/2016/11/javascript.html)\n\n[LINK](http://www.cnblogs.com/strick/p/4968200.html)\n\n* box-sizing\n* BFC\n* 块级元素,内联元素\n* 浮动\n* AMD和CMD\n* <img>标签上title属性与alt属性的区别\n* 标签语义化\n* html5新特性\n* CSS的选择器\n* CSS伪类与CSS伪对象\n* 等高布局\n* px、em\n* link 和@import\n* position的absolute与fixed\n* 闭包\n* JS实现面向对象和继承机制\n* Prototype模式\n* this\n* 冒泡和捕获\n* null和undefined的区别\n* flex\n* 立即执行函数 IIFE\n* EVAL和new function的区别\n* inline-block\n\n\n<!-- more -->\n\n\n\n\n\n\n\n\n##  BFC ## \n\n- [块格式化上下文](http://elcarim5efil.github.io/blog/2015/08/20/Learning_BFC.html)块格式化上下文,内部元素和外部元素相互隔离，使内外元素的定位不会互相影响，可以闭合浮动，防止与浮动元素重叠 \n块格式上下文是页面CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。\n\n>BFC的创建方法\n- 根元素或其它包含它的元素；\n- 浮动 (元素的`float`不为`none`)；\n- 绝对定位元素 (元素的`position`为`absolute`或`fixed`)；\n- 行内块`inline-blocks`(元素的` display: inline-block`)；\n- 表格单元格(元素的`display: table-cell`，HTML表格单元格默认属性)；\n- `overflow`的值不为`visible`的元素；\n- 弹性盒` flex boxes` (元素的`display: flex`或`inline-flex`)；\n但其中，最常见的就是`overflow:hidden、float:left/right、position:absolute`。也就是说，每次看到这些属性的时候，就代表了该元素以及创建了一个BFC了。\n一个BFC包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。\n\n>BFC特性\n- 内部的盒会在垂直方向一个接一个排列（可以看作BFC中有一个的常规流）；\n- 处于同一个BFC中的元素相互影响，可能会发生margin collapse；\n- 每个元素的margin box的左边，与容器块border box的左边相接触(对于从左往右的格式化，否则相反)。即- 使存在浮动也是如此；\n- BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然；\n- **计算BFC的高度时，考虑BFC所包含的所有元素，连浮动元素也参与计算**；\n- 浮动盒区域不叠加到BFC上；\n\n\n## 块级元素## \n|-|简述|sample|remark|\n|---------------|----------------|---------------------|-----------------|\n|块级元素|另起一行的方式一直往下排|`address,blockquote,center,dir,div,dl,filedset,form,h1-h6,hr,ol,ul,p,pre,table`||\n|内联元素|`display`为`inline`，`inline-block`或`inline-table` 一行并排显示,只能容纳文本或者其他内联元素|`a,b,br,cite,em,i,img,input,label,span,small,strong`|- `width,height`无效 -`margin,padding` 上下无效|\n|可变元素||`button,del,iframe,ins,object,script`|-|\n\n## 浮动## \n- 导致常规流环绕在它的周边\n>浮动会漂浮于普通流之上，像浮云一样，但是只能左右浮动。正是这种特性，导致框内部由于不存在其他普通流元素了，表现出高度为0（高度塌陷）。\na. 添加额外标签，例如<div style=\"clear:both\"></div>\nb. 使用br标签和其自身的html属性，例如<br clear=\"all\" />\nc. 父元素设置 overflow：hidden；在IE6中还需要触发[hasLayout](http://yiminghe.iteye.com/blog/367384)，例如zoom：1；\nd. 父元素设置 overflow：auto 属性；同样IE6需要触发hasLayout\ne. 父元素也设置浮动\nf. 父元素设置display:table\ng. 使用:after 伪元素；由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。\n在CSS2.1里面有一个很重要的概念，那就是 Block formatting contexts （块级格式化上下文），简称 [BFC](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)。\n创建了BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，同时BFC仍然属于文档中的普通流。\nIE6-7的显示引擎使用的是一个称为布局（layout）的内部概念。\n\n## AMD和CMD 规范的区别？## \n- AMD 提前执行依赖 - 尽早执行，requireJS 是它的实现 \n- CMD 按需执行依赖 - 懒执行，seaJS 是它的实现\n[SeaJS与RequireJS最大的区别](https://www.douban.com/note/283566440/)\n\n\n## html5新特性## \n\n>a. HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。\nb. 拖拽释放(`Drag and drop`) API\nc. 语义化更好的内容标签（header,nav,footer,aside,article,section）\nd. 音频、视频API([audio](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio),[video](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video))\ne. 画布([Canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)) API\nf. 地理([Geolocation](https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/Using_geolocation)) API\ng. 本地离线存储 [localStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage) 长期存储数据，浏览器关闭后数据不丢失\nh. [sessionStorage](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage) 的数据在页面会话结束时会被清除\ni. 表单控件，`calendar、date、time、email、url、search `\nj. 新的技术[webworker](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers), [websocket](https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket)等\n**移除的元素：**\na. 纯表现的元素：`basefont，big，center, s，strike，tt，u`；\nb. 对可用性产生负面影响的元素：`frame，frameset，noframes`；\n\n## CSS的选择器## \n>元素选择器：`* 、E、 E#id、 E.class`\n关系选择器：`E、F、E>F、E+F、E~F`\n属性选择器：`E[att]、E[att=\"val\"]、E[att~=\"val\"]、E[att^=\"val\"]、E[att$=\"val\"]、E[att*=\"val\"]、E[att|=\"val\"]`\n伪类选择器：`E:link、E:visited、E:hover、E:active、E:focus、E:lang(fr)、E:not(s)、E:root、E:first-child、E:last-chil`等\n伪对象选择器：`E:first-letter/E::first-letter、E:first-line/E::first-line、E:before/E::before、E:after/E::after、E::selection`\n\n\n## CSS伪类与CSS伪对象## \n>CSS 引入伪类和伪元素的概念是为了描述一些现有CSS无法描述的东西\n根本区别在于：**它们是否创造了新的元素（抽象）**\n伪类：一开始用来表示一些元素的动态状态，随后CSS2标准扩展了其概念范围，使其成为了所有逻辑上存在但在文档树中却无须标识的“幽灵”分类\n伪对象：代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中\n\n\n## 请写出多种等高布局## \n>a. 假等高列：使用背景图片，在列的父元素上使用这个背景图进行Y轴的铺放，从而实现一种等高列的假像\nb. 给容器div使用单独的背景色（[固定布局](http://codepen.io/strick/pen/ZbZYoW)）（[流体布局](http://codepen.io/strick/pen/WQWOPK)）：用<div>元素中的最大高度撑大其他的<div>容器高度\nc. 创建[带边框的两列](http://codepen.io/strick/pen/bVJRQv)等高布局：用border-left来做，只能使用两列。\nd. 使用[正padding和负margin](http://codepen.io/strick/pen/qOwXEN)对冲实现多列布局方法：在所有列中使用正的上、下padding和负的上、下margin，并在所有列外面加上一个容器，设置overflow:hiden把溢出背景切掉\ne. 使用[边框和定位模拟](http://codepen.io/strick/pen/XmQabJ)列等高：但不能使用在多列\nf. [模仿表格布局](http://codepen.io/strick/pen/ZbZJGg)等高列效果：兼容性不好，在ie6-7无法正常运行\n\n\n## 在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？## \n>px是相对长度单位，相对于显示器屏幕分辨率而言的。\nem是相对长度单位，相对于当前对象内文本的字体尺寸。\npx定义的字体，无法用浏览器字体放大功能。\nem的值并不是固定的，会继承父级元素的字体大小，1 ÷ 父元素的font-size × 需要转换的像素值 = em值。\n\n\n## CSS中 link 和@import 的区别是什么？## \n>a. link属于HTML标签，而@import是CSS提供的，且只能加载 CSS\nb. 页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载\nc. import只在IE5以上才能识别，而link是HTML标签，无兼容问题\nd. link方式的样式的权重 高于@import的权重\ne. 当使用 Javascript 控制 DOM 去改变样式的时候，只能使用 link 方式，因为 @import 眼里只有 CSS ，不是 DOM 可以控制\n\n\n## position的absolute与fixed共同点与不同点## \n>相同：\na. 改变行内元素的呈现方式，display被置为block\nb. 让元素脱离普通流，不占据空间\nc. 默认会覆盖到非定位元素上\n区别：\nabsolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。\n当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。\n\n## absolute：生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素进行定位\n>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。 （IE6不支持）\nrelative：生成相对定位的元素，相对于其在普通流中的位置进行定位\nstatic：默认值。没有定位，元素出现在正常的流中\n\n## Gulp 自动刷新\n```\nvar gulp = require('gulp');\nvar less = require('gulp-less')\nvar connect = require('gulp-connect');\n\ngulp.task(\"webserver\", function() {\n\tconnect.server({\n\t\tlivereload: true\n\t});\n})\n\n\ngulp.task('css', function() {\n\n\tgulp.src(\"*.css\").pipe(connect.reload())\n\n})\n\ngulp.task('less', function() {\n\n\tgulp.src(\"*.less\").pipe(less()).pipe(gulp.dest(\"./\")).pipe(connect.reload())\n\n})\n\n\ngulp.task('watch', function() {\n\n\tgulp.watch(\"*.less\", ['less'])\n})\n\n\ngulp.task(\"default\", ['webserver', 'watch'])\n\n\n```\n\n## 闭包\n>内部函数引用外部变量\n模块化，可重用，实现信息隐藏\n优：\n封装私有属性和私有方法，加强封装性，可以达到对变量的保护作用。\n更好的组织代码，比如模块化\n缺：\n增加了内存的消耗，并且在某些浏览器下，由于垃圾回收机制不同，有可能导致内存溢出\n增加复杂度\n由于闭包内部变量优先级高于外部变量，所以多查找作用域链中的一个层次，就会在一定程度上影响查找速度。\n\n\n\n\n## 变量提升 [link](http://www.cnblogs.com/strick/p/5806427.html)\n>变量和函数的所有声明都会在任何代码被执行前首先被处理\n函数声明和变量声明总是被JavaScript解释器隐式地提升到包含他们的作用域的最顶端。\nfunction优先声明于var。\n函数表达式中只会提升名称，函数体只有在执行到赋值语句时才会被赋值。\n```\nfunction foo() {\n    bar();\n    var x = 1;\n}\nfunction foo() {//等同于\n    var x;\n    bar();\n    x = 1;\n}\nfunction test() {\n    foo(); // TypeError \"foo is not a function\"\n    bar(); // \"this will run!\"\n    var foo = function () { }// 函数表达式被赋值给变量'foo'\n    function bar() { }// 名为'bar'的函数声明\n}\n```\n\n\n\n## JS实现面向对象和继承机制\n> *创建对象方法：*\na. 利用json创建对象\nb. 使用JavaScript中的Object类型\nc. 通过创建函数来生成对象\n*继承机制：*\na. 构造函数绑定，使用call或apply方法，将父对象的构造函数绑定在子对象上\nb. prototype模式，继承new函数的模式\nc. 直接继承函数的prototype属性，对b的一种改进\nd. 利用空对象作为中介\ne. 在ECMAScript5中定义了一个新方法Object.create()，用于创建一个新方法\nf. 拷贝继承，把父对象的所有属性和方法，拷贝进子对象，实现继承。参考《JavaScript中的对象克隆》\n\n\n## Prototype模式\n\n\n## this [link](http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html)\n>this指的是：调用函数的那个对象。\na. 纯粹的函数调用，属于全局性调用，因此this就代表全局对象Global。\nb. 作为对象方法的调用，这时this就指这个上级对象。\nc. 作为构造函数调用，就是通过这个函数new一个新对象（object）。这时，this就指这个新对象。\nd. apply与call的调用，它们的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。\n\n\n## 冒泡和捕获\n>阻止冒泡\n`event.stopPropagation()`\n`event.cancelBubble=true。`\n阻止默认事件\n`event.preventDefault()`\n`event.returnValue=false。`\n```\nfunction addEvent(obj,type,handle){\n    try{  // Chrome、FireFox、Opera、Safari、IE9.0及其以上版本\n        obj.addEventListener(type,handle,false);\n    }catch(e){\n        try{  // IE8.0及其以下版本\n            obj.attachEvent('on' + type,handle);\n        }catch(e){  // 早期浏览器\n            obj['on' + type] = handle;\n        }\n    }\n}\naddEvent(document.getElementById(\"demo\"),\"click\",myAlert);\n\n```\n\n\n## null和undefined的区别 [link](http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html)\n>null：\na. null是一个表示\"无\"的对象，转为数值时为0\nb. null表示\"没有对象\"，即该处不应该有值。\nundefined：\na. undefined是一个表示\"无\"的原始值，转为数值时为NaN。\nb. undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。\n\n\n## 立即执行函数（IIFE） [Link](http://web.jobbole.com/82520/)\n* 括号内部不能包含语句，当解析器对代码进行解释的时候，先碰到了`()`，然后碰到`function`关键字就会自动将`()`里面的代码识别为*函数表达式*而不是*函数声明*。\n\n```\n// 最常用的两种写法\n(function(){ /* code */ }()); // 老道推荐写法\n(function(){ /* code */ })(); // 当然这种也可以\n\n// 括号和JS的一些操作符（如 = && || ,等）可以在函数表达式和函数声明上消除歧义\n// 如下代码中，解析器已经知道一个是表达式了，于是也会把另一个默认为表达式\n// 但是两者交换则会报错\nvar i = function(){ return 10; }();\ntrue && function(){ /* code */ }();\n0, function(){ /* code */ }();\n\n// 如果你不怕代码晦涩难读，也可以选择一元运算符\n!function(){ /* code */ }();\n~function(){ /* code */ }();\n-function(){ /* code */ }();\n+function(){ /* code */ }();\n\n// 你也可以这样\nnew function(){ /* code */ }\nnew function(){ /* code */ }() // 带参数\n\n```\n* 立即执行函数在模块化中也大有用处。用立即执行函数处理模块化可以减少全局变量造成的空间污染，构造更多的*私有变量*。\n\n```\n// 创建一个立即执行的匿名函数\n// 该函数返回一个对象，包含你要暴露的属性\n// 如下代码如果不使用立即执行函数，就会多一个属性i\n// 如果有了属性i，我们就能调用counter.i改变i的值\n// 对我们来说这种不确定的因素越少越好\n\nvar counter = (function(){\n  var i = 0;\n\n  return {\n    get: function(){\n      return i;\n    },\n    set: function( val ){\n      i = val;\n    },\n    increment: function() {\n      return ++i;\n    }\n  };\n}());\n\n// counter其实是一个对象\n\ncounter.get(); // 0\ncounter.set( 3 );\ncounter.increment(); // 4\ncounter.increment(); // 5\n\ncounter.i; // undefined i并不是counter的属性\ni; // ReferenceError: i is not defined (函数内部的是局部变量)\n```\n\n\n## EVAL和new function的区别  [Link](http://www.cnblogs.com/shine-li/articles/2772737.html)\n\n\n```\n1 var jsonStr = \"{'a:':'b'}\";\n2 var object = eval(jsonStr);  //会报错 \n不加括号eval时，js会把{}当成代码块，而'a':'b'当成语句来进行解析，那么肯定会报语法错误;\n '(' + jsonStr + ')'后，代码字符串变成 ({'a':'b'})，那么该代码是个正确的js赋值代码\n3 var object = eval('(' + jsonStr + ')');  //则会正确解析\n\n```\n* 他们的区别在于：作用域不同\n```\nvar str = 'console.log(a)';\nvar a = 0;\n(function() {\n  var a = 1;\n  eval('(' + str + ')');                                 //返回1\n  window.eval('(' + str + ')');                          //返回0\n  (new Function('return ' + str))();                     //返回0\n})();\n\n```\n* 对于JS的函数作用域来说，变量作用域有任意层级，即 *其他函数内部定义的函数可以调用父函数的局部变量*，而内部函数里定义的函数不仅可以调用父函数的局部变量，还可以调用祖父函数的局部变量，以此类推* —— 摘自 《Javascript编程精解》\n\n因此，对于上述例子来说，`window.eval`和`new Function`都是全局作用域的，即他们只能调用全局变量；而eval是局部函数，即他可以调用其父函数的局部变量。\n\n\n## Function.bind\n```\nFunction.prototype.bind = function (scope) {\n    var fn = this;\n    return function () {\n        return fn.apply(scope);\n    };\n}\n```\n\n```\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          return fToBind.apply(this instanceof fNOP\n                                 ? this\n                                 : oThis || this,\n                               aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n```\n\n\n## 函数表达式\n`var getName` 与 `function getName` 都是声明语句，\n区别在于 `var getName` 是*函数表达式*，而 `function getName` 是*函数声明*。\n事实是函数声明会覆盖变量声明。\n\n\n## inline-block\n既拥有了`block`元素可以*设置`width`和`height`*的特性，又保持了`inline`元素*不换行*的特性。\n`inline`元素之间就有空隙出现,空白符！ `font-size:0px;`\n\n## JAVASCRIPT 装载和执行\n浏览器是并行加载css文件，串行加载js文件。\n\n\n\n## apply && this\napply：应用某一对象的一个方法，用另一个对象替换当前对象。\ncall：调用一个对象的一个方法，以另一个对象替换当前对象。\n可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象\n```\nfunction.apply([thisObj[,argArray]])\nfunction.call([thisObj[,arg1[, arg2[, [,.argN]]]]])\n```\n`Math.max.apply(null, [a, b, c, d, ...])`","slug":"前端知识整理","published":1,"updated":"2017-03-15T02:44:14.880Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496equ6000y2sl1lxnyrn4v","content":"<p>整理一些常用的前端知识</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/11/javascript.html\" target=\"_blank\" rel=\"external\">全栈开发</a></p>\n<p><a href=\"http://www.cnblogs.com/strick/p/4968200.html\" target=\"_blank\" rel=\"external\">LINK</a></p>\n<ul>\n<li>box-sizing</li>\n<li>BFC</li>\n<li>块级元素,内联元素</li>\n<li>浮动</li>\n<li>AMD和CMD</li>\n<li><img>标签上title属性与alt属性的区别</li>\n<li>标签语义化</li>\n<li>html5新特性</li>\n<li>CSS的选择器</li>\n<li>CSS伪类与CSS伪对象</li>\n<li>等高布局</li>\n<li>px、em</li>\n<li>link 和@import</li>\n<li>position的absolute与fixed</li>\n<li>闭包</li>\n<li>JS实现面向对象和继承机制</li>\n<li>Prototype模式</li>\n<li>this</li>\n<li>冒泡和捕获</li>\n<li>null和undefined的区别</li>\n<li>flex</li>\n<li>立即执行函数 IIFE</li>\n<li>EVAL和new function的区别</li>\n<li>inline-block</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><ul>\n<li><a href=\"http://elcarim5efil.github.io/blog/2015/08/20/Learning_BFC.html\" target=\"_blank\" rel=\"external\">块格式化上下文</a>块格式化上下文,内部元素和外部元素相互隔离，使内外元素的定位不会互相影响，可以闭合浮动，防止与浮动元素重叠<br>块格式上下文是页面CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。</li>\n</ul>\n<blockquote>\n<p>BFC的创建方法</p>\n<ul>\n<li>根元素或其它包含它的元素；</li>\n<li>浮动 (元素的<code>float</code>不为<code>none</code>)；</li>\n<li>绝对定位元素 (元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>)；</li>\n<li>行内块<code>inline-blocks</code>(元素的<code>display: inline-block</code>)；</li>\n<li>表格单元格(元素的<code>display: table-cell</code>，HTML表格单元格默认属性)；</li>\n<li><code>overflow</code>的值不为<code>visible</code>的元素；</li>\n<li>弹性盒<code>flex boxes</code> (元素的<code>display: flex</code>或<code>inline-flex</code>)；<br>但其中，最常见的就是<code>overflow:hidden、float:left/right、position:absolute</code>。也就是说，每次看到这些属性的时候，就代表了该元素以及创建了一个BFC了。<br>一个BFC包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。</li>\n</ul>\n<p>BFC特性</p>\n<ul>\n<li>内部的盒会在垂直方向一个接一个排列（可以看作BFC中有一个的常规流）；</li>\n<li>处于同一个BFC中的元素相互影响，可能会发生margin collapse；</li>\n<li>每个元素的margin box的左边，与容器块border box的左边相接触(对于从左往右的格式化，否则相反)。即- 使存在浮动也是如此；</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然；</li>\n<li><strong>计算BFC的高度时，考虑BFC所包含的所有元素，连浮动元素也参与计算</strong>；</li>\n<li>浮动盒区域不叠加到BFC上；</li>\n</ul>\n</blockquote>\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><table>\n<thead>\n<tr>\n<th>-</th>\n<th>简述</th>\n<th>sample</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块级元素</td>\n<td>另起一行的方式一直往下排</td>\n<td><code>address,blockquote,center,dir,div,dl,filedset,form,h1-h6,hr,ol,ul,p,pre,table</code></td>\n<td></td>\n</tr>\n<tr>\n<td>内联元素</td>\n<td><code>display</code>为<code>inline</code>，<code>inline-block</code>或<code>inline-table</code> 一行并排显示,只能容纳文本或者其他内联元素</td>\n<td><code>a,b,br,cite,em,i,img,input,label,span,small,strong</code></td>\n<td>- <code>width,height</code>无效 -<code>margin,padding</code> 上下无效</td>\n</tr>\n<tr>\n<td>可变元素</td>\n<td></td>\n<td><code>button,del,iframe,ins,object,script</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><ul>\n<li>导致常规流环绕在它的周边<blockquote>\n<p>浮动会漂浮于普通流之上，像浮云一样，但是只能左右浮动。正是这种特性，导致框内部由于不存在其他普通流元素了，表现出高度为0（高度塌陷）。<br>a. 添加额外标签，例如<div style=\"clear:both\"></div><br>b. 使用br标签和其自身的html属性，例如<br clear=\"all\"><br>c. 父元素设置 overflow：hidden；在IE6中还需要触发<a href=\"http://yiminghe.iteye.com/blog/367384\" target=\"_blank\" rel=\"external\">hasLayout</a>，例如zoom：1；<br>d. 父元素设置 overflow：auto 属性；同样IE6需要触发hasLayout<br>e. 父元素也设置浮动<br>f. 父元素设置display:table<br>g. 使用:after 伪元素；由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。<br>在CSS2.1里面有一个很重要的概念，那就是 Block formatting contexts （块级格式化上下文），简称 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"external\">BFC</a>。<br>创建了BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，同时BFC仍然属于文档中的普通流。<br>IE6-7的显示引擎使用的是一个称为布局（layout）的内部概念。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"AMD和CMD-规范的区别？\"><a href=\"#AMD和CMD-规范的区别？\" class=\"headerlink\" title=\"AMD和CMD 规范的区别？\"></a>AMD和CMD 规范的区别？</h2><ul>\n<li>AMD 提前执行依赖 - 尽早执行，requireJS 是它的实现 </li>\n<li>CMD 按需执行依赖 - 懒执行，seaJS 是它的实现<br><a href=\"https://www.douban.com/note/283566440/\" target=\"_blank\" rel=\"external\">SeaJS与RequireJS最大的区别</a></li>\n</ul>\n<h2 id=\"html5新特性\"><a href=\"#html5新特性\" class=\"headerlink\" title=\"html5新特性\"></a>html5新特性</h2><blockquote>\n<p>a. HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。<br>b. 拖拽释放(<code>Drag and drop</code>) API<br>c. 语义化更好的内容标签（header,nav,footer,aside,article,section）<br>d. 音频、视频API(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio\" target=\"_blank\" rel=\"external\">audio</a>,<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\" target=\"_blank\" rel=\"external\">video</a>)<br>e. 画布(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"external\">Canvas</a>) API<br>f. 地理(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/Using_geolocation\" target=\"_blank\" rel=\"external\">Geolocation</a>) API<br>g. 本地离线存储 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\" target=\"_blank\" rel=\"external\">localStorage</a> 长期存储数据，浏览器关闭后数据不丢失<br>h. <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage\" target=\"_blank\" rel=\"external\">sessionStorage</a> 的数据在页面会话结束时会被清除<br>i. 表单控件，<code>calendar、date、time、email、url、search</code><br>j. 新的技术<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\" target=\"_blank\" rel=\"external\">webworker</a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\" target=\"_blank\" rel=\"external\">websocket</a>等<br><strong>移除的元素：</strong><br>a. 纯表现的元素：<code>basefont，big，center, s，strike，tt，u</code>；<br>b. 对可用性产生负面影响的元素：<code>frame，frameset，noframes</code>；</p>\n</blockquote>\n<h2 id=\"CSS的选择器\"><a href=\"#CSS的选择器\" class=\"headerlink\" title=\"CSS的选择器\"></a>CSS的选择器</h2><blockquote>\n<p>元素选择器：<code>* 、E、 E#id、 E.class</code><br>关系选择器：<code>E、F、E&gt;F、E+F、E~F</code><br>属性选择器：<code>E[att]、E[att=&quot;val&quot;]、E[att~=&quot;val&quot;]、E[att^=&quot;val&quot;]、E[att$=&quot;val&quot;]、E[att*=&quot;val&quot;]、E[att|=&quot;val&quot;]</code><br>伪类选择器：<code>E:link、E:visited、E:hover、E:active、E:focus、E:lang(fr)、E:not(s)、E:root、E:first-child、E:last-chil</code>等<br>伪对象选择器：<code>E:first-letter/E::first-letter、E:first-line/E::first-line、E:before/E::before、E:after/E::after、E::selection</code></p>\n</blockquote>\n<h2 id=\"CSS伪类与CSS伪对象\"><a href=\"#CSS伪类与CSS伪对象\" class=\"headerlink\" title=\"CSS伪类与CSS伪对象\"></a>CSS伪类与CSS伪对象</h2><blockquote>\n<p>CSS 引入伪类和伪元素的概念是为了描述一些现有CSS无法描述的东西<br>根本区别在于：<strong>它们是否创造了新的元素（抽象）</strong><br>伪类：一开始用来表示一些元素的动态状态，随后CSS2标准扩展了其概念范围，使其成为了所有逻辑上存在但在文档树中却无须标识的“幽灵”分类<br>伪对象：代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中</p>\n</blockquote>\n<h2 id=\"请写出多种等高布局\"><a href=\"#请写出多种等高布局\" class=\"headerlink\" title=\"请写出多种等高布局\"></a>请写出多种等高布局</h2><blockquote>\n<p>a. 假等高列：使用背景图片，在列的父元素上使用这个背景图进行Y轴的铺放，从而实现一种等高列的假像<br>b. 给容器div使用单独的背景色（<a href=\"http://codepen.io/strick/pen/ZbZYoW\" target=\"_blank\" rel=\"external\">固定布局</a>）（<a href=\"http://codepen.io/strick/pen/WQWOPK\" target=\"_blank\" rel=\"external\">流体布局</a>）：用<div>元素中的最大高度撑大其他的<div>容器高度<br>c. 创建<a href=\"http://codepen.io/strick/pen/bVJRQv\" target=\"_blank\" rel=\"external\">带边框的两列</a>等高布局：用border-left来做，只能使用两列。<br>d. 使用<a href=\"http://codepen.io/strick/pen/qOwXEN\" target=\"_blank\" rel=\"external\">正padding和负margin</a>对冲实现多列布局方法：在所有列中使用正的上、下padding和负的上、下margin，并在所有列外面加上一个容器，设置overflow:hiden把溢出背景切掉<br>e. 使用<a href=\"http://codepen.io/strick/pen/XmQabJ\" target=\"_blank\" rel=\"external\">边框和定位模拟</a>列等高：但不能使用在多列<br>f. <a href=\"http://codepen.io/strick/pen/ZbZJGg\" target=\"_blank\" rel=\"external\">模仿表格布局</a>等高列效果：兼容性不好，在ie6-7无法正常运行</div></div></p>\n</blockquote>\n<h2 id=\"在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？\"><a href=\"#在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？\" class=\"headerlink\" title=\"在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？\"></a>在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？</h2><blockquote>\n<p>px是相对长度单位，相对于显示器屏幕分辨率而言的。<br>em是相对长度单位，相对于当前对象内文本的字体尺寸。<br>px定义的字体，无法用浏览器字体放大功能。<br>em的值并不是固定的，会继承父级元素的字体大小，1 ÷ 父元素的font-size × 需要转换的像素值 = em值。</p>\n</blockquote>\n<h2 id=\"CSS中-link-和-import-的区别是什么？\"><a href=\"#CSS中-link-和-import-的区别是什么？\" class=\"headerlink\" title=\"CSS中 link 和@import 的区别是什么？\"></a>CSS中 link 和@import 的区别是什么？</h2><blockquote>\n<p>a. link属于HTML标签，而@import是CSS提供的，且只能加载 CSS<br>b. 页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载<br>c. import只在IE5以上才能识别，而link是HTML标签，无兼容问题<br>d. link方式的样式的权重 高于@import的权重<br>e. 当使用 Javascript 控制 DOM 去改变样式的时候，只能使用 link 方式，因为 @import 眼里只有 CSS ，不是 DOM 可以控制</p>\n</blockquote>\n<h2 id=\"position的absolute与fixed共同点与不同点\"><a href=\"#position的absolute与fixed共同点与不同点\" class=\"headerlink\" title=\"position的absolute与fixed共同点与不同点\"></a>position的absolute与fixed共同点与不同点</h2><blockquote>\n<p>相同：<br>a. 改变行内元素的呈现方式，display被置为block<br>b. 让元素脱离普通流，不占据空间<br>c. 默认会覆盖到非定位元素上<br>区别：<br>absolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。<br>当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。</p>\n</blockquote>\n<h2 id=\"absolute：生成绝对定位的元素，相对于-static-定位以外的第一个祖先元素进行定位\"><a href=\"#absolute：生成绝对定位的元素，相对于-static-定位以外的第一个祖先元素进行定位\" class=\"headerlink\" title=\"absolute：生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素进行定位\"></a>absolute：生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素进行定位</h2><blockquote>\n<p>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。 （IE6不支持）<br>relative：生成相对定位的元素，相对于其在普通流中的位置进行定位<br>static：默认值。没有定位，元素出现在正常的流中</p>\n</blockquote>\n<h2 id=\"Gulp-自动刷新\"><a href=\"#Gulp-自动刷新\" class=\"headerlink\" title=\"Gulp 自动刷新\"></a>Gulp 自动刷新</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var less = require(&apos;gulp-less&apos;)</div><div class=\"line\">var connect = require(&apos;gulp-connect&apos;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(&quot;webserver&quot;, function() &#123;</div><div class=\"line\">\tconnect.server(&#123;</div><div class=\"line\">\t\tlivereload: true</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;css&apos;, function() &#123;</div><div class=\"line\"></div><div class=\"line\">\tgulp.src(&quot;*.css&quot;).pipe(connect.reload())</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;less&apos;, function() &#123;</div><div class=\"line\"></div><div class=\"line\">\tgulp.src(&quot;*.less&quot;).pipe(less()).pipe(gulp.dest(&quot;./&quot;)).pipe(connect.reload())</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;watch&apos;, function() &#123;</div><div class=\"line\"></div><div class=\"line\">\tgulp.watch(&quot;*.less&quot;, [&apos;less&apos;])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(&quot;default&quot;, [&apos;webserver&apos;, &apos;watch&apos;])</div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>内部函数引用外部变量<br>模块化，可重用，实现信息隐藏<br>优：<br>封装私有属性和私有方法，加强封装性，可以达到对变量的保护作用。<br>更好的组织代码，比如模块化<br>缺：<br>增加了内存的消耗，并且在某些浏览器下，由于垃圾回收机制不同，有可能导致内存溢出<br>增加复杂度<br>由于闭包内部变量优先级高于外部变量，所以多查找作用域链中的一个层次，就会在一定程度上影响查找速度。</p>\n</blockquote>\n<h2 id=\"变量提升-link\"><a href=\"#变量提升-link\" class=\"headerlink\" title=\"变量提升 link\"></a>变量提升 <a href=\"http://www.cnblogs.com/strick/p/5806427.html\" target=\"_blank\" rel=\"external\">link</a></h2><blockquote>\n<p>变量和函数的所有声明都会在任何代码被执行前首先被处理<br>函数声明和变量声明总是被JavaScript解释器隐式地提升到包含他们的作用域的最顶端。<br>function优先声明于var。<br>函数表达式中只会提升名称，函数体只有在执行到赋值语句时才会被赋值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">    bar();</div><div class=\"line\">    var x = 1;</div><div class=\"line\">&#125;</div><div class=\"line\">function foo() &#123;//等同于</div><div class=\"line\">    var x;</div><div class=\"line\">    bar();</div><div class=\"line\">    x = 1;</div><div class=\"line\">&#125;</div><div class=\"line\">function test() &#123;</div><div class=\"line\">    foo(); // TypeError &quot;foo is not a function&quot;</div><div class=\"line\">    bar(); // &quot;this will run!&quot;</div><div class=\"line\">    var foo = function () &#123; &#125;// 函数表达式被赋值给变量&apos;foo&apos;</div><div class=\"line\">    function bar() &#123; &#125;// 名为&apos;bar&apos;的函数声明</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"JS实现面向对象和继承机制\"><a href=\"#JS实现面向对象和继承机制\" class=\"headerlink\" title=\"JS实现面向对象和继承机制\"></a>JS实现面向对象和继承机制</h2><blockquote>\n<p><em>创建对象方法：</em><br>a. 利用json创建对象<br>b. 使用JavaScript中的Object类型<br>c. 通过创建函数来生成对象<br><em>继承机制：</em><br>a. 构造函数绑定，使用call或apply方法，将父对象的构造函数绑定在子对象上<br>b. prototype模式，继承new函数的模式<br>c. 直接继承函数的prototype属性，对b的一种改进<br>d. 利用空对象作为中介<br>e. 在ECMAScript5中定义了一个新方法Object.create()，用于创建一个新方法<br>f. 拷贝继承，把父对象的所有属性和方法，拷贝进子对象，实现继承。参考《JavaScript中的对象克隆》</p>\n</blockquote>\n<h2 id=\"Prototype模式\"><a href=\"#Prototype模式\" class=\"headerlink\" title=\"Prototype模式\"></a>Prototype模式</h2><h2 id=\"this-link\"><a href=\"#this-link\" class=\"headerlink\" title=\"this link\"></a>this <a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\" target=\"_blank\" rel=\"external\">link</a></h2><blockquote>\n<p>this指的是：调用函数的那个对象。<br>a. 纯粹的函数调用，属于全局性调用，因此this就代表全局对象Global。<br>b. 作为对象方法的调用，这时this就指这个上级对象。<br>c. 作为构造函数调用，就是通过这个函数new一个新对象（object）。这时，this就指这个新对象。<br>d. apply与call的调用，它们的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。</p>\n</blockquote>\n<h2 id=\"冒泡和捕获\"><a href=\"#冒泡和捕获\" class=\"headerlink\" title=\"冒泡和捕获\"></a>冒泡和捕获</h2><blockquote>\n<p>阻止冒泡<br><code>event.stopPropagation()</code><br><code>event.cancelBubble=true。</code><br>阻止默认事件<br><code>event.preventDefault()</code><br><code>event.returnValue=false。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function addEvent(obj,type,handle)&#123;</div><div class=\"line\">    try&#123;  // Chrome、FireFox、Opera、Safari、IE9.0及其以上版本</div><div class=\"line\">        obj.addEventListener(type,handle,false);</div><div class=\"line\">    &#125;catch(e)&#123;</div><div class=\"line\">        try&#123;  // IE8.0及其以下版本</div><div class=\"line\">            obj.attachEvent(&apos;on&apos; + type,handle);</div><div class=\"line\">        &#125;catch(e)&#123;  // 早期浏览器</div><div class=\"line\">            obj[&apos;on&apos; + type] = handle;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">addEvent(document.getElementById(&quot;demo&quot;),&quot;click&quot;,myAlert);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"null和undefined的区别-link\"><a href=\"#null和undefined的区别-link\" class=\"headerlink\" title=\"null和undefined的区别 link\"></a>null和undefined的区别 <a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\" target=\"_blank\" rel=\"external\">link</a></h2><blockquote>\n<p>null：<br>a. null是一个表示”无”的对象，转为数值时为0<br>b. null表示”没有对象”，即该处不应该有值。<br>undefined：<br>a. undefined是一个表示”无”的原始值，转为数值时为NaN。<br>b. undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</p>\n</blockquote>\n<h2 id=\"立即执行函数（IIFE）-Link\"><a href=\"#立即执行函数（IIFE）-Link\" class=\"headerlink\" title=\"立即执行函数（IIFE） Link\"></a>立即执行函数（IIFE） <a href=\"http://web.jobbole.com/82520/\" target=\"_blank\" rel=\"external\">Link</a></h2><ul>\n<li>括号内部不能包含语句，当解析器对代码进行解释的时候，先碰到了<code>()</code>，然后碰到<code>function</code>关键字就会自动将<code>()</code>里面的代码识别为<em>函数表达式</em>而不是<em>函数声明</em>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 最常用的两种写法</div><div class=\"line\">(function()&#123; /* code */ &#125;()); // 老道推荐写法</div><div class=\"line\">(function()&#123; /* code */ &#125;)(); // 当然这种也可以</div><div class=\"line\"></div><div class=\"line\">// 括号和JS的一些操作符（如 = &amp;&amp; || ,等）可以在函数表达式和函数声明上消除歧义</div><div class=\"line\">// 如下代码中，解析器已经知道一个是表达式了，于是也会把另一个默认为表达式</div><div class=\"line\">// 但是两者交换则会报错</div><div class=\"line\">var i = function()&#123; return 10; &#125;();</div><div class=\"line\">true &amp;&amp; function()&#123; /* code */ &#125;();</div><div class=\"line\">0, function()&#123; /* code */ &#125;();</div><div class=\"line\"></div><div class=\"line\">// 如果你不怕代码晦涩难读，也可以选择一元运算符</div><div class=\"line\">!function()&#123; /* code */ &#125;();</div><div class=\"line\">~function()&#123; /* code */ &#125;();</div><div class=\"line\">-function()&#123; /* code */ &#125;();</div><div class=\"line\">+function()&#123; /* code */ &#125;();</div><div class=\"line\"></div><div class=\"line\">// 你也可以这样</div><div class=\"line\">new function()&#123; /* code */ &#125;</div><div class=\"line\">new function()&#123; /* code */ &#125;() // 带参数</div></pre></td></tr></table></figure>\n<ul>\n<li>立即执行函数在模块化中也大有用处。用立即执行函数处理模块化可以减少全局变量造成的空间污染，构造更多的<em>私有变量</em>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个立即执行的匿名函数</div><div class=\"line\">// 该函数返回一个对象，包含你要暴露的属性</div><div class=\"line\">// 如下代码如果不使用立即执行函数，就会多一个属性i</div><div class=\"line\">// 如果有了属性i，我们就能调用counter.i改变i的值</div><div class=\"line\">// 对我们来说这种不确定的因素越少越好</div><div class=\"line\"></div><div class=\"line\">var counter = (function()&#123;</div><div class=\"line\">  var i = 0;</div><div class=\"line\"></div><div class=\"line\">  return &#123;</div><div class=\"line\">    get: function()&#123;</div><div class=\"line\">      return i;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: function( val )&#123;</div><div class=\"line\">      i = val;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    increment: function() &#123;</div><div class=\"line\">      return ++i;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\">// counter其实是一个对象</div><div class=\"line\"></div><div class=\"line\">counter.get(); // 0</div><div class=\"line\">counter.set( 3 );</div><div class=\"line\">counter.increment(); // 4</div><div class=\"line\">counter.increment(); // 5</div><div class=\"line\"></div><div class=\"line\">counter.i; // undefined i并不是counter的属性</div><div class=\"line\">i; // ReferenceError: i is not defined (函数内部的是局部变量)</div></pre></td></tr></table></figure>\n<h2 id=\"EVAL和new-function的区别-Link\"><a href=\"#EVAL和new-function的区别-Link\" class=\"headerlink\" title=\"EVAL和new function的区别  Link\"></a>EVAL和new function的区别  <a href=\"http://www.cnblogs.com/shine-li/articles/2772737.html\" target=\"_blank\" rel=\"external\">Link</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var jsonStr = &quot;&#123;&apos;a:&apos;:&apos;b&apos;&#125;&quot;;</div><div class=\"line\">2 var object = eval(jsonStr);  //会报错 </div><div class=\"line\">不加括号eval时，js会把&#123;&#125;当成代码块，而&apos;a&apos;:&apos;b&apos;当成语句来进行解析，那么肯定会报语法错误;</div><div class=\"line\"> &apos;(&apos; + jsonStr + &apos;)&apos;后，代码字符串变成 (&#123;&apos;a&apos;:&apos;b&apos;&#125;)，那么该代码是个正确的js赋值代码</div><div class=\"line\">3 var object = eval(&apos;(&apos; + jsonStr + &apos;)&apos;);  //则会正确解析</div></pre></td></tr></table></figure>\n<ul>\n<li><p>他们的区别在于：作用域不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;console.log(a)&apos;;</div><div class=\"line\">var a = 0;</div><div class=\"line\">(function() &#123;</div><div class=\"line\">  var a = 1;</div><div class=\"line\">  eval(&apos;(&apos; + str + &apos;)&apos;);                                 //返回1</div><div class=\"line\">  window.eval(&apos;(&apos; + str + &apos;)&apos;);                          //返回0</div><div class=\"line\">  (new Function(&apos;return &apos; + str))();                     //返回0</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于JS的函数作用域来说，变量作用域有任意层级，即 <em>其他函数内部定义的函数可以调用父函数的局部变量</em>，而内部函数里定义的函数不仅可以调用父函数的局部变量，还可以调用祖父函数的局部变量，以此类推* —— 摘自 《Javascript编程精解》</p>\n</li>\n</ul>\n<p>因此，对于上述例子来说，<code>window.eval</code>和<code>new Function</code>都是全局作用域的，即他们只能调用全局变量；而eval是局部函数，即他可以调用其父函数的局部变量。</p>\n<h2 id=\"Function-bind\"><a href=\"#Function-bind\" class=\"headerlink\" title=\"Function.bind\"></a>Function.bind</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function.prototype.bind = function (scope) &#123;</div><div class=\"line\">    var fn = this;</div><div class=\"line\">    return function () &#123;</div><div class=\"line\">        return fn.apply(scope);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!Function.prototype.bind) &#123;</div><div class=\"line\">  Function.prototype.bind = function (oThis) &#123;</div><div class=\"line\">    if (typeof this !== &quot;function&quot;) &#123;</div><div class=\"line\">      // closest thing possible to the ECMAScript 5</div><div class=\"line\">      // internal IsCallable function</div><div class=\"line\">      throw new TypeError(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var aArgs = Array.prototype.slice.call(arguments, 1), </div><div class=\"line\">        fToBind = this, </div><div class=\"line\">        fNOP = function () &#123;&#125;,</div><div class=\"line\">        fBound = function () &#123;</div><div class=\"line\">          return fToBind.apply(this instanceof fNOP</div><div class=\"line\">                                 ? this</div><div class=\"line\">                                 : oThis || this,</div><div class=\"line\">                               aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    fNOP.prototype = this.prototype;</div><div class=\"line\">    fBound.prototype = new fNOP();</div><div class=\"line\"></div><div class=\"line\">    return fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><p><code>var getName</code> 与 <code>function getName</code> 都是声明语句，<br>区别在于 <code>var getName</code> 是<em>函数表达式</em>，而 <code>function getName</code> 是<em>函数声明</em>。<br>事实是函数声明会覆盖变量声明。</p>\n<h2 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h2><p>既拥有了<code>block</code>元素可以<em>设置<code>width</code>和<code>height</code></em>的特性，又保持了<code>inline</code>元素<em>不换行</em>的特性。<br><code>inline</code>元素之间就有空隙出现,空白符！ <code>font-size:0px;</code></p>\n<h2 id=\"JAVASCRIPT-装载和执行\"><a href=\"#JAVASCRIPT-装载和执行\" class=\"headerlink\" title=\"JAVASCRIPT 装载和执行\"></a>JAVASCRIPT 装载和执行</h2><p>浏览器是并行加载css文件，串行加载js文件。</p>\n<h2 id=\"apply-amp-amp-this\"><a href=\"#apply-amp-amp-this\" class=\"headerlink\" title=\"apply &amp;&amp; this\"></a>apply &amp;&amp; this</h2><p>apply：应用某一对象的一个方法，用另一个对象替换当前对象。<br>call：调用一个对象的一个方法，以另一个对象替换当前对象。<br>可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">function.apply([thisObj[,argArray]])</div><div class=\"line\">function.call([thisObj[,arg1[, arg2[, [,.argN]]]]])</div></pre></td></tr></table></figure></p>\n<p><code>Math.max.apply(null, [a, b, c, d, ...])</code></p>\n","excerpt":"<p>整理一些常用的前端知识</p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2016/11/javascript.html\">全栈开发</a></p>\n<p><a href=\"http://www.cnblogs.com/strick/p/4968200.html\">LINK</a></p>\n<ul>\n<li>box-sizing</li>\n<li>BFC</li>\n<li>块级元素,内联元素</li>\n<li>浮动</li>\n<li>AMD和CMD</li>\n<li><img>标签上title属性与alt属性的区别</li>\n<li>标签语义化</li>\n<li>html5新特性</li>\n<li>CSS的选择器</li>\n<li>CSS伪类与CSS伪对象</li>\n<li>等高布局</li>\n<li>px、em</li>\n<li>link 和@import</li>\n<li>position的absolute与fixed</li>\n<li>闭包</li>\n<li>JS实现面向对象和继承机制</li>\n<li>Prototype模式</li>\n<li>this</li>\n<li>冒泡和捕获</li>\n<li>null和undefined的区别</li>\n<li>flex</li>\n<li>立即执行函数 IIFE</li>\n<li>EVAL和new function的区别</li>\n<li>inline-block</li>\n</ul>","more":"<h2 id=\"BFC\"><a href=\"#BFC\" class=\"headerlink\" title=\"BFC\"></a>BFC</h2><ul>\n<li><a href=\"http://elcarim5efil.github.io/blog/2015/08/20/Learning_BFC.html\">块格式化上下文</a>块格式化上下文,内部元素和外部元素相互隔离，使内外元素的定位不会互相影响，可以闭合浮动，防止与浮动元素重叠<br>块格式上下文是页面CSS 视觉渲染的一部分，用于决定块盒子的布局及浮动相互影响范围的一个区域。</li>\n</ul>\n<blockquote>\n<p>BFC的创建方法</p>\n<ul>\n<li>根元素或其它包含它的元素；</li>\n<li>浮动 (元素的<code>float</code>不为<code>none</code>)；</li>\n<li>绝对定位元素 (元素的<code>position</code>为<code>absolute</code>或<code>fixed</code>)；</li>\n<li>行内块<code>inline-blocks</code>(元素的<code>display: inline-block</code>)；</li>\n<li>表格单元格(元素的<code>display: table-cell</code>，HTML表格单元格默认属性)；</li>\n<li><code>overflow</code>的值不为<code>visible</code>的元素；</li>\n<li>弹性盒<code>flex boxes</code> (元素的<code>display: flex</code>或<code>inline-flex</code>)；<br>但其中，最常见的就是<code>overflow:hidden、float:left/right、position:absolute</code>。也就是说，每次看到这些属性的时候，就代表了该元素以及创建了一个BFC了。<br>一个BFC包含创建该上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。</li>\n</ul>\n<p>BFC特性</p>\n<ul>\n<li>内部的盒会在垂直方向一个接一个排列（可以看作BFC中有一个的常规流）；</li>\n<li>处于同一个BFC中的元素相互影响，可能会发生margin collapse；</li>\n<li>每个元素的margin box的左边，与容器块border box的左边相接触(对于从左往右的格式化，否则相反)。即- 使存在浮动也是如此；</li>\n<li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然；</li>\n<li><strong>计算BFC的高度时，考虑BFC所包含的所有元素，连浮动元素也参与计算</strong>；</li>\n<li>浮动盒区域不叠加到BFC上；</li>\n</ul>\n</blockquote>\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><table>\n<thead>\n<tr>\n<th>-</th>\n<th>简述</th>\n<th>sample</th>\n<th>remark</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>块级元素</td>\n<td>另起一行的方式一直往下排</td>\n<td><code>address,blockquote,center,dir,div,dl,filedset,form,h1-h6,hr,ol,ul,p,pre,table</code></td>\n<td></td>\n</tr>\n<tr>\n<td>内联元素</td>\n<td><code>display</code>为<code>inline</code>，<code>inline-block</code>或<code>inline-table</code> 一行并排显示,只能容纳文本或者其他内联元素</td>\n<td><code>a,b,br,cite,em,i,img,input,label,span,small,strong</code></td>\n<td>- <code>width,height</code>无效 -<code>margin,padding</code> 上下无效</td>\n</tr>\n<tr>\n<td>可变元素</td>\n<td></td>\n<td><code>button,del,iframe,ins,object,script</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h2><ul>\n<li>导致常规流环绕在它的周边<blockquote>\n<p>浮动会漂浮于普通流之上，像浮云一样，但是只能左右浮动。正是这种特性，导致框内部由于不存在其他普通流元素了，表现出高度为0（高度塌陷）。<br>a. 添加额外标签，例如<div style=\"clear:both\"></div><br>b. 使用br标签和其自身的html属性，例如<br clear=\"all\" /><br>c. 父元素设置 overflow：hidden；在IE6中还需要触发<a href=\"http://yiminghe.iteye.com/blog/367384\">hasLayout</a>，例如zoom：1；<br>d. 父元素设置 overflow：auto 属性；同样IE6需要触发hasLayout<br>e. 父元素也设置浮动<br>f. 父元素设置display:table<br>g. 使用:after 伪元素；由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。<br>在CSS2.1里面有一个很重要的概念，那就是 Block formatting contexts （块级格式化上下文），简称 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\">BFC</a>。<br>创建了BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，同时BFC仍然属于文档中的普通流。<br>IE6-7的显示引擎使用的是一个称为布局（layout）的内部概念。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"AMD和CMD-规范的区别？\"><a href=\"#AMD和CMD-规范的区别？\" class=\"headerlink\" title=\"AMD和CMD 规范的区别？\"></a>AMD和CMD 规范的区别？</h2><ul>\n<li>AMD 提前执行依赖 - 尽早执行，requireJS 是它的实现 </li>\n<li>CMD 按需执行依赖 - 懒执行，seaJS 是它的实现<br><a href=\"https://www.douban.com/note/283566440/\">SeaJS与RequireJS最大的区别</a></li>\n</ul>\n<h2 id=\"html5新特性\"><a href=\"#html5新特性\" class=\"headerlink\" title=\"html5新特性\"></a>html5新特性</h2><blockquote>\n<p>a. HTML5 现在已经不是 SGML 的子集，主要是关于图像，位置，存储，多任务等功能的增加。<br>b. 拖拽释放(<code>Drag and drop</code>) API<br>c. 语义化更好的内容标签（header,nav,footer,aside,article,section）<br>d. 音频、视频API(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio\">audio</a>,<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\">video</a>)<br>e. 画布(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\">Canvas</a>) API<br>f. 地理(<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation/Using_geolocation\">Geolocation</a>) API<br>g. 本地离线存储 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage\">localStorage</a> 长期存储数据，浏览器关闭后数据不丢失<br>h. <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage\">sessionStorage</a> 的数据在页面会话结束时会被清除<br>i. 表单控件，<code>calendar、date、time、email、url、search</code><br>j. 新的技术<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API/Using_web_workers\">webworker</a>, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket\">websocket</a>等<br><strong>移除的元素：</strong><br>a. 纯表现的元素：<code>basefont，big，center, s，strike，tt，u</code>；<br>b. 对可用性产生负面影响的元素：<code>frame，frameset，noframes</code>；</p>\n</blockquote>\n<h2 id=\"CSS的选择器\"><a href=\"#CSS的选择器\" class=\"headerlink\" title=\"CSS的选择器\"></a>CSS的选择器</h2><blockquote>\n<p>元素选择器：<code>* 、E、 E#id、 E.class</code><br>关系选择器：<code>E、F、E&gt;F、E+F、E~F</code><br>属性选择器：<code>E[att]、E[att=&quot;val&quot;]、E[att~=&quot;val&quot;]、E[att^=&quot;val&quot;]、E[att$=&quot;val&quot;]、E[att*=&quot;val&quot;]、E[att|=&quot;val&quot;]</code><br>伪类选择器：<code>E:link、E:visited、E:hover、E:active、E:focus、E:lang(fr)、E:not(s)、E:root、E:first-child、E:last-chil</code>等<br>伪对象选择器：<code>E:first-letter/E::first-letter、E:first-line/E::first-line、E:before/E::before、E:after/E::after、E::selection</code></p>\n</blockquote>\n<h2 id=\"CSS伪类与CSS伪对象\"><a href=\"#CSS伪类与CSS伪对象\" class=\"headerlink\" title=\"CSS伪类与CSS伪对象\"></a>CSS伪类与CSS伪对象</h2><blockquote>\n<p>CSS 引入伪类和伪元素的概念是为了描述一些现有CSS无法描述的东西<br>根本区别在于：<strong>它们是否创造了新的元素（抽象）</strong><br>伪类：一开始用来表示一些元素的动态状态，随后CSS2标准扩展了其概念范围，使其成为了所有逻辑上存在但在文档树中却无须标识的“幽灵”分类<br>伪对象：代表了某个元素的子元素，这个子元素虽然在逻辑上存在，但却并不实际存在于文档树中</p>\n</blockquote>\n<h2 id=\"请写出多种等高布局\"><a href=\"#请写出多种等高布局\" class=\"headerlink\" title=\"请写出多种等高布局\"></a>请写出多种等高布局</h2><blockquote>\n<p>a. 假等高列：使用背景图片，在列的父元素上使用这个背景图进行Y轴的铺放，从而实现一种等高列的假像<br>b. 给容器div使用单独的背景色（<a href=\"http://codepen.io/strick/pen/ZbZYoW\">固定布局</a>）（<a href=\"http://codepen.io/strick/pen/WQWOPK\">流体布局</a>）：用<div>元素中的最大高度撑大其他的<div>容器高度<br>c. 创建<a href=\"http://codepen.io/strick/pen/bVJRQv\">带边框的两列</a>等高布局：用border-left来做，只能使用两列。<br>d. 使用<a href=\"http://codepen.io/strick/pen/qOwXEN\">正padding和负margin</a>对冲实现多列布局方法：在所有列中使用正的上、下padding和负的上、下margin，并在所有列外面加上一个容器，设置overflow:hiden把溢出背景切掉<br>e. 使用<a href=\"http://codepen.io/strick/pen/XmQabJ\">边框和定位模拟</a>列等高：但不能使用在多列<br>f. <a href=\"http://codepen.io/strick/pen/ZbZJGg\">模仿表格布局</a>等高列效果：兼容性不好，在ie6-7无法正常运行</p>\n</blockquote>\n<h2 id=\"在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？\"><a href=\"#在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？\" class=\"headerlink\" title=\"在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？\"></a>在CSS样式中常使用px、em，各有什么优劣，在表现上有什么区别？</h2><blockquote>\n<p>px是相对长度单位，相对于显示器屏幕分辨率而言的。<br>em是相对长度单位，相对于当前对象内文本的字体尺寸。<br>px定义的字体，无法用浏览器字体放大功能。<br>em的值并不是固定的，会继承父级元素的字体大小，1 ÷ 父元素的font-size × 需要转换的像素值 = em值。</p>\n</blockquote>\n<h2 id=\"CSS中-link-和-import-的区别是什么？\"><a href=\"#CSS中-link-和-import-的区别是什么？\" class=\"headerlink\" title=\"CSS中 link 和@import 的区别是什么？\"></a>CSS中 link 和@import 的区别是什么？</h2><blockquote>\n<p>a. link属于HTML标签，而@import是CSS提供的，且只能加载 CSS<br>b. 页面被加载时，link会同时被加载，而@import引用的CSS会等到页面被加载完再加载<br>c. import只在IE5以上才能识别，而link是HTML标签，无兼容问题<br>d. link方式的样式的权重 高于@import的权重<br>e. 当使用 Javascript 控制 DOM 去改变样式的时候，只能使用 link 方式，因为 @import 眼里只有 CSS ，不是 DOM 可以控制</p>\n</blockquote>\n<h2 id=\"position的absolute与fixed共同点与不同点\"><a href=\"#position的absolute与fixed共同点与不同点\" class=\"headerlink\" title=\"position的absolute与fixed共同点与不同点\"></a>position的absolute与fixed共同点与不同点</h2><blockquote>\n<p>相同：<br>a. 改变行内元素的呈现方式，display被置为block<br>b. 让元素脱离普通流，不占据空间<br>c. 默认会覆盖到非定位元素上<br>区别：<br>absolute的”根元素“是可以设置的，而fixed的”根元素“固定为浏览器窗口。<br>当你滚动网页，fixed元素与浏览器窗口之间的距离是不变的。</p>\n</blockquote>\n<h2 id=\"absolute：生成绝对定位的元素，相对于-static-定位以外的第一个祖先元素进行定位\"><a href=\"#absolute：生成绝对定位的元素，相对于-static-定位以外的第一个祖先元素进行定位\" class=\"headerlink\" title=\"absolute：生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素进行定位\"></a>absolute：生成绝对定位的元素，相对于 static 定位以外的第一个祖先元素进行定位</h2><blockquote>\n<p>fixed：生成绝对定位的元素，相对于浏览器窗口进行定位。 （IE6不支持）<br>relative：生成相对定位的元素，相对于其在普通流中的位置进行定位<br>static：默认值。没有定位，元素出现在正常的流中</p>\n</blockquote>\n<h2 id=\"Gulp-自动刷新\"><a href=\"#Gulp-自动刷新\" class=\"headerlink\" title=\"Gulp 自动刷新\"></a>Gulp 自动刷新</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var less = require(&apos;gulp-less&apos;)</div><div class=\"line\">var connect = require(&apos;gulp-connect&apos;);</div><div class=\"line\"></div><div class=\"line\">gulp.task(&quot;webserver&quot;, function() &#123;</div><div class=\"line\">\tconnect.server(&#123;</div><div class=\"line\">\t\tlivereload: true</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;css&apos;, function() &#123;</div><div class=\"line\"></div><div class=\"line\">\tgulp.src(&quot;*.css&quot;).pipe(connect.reload())</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;less&apos;, function() &#123;</div><div class=\"line\"></div><div class=\"line\">\tgulp.src(&quot;*.less&quot;).pipe(less()).pipe(gulp.dest(&quot;./&quot;)).pipe(connect.reload())</div><div class=\"line\"></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(&apos;watch&apos;, function() &#123;</div><div class=\"line\"></div><div class=\"line\">\tgulp.watch(&quot;*.less&quot;, [&apos;less&apos;])</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">gulp.task(&quot;default&quot;, [&apos;webserver&apos;, &apos;watch&apos;])</div></pre></td></tr></table></figure>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><blockquote>\n<p>内部函数引用外部变量<br>模块化，可重用，实现信息隐藏<br>优：<br>封装私有属性和私有方法，加强封装性，可以达到对变量的保护作用。<br>更好的组织代码，比如模块化<br>缺：<br>增加了内存的消耗，并且在某些浏览器下，由于垃圾回收机制不同，有可能导致内存溢出<br>增加复杂度<br>由于闭包内部变量优先级高于外部变量，所以多查找作用域链中的一个层次，就会在一定程度上影响查找速度。</p>\n</blockquote>\n<h2 id=\"变量提升-link\"><a href=\"#变量提升-link\" class=\"headerlink\" title=\"变量提升 link\"></a>变量提升 <a href=\"http://www.cnblogs.com/strick/p/5806427.html\">link</a></h2><blockquote>\n<p>变量和函数的所有声明都会在任何代码被执行前首先被处理<br>函数声明和变量声明总是被JavaScript解释器隐式地提升到包含他们的作用域的最顶端。<br>function优先声明于var。<br>函数表达式中只会提升名称，函数体只有在执行到赋值语句时才会被赋值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">    bar();</div><div class=\"line\">    var x = 1;</div><div class=\"line\">&#125;</div><div class=\"line\">function foo() &#123;//等同于</div><div class=\"line\">    var x;</div><div class=\"line\">    bar();</div><div class=\"line\">    x = 1;</div><div class=\"line\">&#125;</div><div class=\"line\">function test() &#123;</div><div class=\"line\">    foo(); // TypeError &quot;foo is not a function&quot;</div><div class=\"line\">    bar(); // &quot;this will run!&quot;</div><div class=\"line\">    var foo = function () &#123; &#125;// 函数表达式被赋值给变量&apos;foo&apos;</div><div class=\"line\">    function bar() &#123; &#125;// 名为&apos;bar&apos;的函数声明</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"JS实现面向对象和继承机制\"><a href=\"#JS实现面向对象和继承机制\" class=\"headerlink\" title=\"JS实现面向对象和继承机制\"></a>JS实现面向对象和继承机制</h2><blockquote>\n<p><em>创建对象方法：</em><br>a. 利用json创建对象<br>b. 使用JavaScript中的Object类型<br>c. 通过创建函数来生成对象<br><em>继承机制：</em><br>a. 构造函数绑定，使用call或apply方法，将父对象的构造函数绑定在子对象上<br>b. prototype模式，继承new函数的模式<br>c. 直接继承函数的prototype属性，对b的一种改进<br>d. 利用空对象作为中介<br>e. 在ECMAScript5中定义了一个新方法Object.create()，用于创建一个新方法<br>f. 拷贝继承，把父对象的所有属性和方法，拷贝进子对象，实现继承。参考《JavaScript中的对象克隆》</p>\n</blockquote>\n<h2 id=\"Prototype模式\"><a href=\"#Prototype模式\" class=\"headerlink\" title=\"Prototype模式\"></a>Prototype模式</h2><h2 id=\"this-link\"><a href=\"#this-link\" class=\"headerlink\" title=\"this link\"></a>this <a href=\"http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html\">link</a></h2><blockquote>\n<p>this指的是：调用函数的那个对象。<br>a. 纯粹的函数调用，属于全局性调用，因此this就代表全局对象Global。<br>b. 作为对象方法的调用，这时this就指这个上级对象。<br>c. 作为构造函数调用，就是通过这个函数new一个新对象（object）。这时，this就指这个新对象。<br>d. apply与call的调用，它们的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。</p>\n</blockquote>\n<h2 id=\"冒泡和捕获\"><a href=\"#冒泡和捕获\" class=\"headerlink\" title=\"冒泡和捕获\"></a>冒泡和捕获</h2><blockquote>\n<p>阻止冒泡<br><code>event.stopPropagation()</code><br><code>event.cancelBubble=true。</code><br>阻止默认事件<br><code>event.preventDefault()</code><br><code>event.returnValue=false。</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function addEvent(obj,type,handle)&#123;</div><div class=\"line\">    try&#123;  // Chrome、FireFox、Opera、Safari、IE9.0及其以上版本</div><div class=\"line\">        obj.addEventListener(type,handle,false);</div><div class=\"line\">    &#125;catch(e)&#123;</div><div class=\"line\">        try&#123;  // IE8.0及其以下版本</div><div class=\"line\">            obj.attachEvent(&apos;on&apos; + type,handle);</div><div class=\"line\">        &#125;catch(e)&#123;  // 早期浏览器</div><div class=\"line\">            obj[&apos;on&apos; + type] = handle;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">addEvent(document.getElementById(&quot;demo&quot;),&quot;click&quot;,myAlert);</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"null和undefined的区别-link\"><a href=\"#null和undefined的区别-link\" class=\"headerlink\" title=\"null和undefined的区别 link\"></a>null和undefined的区别 <a href=\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\">link</a></h2><blockquote>\n<p>null：<br>a. null是一个表示”无”的对象，转为数值时为0<br>b. null表示”没有对象”，即该处不应该有值。<br>undefined：<br>a. undefined是一个表示”无”的原始值，转为数值时为NaN。<br>b. undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。</p>\n</blockquote>\n<h2 id=\"立即执行函数（IIFE）-Link\"><a href=\"#立即执行函数（IIFE）-Link\" class=\"headerlink\" title=\"立即执行函数（IIFE） Link\"></a>立即执行函数（IIFE） <a href=\"http://web.jobbole.com/82520/\">Link</a></h2><ul>\n<li>括号内部不能包含语句，当解析器对代码进行解释的时候，先碰到了<code>()</code>，然后碰到<code>function</code>关键字就会自动将<code>()</code>里面的代码识别为<em>函数表达式</em>而不是<em>函数声明</em>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 最常用的两种写法</div><div class=\"line\">(function()&#123; /* code */ &#125;()); // 老道推荐写法</div><div class=\"line\">(function()&#123; /* code */ &#125;)(); // 当然这种也可以</div><div class=\"line\"></div><div class=\"line\">// 括号和JS的一些操作符（如 = &amp;&amp; || ,等）可以在函数表达式和函数声明上消除歧义</div><div class=\"line\">// 如下代码中，解析器已经知道一个是表达式了，于是也会把另一个默认为表达式</div><div class=\"line\">// 但是两者交换则会报错</div><div class=\"line\">var i = function()&#123; return 10; &#125;();</div><div class=\"line\">true &amp;&amp; function()&#123; /* code */ &#125;();</div><div class=\"line\">0, function()&#123; /* code */ &#125;();</div><div class=\"line\"></div><div class=\"line\">// 如果你不怕代码晦涩难读，也可以选择一元运算符</div><div class=\"line\">!function()&#123; /* code */ &#125;();</div><div class=\"line\">~function()&#123; /* code */ &#125;();</div><div class=\"line\">-function()&#123; /* code */ &#125;();</div><div class=\"line\">+function()&#123; /* code */ &#125;();</div><div class=\"line\"></div><div class=\"line\">// 你也可以这样</div><div class=\"line\">new function()&#123; /* code */ &#125;</div><div class=\"line\">new function()&#123; /* code */ &#125;() // 带参数</div></pre></td></tr></table></figure>\n<ul>\n<li>立即执行函数在模块化中也大有用处。用立即执行函数处理模块化可以减少全局变量造成的空间污染，构造更多的<em>私有变量</em>。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个立即执行的匿名函数</div><div class=\"line\">// 该函数返回一个对象，包含你要暴露的属性</div><div class=\"line\">// 如下代码如果不使用立即执行函数，就会多一个属性i</div><div class=\"line\">// 如果有了属性i，我们就能调用counter.i改变i的值</div><div class=\"line\">// 对我们来说这种不确定的因素越少越好</div><div class=\"line\"></div><div class=\"line\">var counter = (function()&#123;</div><div class=\"line\">  var i = 0;</div><div class=\"line\"></div><div class=\"line\">  return &#123;</div><div class=\"line\">    get: function()&#123;</div><div class=\"line\">      return i;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    set: function( val )&#123;</div><div class=\"line\">      i = val;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    increment: function() &#123;</div><div class=\"line\">      return ++i;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\">// counter其实是一个对象</div><div class=\"line\"></div><div class=\"line\">counter.get(); // 0</div><div class=\"line\">counter.set( 3 );</div><div class=\"line\">counter.increment(); // 4</div><div class=\"line\">counter.increment(); // 5</div><div class=\"line\"></div><div class=\"line\">counter.i; // undefined i并不是counter的属性</div><div class=\"line\">i; // ReferenceError: i is not defined (函数内部的是局部变量)</div></pre></td></tr></table></figure>\n<h2 id=\"EVAL和new-function的区别-Link\"><a href=\"#EVAL和new-function的区别-Link\" class=\"headerlink\" title=\"EVAL和new function的区别  Link\"></a>EVAL和new function的区别  <a href=\"http://www.cnblogs.com/shine-li/articles/2772737.html\">Link</a></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 var jsonStr = &quot;&#123;&apos;a:&apos;:&apos;b&apos;&#125;&quot;;</div><div class=\"line\">2 var object = eval(jsonStr);  //会报错 </div><div class=\"line\">不加括号eval时，js会把&#123;&#125;当成代码块，而&apos;a&apos;:&apos;b&apos;当成语句来进行解析，那么肯定会报语法错误;</div><div class=\"line\"> &apos;(&apos; + jsonStr + &apos;)&apos;后，代码字符串变成 (&#123;&apos;a&apos;:&apos;b&apos;&#125;)，那么该代码是个正确的js赋值代码</div><div class=\"line\">3 var object = eval(&apos;(&apos; + jsonStr + &apos;)&apos;);  //则会正确解析</div></pre></td></tr></table></figure>\n<ul>\n<li><p>他们的区别在于：作用域不同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;console.log(a)&apos;;</div><div class=\"line\">var a = 0;</div><div class=\"line\">(function() &#123;</div><div class=\"line\">  var a = 1;</div><div class=\"line\">  eval(&apos;(&apos; + str + &apos;)&apos;);                                 //返回1</div><div class=\"line\">  window.eval(&apos;(&apos; + str + &apos;)&apos;);                          //返回0</div><div class=\"line\">  (new Function(&apos;return &apos; + str))();                     //返回0</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n</li>\n<li><p>对于JS的函数作用域来说，变量作用域有任意层级，即 <em>其他函数内部定义的函数可以调用父函数的局部变量</em>，而内部函数里定义的函数不仅可以调用父函数的局部变量，还可以调用祖父函数的局部变量，以此类推* —— 摘自 《Javascript编程精解》</p>\n</li>\n</ul>\n<p>因此，对于上述例子来说，<code>window.eval</code>和<code>new Function</code>都是全局作用域的，即他们只能调用全局变量；而eval是局部函数，即他可以调用其父函数的局部变量。</p>\n<h2 id=\"Function-bind\"><a href=\"#Function-bind\" class=\"headerlink\" title=\"Function.bind\"></a>Function.bind</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function.prototype.bind = function (scope) &#123;</div><div class=\"line\">    var fn = this;</div><div class=\"line\">    return function () &#123;</div><div class=\"line\">        return fn.apply(scope);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!Function.prototype.bind) &#123;</div><div class=\"line\">  Function.prototype.bind = function (oThis) &#123;</div><div class=\"line\">    if (typeof this !== &quot;function&quot;) &#123;</div><div class=\"line\">      // closest thing possible to the ECMAScript 5</div><div class=\"line\">      // internal IsCallable function</div><div class=\"line\">      throw new TypeError(&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var aArgs = Array.prototype.slice.call(arguments, 1), </div><div class=\"line\">        fToBind = this, </div><div class=\"line\">        fNOP = function () &#123;&#125;,</div><div class=\"line\">        fBound = function () &#123;</div><div class=\"line\">          return fToBind.apply(this instanceof fNOP</div><div class=\"line\">                                 ? this</div><div class=\"line\">                                 : oThis || this,</div><div class=\"line\">                               aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    fNOP.prototype = this.prototype;</div><div class=\"line\">    fBound.prototype = new fNOP();</div><div class=\"line\"></div><div class=\"line\">    return fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"函数表达式\"><a href=\"#函数表达式\" class=\"headerlink\" title=\"函数表达式\"></a>函数表达式</h2><p><code>var getName</code> 与 <code>function getName</code> 都是声明语句，<br>区别在于 <code>var getName</code> 是<em>函数表达式</em>，而 <code>function getName</code> 是<em>函数声明</em>。<br>事实是函数声明会覆盖变量声明。</p>\n<h2 id=\"inline-block\"><a href=\"#inline-block\" class=\"headerlink\" title=\"inline-block\"></a>inline-block</h2><p>既拥有了<code>block</code>元素可以<em>设置<code>width</code>和<code>height</code></em>的特性，又保持了<code>inline</code>元素<em>不换行</em>的特性。<br><code>inline</code>元素之间就有空隙出现,空白符！ <code>font-size:0px;</code></p>\n<h2 id=\"JAVASCRIPT-装载和执行\"><a href=\"#JAVASCRIPT-装载和执行\" class=\"headerlink\" title=\"JAVASCRIPT 装载和执行\"></a>JAVASCRIPT 装载和执行</h2><p>浏览器是并行加载css文件，串行加载js文件。</p>\n<h2 id=\"apply-amp-amp-this\"><a href=\"#apply-amp-amp-this\" class=\"headerlink\" title=\"apply &amp;&amp; this\"></a>apply &amp;&amp; this</h2><p>apply：应用某一对象的一个方法，用另一个对象替换当前对象。<br>call：调用一个对象的一个方法，以另一个对象替换当前对象。<br>可以用来代替另一个对象调用一个方法，将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">function.apply([thisObj[,argArray]])</div><div class=\"line\">function.call([thisObj[,arg1[, arg2[, [,.argN]]]]])</div></pre></td></tr></table></figure></p>\n<p><code>Math.max.apply(null, [a, b, c, d, ...])</code></p>"},{"title":"算法","date":"2017-03-09T07:33:48.000Z","_content":"\n\n算法例子 [LINK](https://sort.hust.cc/)\n\n<!-- more -->\n\n![](/uploads/sort.png)\n\n### 快速排序\n\n```\nvar quickSort = function(arr) {\n　　if (arr.length <= 1) { return arr; }\n　　var pivotIndex = Math.floor(arr.length / 2);\n　　var pivot = arr.splice(pivotIndex, 1)[0];\n　　var left = [];\n　　var right = [];\n　　for (var i = 0; i < arr.length; i++){\n　　　　if (arr[i] < pivot) {\n　　　　　　left.push(arr[i]);\n　　　　} else {\n　　　　　　right.push(arr[i]);\n　　　　}\n　　}\n　　return quickSort(left).concat([pivot], quickSort(right));\n};\n\n```\n\n### 冒泡排序\n```\n\nvar arr=[12,3,4,5,8,22,33,11,6,2,3]\n\n\nfunction sort(arr){\n\tfor(var i=0;i<arr.length;i++){\n\t   for(var j=0;j<arr.length;j++)\n\t   {\n\t      if(arr[i]<arr[j-1])\n\t      {\n\t         var temp=arr[i]\n\t \t\t arr[i]=arr[j-1]\n\t\t\t arr[j-1]=temp\n\t      }\n\t   }\n\t}\n\treturn arr;\n}\n```\n\n\n### 选择排序\n```\nfunction selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for (var j = i + 1; j < len; j++) {\n            if (arr[j] < arr[minIndex]) {     // 寻找最小的数\n                minIndex = j;                 // 将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n```\n\n### 插入排序\n```\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 二分法查找","source":"_posts/算法.md","raw":"---\ntitle: 算法\ndate: 2017-03-09 15:33:48\ntags:\n---\n\n\n算法例子 [LINK](https://sort.hust.cc/)\n\n<!-- more -->\n\n![](/uploads/sort.png)\n\n### 快速排序\n\n```\nvar quickSort = function(arr) {\n　　if (arr.length <= 1) { return arr; }\n　　var pivotIndex = Math.floor(arr.length / 2);\n　　var pivot = arr.splice(pivotIndex, 1)[0];\n　　var left = [];\n　　var right = [];\n　　for (var i = 0; i < arr.length; i++){\n　　　　if (arr[i] < pivot) {\n　　　　　　left.push(arr[i]);\n　　　　} else {\n　　　　　　right.push(arr[i]);\n　　　　}\n　　}\n　　return quickSort(left).concat([pivot], quickSort(right));\n};\n\n```\n\n### 冒泡排序\n```\n\nvar arr=[12,3,4,5,8,22,33,11,6,2,3]\n\n\nfunction sort(arr){\n\tfor(var i=0;i<arr.length;i++){\n\t   for(var j=0;j<arr.length;j++)\n\t   {\n\t      if(arr[i]<arr[j-1])\n\t      {\n\t         var temp=arr[i]\n\t \t\t arr[i]=arr[j-1]\n\t\t\t arr[j-1]=temp\n\t      }\n\t   }\n\t}\n\treturn arr;\n}\n```\n\n\n### 选择排序\n```\nfunction selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for (var j = i + 1; j < len; j++) {\n            if (arr[j] < arr[minIndex]) {     // 寻找最小的数\n                minIndex = j;                 // 将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n```\n\n### 插入排序\n```\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 二分法查找","slug":"算法","published":1,"updated":"2017-03-14T09:41:39.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj496equ800122sl1u6g5npaj","content":"<p>算法例子 <a href=\"https://sort.hust.cc/\" target=\"_blank\" rel=\"external\">LINK</a></p>\n<a id=\"more\"></a>\n<p><img src=\"/uploads/sort.png\" alt=\"\"></p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var quickSort = function(arr) &#123;</div><div class=\"line\">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class=\"line\">　　var pivotIndex = Math.floor(arr.length / 2);</div><div class=\"line\">　　var pivot = arr.splice(pivotIndex, 1)[0];</div><div class=\"line\">　　var left = [];</div><div class=\"line\">　　var right = [];</div><div class=\"line\">　　for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class=\"line\">　　　　if (arr[i] &lt; pivot) &#123;</div><div class=\"line\">　　　　　　left.push(arr[i]);</div><div class=\"line\">　　　　&#125; else &#123;</div><div class=\"line\">　　　　　　right.push(arr[i]);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　return quickSort(left).concat([pivot], quickSort(right));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var arr=[12,3,4,5,8,22,33,11,6,2,3]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function sort(arr)&#123;</div><div class=\"line\">\tfor(var i=0;i&lt;arr.length;i++)&#123;</div><div class=\"line\">\t   for(var j=0;j&lt;arr.length;j++)</div><div class=\"line\">\t   &#123;</div><div class=\"line\">\t      if(arr[i]&lt;arr[j-1])</div><div class=\"line\">\t      &#123;</div><div class=\"line\">\t         var temp=arr[i]</div><div class=\"line\">\t \t\t arr[i]=arr[j-1]</div><div class=\"line\">\t\t\t arr[j-1]=temp</div><div class=\"line\">\t      &#125;</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function selectionSort(arr) &#123;</div><div class=\"line\">    var len = arr.length;</div><div class=\"line\">    var minIndex, temp;</div><div class=\"line\">    for (var i = 0; i &lt; len - 1; i++) &#123;</div><div class=\"line\">        minIndex = i;</div><div class=\"line\">        for (var j = i + 1; j &lt; len; j++) &#123;</div><div class=\"line\">            if (arr[j] &lt; arr[minIndex]) &#123;     // 寻找最小的数</div><div class=\"line\">                minIndex = j;                 // 将最小数的索引保存</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        temp = arr[i];</div><div class=\"line\">        arr[i] = arr[minIndex];</div><div class=\"line\">        arr[minIndex] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function insertionSort(arr) &#123;</div><div class=\"line\">    var len = arr.length;</div><div class=\"line\">    var preIndex, current;</div><div class=\"line\">    for (var i = 1; i &lt; len; i++) &#123;</div><div class=\"line\">        preIndex = i - 1;</div><div class=\"line\">        current = arr[i];</div><div class=\"line\">        while(preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class=\"line\">            arr[preIndex+1] = arr[preIndex];</div><div class=\"line\">            preIndex--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[preIndex+1] = current;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二分法查找\"><a href=\"#二分法查找\" class=\"headerlink\" title=\"二分法查找\"></a>二分法查找</h3>","excerpt":"<p>算法例子 <a href=\"https://sort.hust.cc/\">LINK</a></p>","more":"<p><img src=\"/uploads/sort.png\" alt=\"\"></p>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">var quickSort = function(arr) &#123;</div><div class=\"line\">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class=\"line\">　　var pivotIndex = Math.floor(arr.length / 2);</div><div class=\"line\">　　var pivot = arr.splice(pivotIndex, 1)[0];</div><div class=\"line\">　　var left = [];</div><div class=\"line\">　　var right = [];</div><div class=\"line\">　　for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class=\"line\">　　　　if (arr[i] &lt; pivot) &#123;</div><div class=\"line\">　　　　　　left.push(arr[i]);</div><div class=\"line\">　　　　&#125; else &#123;</div><div class=\"line\">　　　　　　right.push(arr[i]);</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　return quickSort(left).concat([pivot], quickSort(right));</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var arr=[12,3,4,5,8,22,33,11,6,2,3]</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">function sort(arr)&#123;</div><div class=\"line\">\tfor(var i=0;i&lt;arr.length;i++)&#123;</div><div class=\"line\">\t   for(var j=0;j&lt;arr.length;j++)</div><div class=\"line\">\t   &#123;</div><div class=\"line\">\t      if(arr[i]&lt;arr[j-1])</div><div class=\"line\">\t      &#123;</div><div class=\"line\">\t         var temp=arr[i]</div><div class=\"line\">\t \t\t arr[i]=arr[j-1]</div><div class=\"line\">\t\t\t arr[j-1]=temp</div><div class=\"line\">\t      &#125;</div><div class=\"line\">\t   &#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\treturn arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function selectionSort(arr) &#123;</div><div class=\"line\">    var len = arr.length;</div><div class=\"line\">    var minIndex, temp;</div><div class=\"line\">    for (var i = 0; i &lt; len - 1; i++) &#123;</div><div class=\"line\">        minIndex = i;</div><div class=\"line\">        for (var j = i + 1; j &lt; len; j++) &#123;</div><div class=\"line\">            if (arr[j] &lt; arr[minIndex]) &#123;     // 寻找最小的数</div><div class=\"line\">                minIndex = j;                 // 将最小数的索引保存</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        temp = arr[i];</div><div class=\"line\">        arr[i] = arr[minIndex];</div><div class=\"line\">        arr[minIndex] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function insertionSort(arr) &#123;</div><div class=\"line\">    var len = arr.length;</div><div class=\"line\">    var preIndex, current;</div><div class=\"line\">    for (var i = 1; i &lt; len; i++) &#123;</div><div class=\"line\">        preIndex = i - 1;</div><div class=\"line\">        current = arr[i];</div><div class=\"line\">        while(preIndex &gt;= 0 &amp;&amp; arr[preIndex] &gt; current) &#123;</div><div class=\"line\">            arr[preIndex+1] = arr[preIndex];</div><div class=\"line\">            preIndex--;</div><div class=\"line\">        &#125;</div><div class=\"line\">        arr[preIndex+1] = current;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return arr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"二分法查找\"><a href=\"#二分法查找\" class=\"headerlink\" title=\"二分法查找\"></a>二分法查找</h3>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj496eqsi00002sl1ojw14v1j","category_id":"cj496eqsr00042sl1krd65xao","_id":"cj496eqtc000d2sl1gpfxa23h"},{"post_id":"cj496eqta000c2sl1a1mldfn5","category_id":"cj496eqt8000a2sl11i5ma94q","_id":"cj496eqtt000i2sl1ebirsqfm"},{"post_id":"cj496eqsn00022sl1x7qe3e1a","category_id":"cj496eqt8000a2sl11i5ma94q","_id":"cj496eqtw000m2sl10yvbjx5y"},{"post_id":"cj496eqto000e2sl1xr25yohw","category_id":"cj496eqt8000a2sl11i5ma94q","_id":"cj496eqty000p2sl1z38mqqbv"},{"post_id":"cj496eqsx00062sl16vc9ydi7","category_id":"cj496eqtp000f2sl1l1wi8ei7","_id":"cj496equ2000s2sl18pzxu36a"},{"post_id":"cj496eqtu000j2sl1rpi8t43w","category_id":"cj496eqt8000a2sl11i5ma94q","_id":"cj496equ5000x2sl1q67tpbp5"},{"post_id":"cj496eqt100082sl1hrygp15e","category_id":"cj496eqtv000k2sl18soa1kik","_id":"cj496equ7000z2sl1q62ecszr"},{"post_id":"cj496equ3000v2sl12ge970ju","category_id":"cj496eqt8000a2sl11i5ma94q","_id":"cj496equ900132sl15di370gg"},{"post_id":"cj496eqt600092sl1nml3ifkf","category_id":"cj496eqtp000f2sl1l1wi8ei7","_id":"cj496equ900142sl139ver2yu"},{"post_id":"cj496eqts000h2sl1ie3gab0c","category_id":"cj496equ700102sl16bcod5c9","_id":"cj496equa00182sl1io7maqsi"},{"post_id":"cj496eqtw000n2sl1ehh1m2i0","category_id":"cj496equ900152sl1tyqzp47y","_id":"cj496equc001d2sl1rruj62wj"},{"post_id":"cj496eqtz000q2sl1rogtqwvx","category_id":"cj496equ900152sl1tyqzp47y","_id":"cj496equc001g2sl13u9n9ujg"},{"post_id":"cj496equ6000y2sl1lxnyrn4v","category_id":"cj496equc001e2sl1x1uoti11","_id":"cj496equd001j2sl1bq0o7xfi"}],"PostTag":[{"post_id":"cj496eqsi00002sl1ojw14v1j","tag_id":"cj496eqsv00052sl1szkl4i6j","_id":"cj496eqty000o2sl11m9pdo01"},{"post_id":"cj496eqsi00002sl1ojw14v1j","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equ2000r2sl1w11dlhk2"},{"post_id":"cj496eqsi00002sl1ojw14v1j","tag_id":"cj496eqtq000g2sl1lvpo3iu3","_id":"cj496equ5000w2sl1pcinmqhh"},{"post_id":"cj496eqsn00022sl1x7qe3e1a","tag_id":"cj496eqtw000l2sl1ctv95gwb","_id":"cj496equa00172sl10wrih7b5"},{"post_id":"cj496eqsn00022sl1x7qe3e1a","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equb00192sl1030bly21"},{"post_id":"cj496eqsn00022sl1x7qe3e1a","tag_id":"cj496equ800112sl1w7u8rmbs","_id":"cj496equb001c2sl1ijosxi2p"},{"post_id":"cj496eqsx00062sl16vc9ydi7","tag_id":"cj496equ900162sl1adffw88a","_id":"cj496equd001i2sl177dz2r7u"},{"post_id":"cj496eqsx00062sl16vc9ydi7","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equd001k2sl1za9t2p8i"},{"post_id":"cj496eqsx00062sl16vc9ydi7","tag_id":"cj496equc001f2sl19b3ih9aj","_id":"cj496equg001m2sl12err5fqd"},{"post_id":"cj496eqt100082sl1hrygp15e","tag_id":"cj496equd001h2sl1pg29273s","_id":"cj496equi001p2sl1v2161s0z"},{"post_id":"cj496eqt100082sl1hrygp15e","tag_id":"cj496eque001l2sl1u76yeaie","_id":"cj496equi001q2sl1wbx6bjti"},{"post_id":"cj496eqt100082sl1hrygp15e","tag_id":"cj496equg001n2sl1u7gay5rr","_id":"cj496equk001s2sl1csqgggyx"},{"post_id":"cj496eqt600092sl1nml3ifkf","tag_id":"cj496equh001o2sl1ifwv3g1r","_id":"cj496equl001v2sl1wr9f1vgi"},{"post_id":"cj496eqt600092sl1nml3ifkf","tag_id":"cj496eque001l2sl1u76yeaie","_id":"cj496equn001w2sl1t0mudxhb"},{"post_id":"cj496eqt600092sl1nml3ifkf","tag_id":"cj496equk001t2sl11m3jmn4f","_id":"cj496equn001y2sl1zai9vdbl"},{"post_id":"cj496eqta000c2sl1a1mldfn5","tag_id":"cj496eqtw000l2sl1ctv95gwb","_id":"cj496equo00202sl1p0u7h0sp"},{"post_id":"cj496eqta000c2sl1a1mldfn5","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equo00212sl1knkd3mkn"},{"post_id":"cj496eqta000c2sl1a1mldfn5","tag_id":"cj496equn001x2sl1n9to2t3j","_id":"cj496equp00232sl1va1du3f5"},{"post_id":"cj496eqto000e2sl1xr25yohw","tag_id":"cj496eqtw000l2sl1ctv95gwb","_id":"cj496equp00252sl1ajkvw7h3"},{"post_id":"cj496eqto000e2sl1xr25yohw","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equp00262sl1uzvgkx8k"},{"post_id":"cj496eqto000e2sl1xr25yohw","tag_id":"cj496equo00222sl1rfu1kzw9","_id":"cj496equq00282sl1216dfa1l"},{"post_id":"cj496eqts000h2sl1ie3gab0c","tag_id":"cj496equp00242sl1mf2ax8kl","_id":"cj496equq002a2sl1jmdnhgzc"},{"post_id":"cj496eqts000h2sl1ie3gab0c","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equr002b2sl1c8vd5se6"},{"post_id":"cj496eqts000h2sl1ie3gab0c","tag_id":"cj496equq00272sl1dzzl2xzh","_id":"cj496equs002d2sl1dxopxtsr"},{"post_id":"cj496eqtu000j2sl1rpi8t43w","tag_id":"cj496eqtw000l2sl1ctv95gwb","_id":"cj496equs002f2sl1n2lnjgme"},{"post_id":"cj496eqtu000j2sl1rpi8t43w","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equs002g2sl1c7zo7j3b"},{"post_id":"cj496eqtu000j2sl1rpi8t43w","tag_id":"cj496equr002c2sl151evm98a","_id":"cj496equt002i2sl1mejlr9mx"},{"post_id":"cj496eqtw000n2sl1ehh1m2i0","tag_id":"cj496equs002e2sl1dta89vag","_id":"cj496equt002k2sl12diop7x1"},{"post_id":"cj496eqtw000n2sl1ehh1m2i0","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equt002l2sl1tlp075mt"},{"post_id":"cj496eqtw000n2sl1ehh1m2i0","tag_id":"cj496equs002h2sl1daaxsipg","_id":"cj496equv002n2sl1tdjkyh66"},{"post_id":"cj496eqtz000q2sl1rogtqwvx","tag_id":"cj496equs002e2sl1dta89vag","_id":"cj496equv002p2sl19n7dxm8h"},{"post_id":"cj496eqtz000q2sl1rogtqwvx","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equw002q2sl1vhbepui9"},{"post_id":"cj496eqtz000q2sl1rogtqwvx","tag_id":"cj496equv002m2sl176ct8abc","_id":"cj496equw002s2sl1ercvs4dv"},{"post_id":"cj496equ3000v2sl12ge970ju","tag_id":"cj496eqtw000l2sl1ctv95gwb","_id":"cj496equw002t2sl13odbx6pm"},{"post_id":"cj496equ3000v2sl12ge970ju","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equx002v2sl14vzskjl8"},{"post_id":"cj496equ3000v2sl12ge970ju","tag_id":"cj496equv002o2sl1atw6n6x6","_id":"cj496equx002w2sl1qsdoj0mz"},{"post_id":"cj496equ6000y2sl1lxnyrn4v","tag_id":"cj496equw002r2sl1em9s8kln","_id":"cj496equx002x2sl17azw9ncn"},{"post_id":"cj496equ6000y2sl1lxnyrn4v","tag_id":"cj496eqt9000b2sl1zts2238h","_id":"cj496equx002y2sl10c3kbdjo"},{"post_id":"cj496equ6000y2sl1lxnyrn4v","tag_id":"cj496equx002u2sl1d2hd0zgw","_id":"cj496equx002z2sl18wok3rub"}],"Tag":[{"name":"Js","_id":"cj496eqsv00052sl1szkl4i6j"},{"name":"筆記","_id":"cj496eqt9000b2sl1zts2238h"},{"name":"js","_id":"cj496eqtq000g2sl1lvpo3iu3"},{"name":"Tools","_id":"cj496eqtw000l2sl1ctv95gwb"},{"name":"Flagcounter","_id":"cj496equ800112sl1w7u8rmbs"},{"name":"CSS","_id":"cj496equ900162sl1adffw88a"},{"name":"CSS3","_id":"cj496equc001f2sl19b3ih9aj"},{"name":"html","_id":"cj496equd001h2sl1pg29273s"},{"name":"笔记","_id":"cj496eque001l2sl1u76yeaie"},{"name":"box-model","_id":"cj496equg001n2sl1u7gay5rr"},{"name":"css","_id":"cj496equh001o2sl1ifwv3g1r"},{"name":"flex","_id":"cj496equk001t2sl11m3jmn4f"},{"name":"git","_id":"cj496equn001x2sl1n9to2t3j"},{"name":"heroku","_id":"cj496equo00222sl1rfu1kzw9"},{"name":"JS","_id":"cj496equp00242sl1mf2ax8kl"},{"name":"js判断APP是否安装","_id":"cj496equq00272sl1dzzl2xzh"},{"name":"markdown","_id":"cj496equr002c2sl151evm98a"},{"name":"Javascript","_id":"cj496equs002e2sl1dta89vag"},{"name":"react","_id":"cj496equs002h2sl1daaxsipg"},{"name":"nodejs","_id":"cj496equv002m2sl176ct8abc"},{"name":"redis","_id":"cj496equv002o2sl1atw6n6x6"},{"name":"Html","_id":"cj496equw002r2sl1em9s8kln"},{"name":"整理","_id":"cj496equx002u2sl1d2hd0zgw"}]}}